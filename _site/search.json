[
  {
    "objectID": "In-Class_Ex2/In-class_Ex2.html",
    "href": "In-Class_Ex2/In-class_Ex2.html",
    "title": "In class Exercise 1 - Do functionally similar water points positively co-occur in Nigeria?",
    "section": "",
    "text": "For humanity, water is a valuable resource. To maintain good health, people need access to clean water. It guarantees peace and security, creates a healthy environment, and supports a sustainable economy. However, there is insufficient clean water for more than 40% of the world’s population. UN-Water predicts that by 2025, 1.8 billion people would reside in areas with a complete water shortage. Food security is one of the many areas that are seriously threatened by the water crisis. About 70% of the freshwater that is available on Earth is used for agriculture.\nWater scarcities and poor water quality are worst in developing nations. Inadequate water and sanitation systems are a contributing factor in up to 80% of diseases in impoverished countries.\nDespite technological advancements, supplying clean water to rural communities remains a significant development challenge in many nations worldwide, particularly in those of the continent of Africa.\nIn this study, appropriate global and local measures of spatial Association techniques will be employed to reveal the spatial patterns of Non Functional water points. In this assignment, we will investigate Nigeria’s Local Government Area (LGA)"
  },
  {
    "objectID": "In-Class_Ex2/In-class_Ex2.html#getting-started",
    "href": "In-Class_Ex2/In-class_Ex2.html#getting-started",
    "title": "In class Exercise 1 - Do functionally similar water points positively co-occur in Nigeria?",
    "section": "Getting Started",
    "text": "Getting Started\nFirst, the required packages are loaded into the R environment . The required packages are sf, tidyverse, spdep, tmap, & funModeling\nwith the code below:\n\npacman::p_load(sf, tidyverse, spdep, tmap, funModeling)\n\n\nSpatial Data\nThe spatial dataset used in this assignment is the Nigeria Level-2 Administrative Boundary spatial dataset downloaded from Center for Humanitarian Data - Nigeria - Subnational Administrative Boundaries\nWe will load the spatial features by using st_read() from the sf package\nAs the data we want is in WSG-84 format, we set crs to 4326.\nTo perform the intersect function later to combine the water points data, we will not use st_transform() as it may produce outputs with missing points post transformation, which will distort our analysis.\n\nnga = st_read(dsn = \"data/geospatial\",\n               layer = \"nga_admbnda_adm2_osgof_20190417\",\n               crs = 4326)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `D:\\Allanckw\\ISSS624\\In-Class_Ex2\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n#nigeria_lga_sf = st_transform(nigeria_lga_sf, crs=4326) cause missing points\n\nWe could use st_crs()to verify the coordinate system from the object.\n\nst_crs(nga)\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\nAt the end, we can examine how the base map looks like by using the tmap package\n\ntm_shape(nga) + \n  \n  tm_borders(alpha=0.5) + \n  tm_compass(type=\"8star\", size=2) +\n  tm_scale_bar() +\n  tm_grid (alpha=0.2) +\n  tm_layout(main.title=\"Map of Nigeria LGA\", \n            main.title.position=\"center\", \n            main.title.size=1.2, \n            legend.height = 0.35, \n            legend.width = 0.35, \n            frame = TRUE) \n\n\n\n\nAs the map is really big with close to 800 polygons involved, we will change the tmap mode to interactive viewing by calling ttm() in tmap package, otherwise, it will too small for any form of analysis\n\nttm()\n\n\n\nAspatial Data\n\nCleaning the Data\nThe aspatial dataset used in this assignment is the water point data exchange dataset found in WPdx Global Data Repositories. Data is filtered on the web portal to only keep Nigeria and the file is saved as NigeriaWaterPoints_Raw.csv\nAs we are only interested in the functionality of the water point, it is important to capture fields that may affect the functionality\n\nLGA: The area we are interested in\nState: The state of the LGA of Nigeria\nFunctional: Whether it is functional or not\nmanagement: who manages it?\nQuality: what is the quality?\nWater Source Category: where the water came from?\nWater Tech Category: What technology is used?\nlatitude\nlongitude\n\nTo load the raw data file, we use the read_csv function\n\nwpdx_raw = read_csv(\"data/aspatial/NigeriaWaterPoints_Raw.csv\") \n\nMost of the columns are irrelevant, so we will perform the following:\n\nkeep the columns we want to clean it up by specifying the columns with one to retain with subset\nrenaming the columns using rename_with\nReplace all the NA with unknown for columns with NA value present\n\n\nretain_cols = c('#clean_adm2', '#clean_adm1', '#status_clean', '#management_clean', '#subjective_quality', '#fecal_coliform_presence', '#water_source_category', '#water_tech_category', '#lat_deg', '#lon_deg' )\n\nnew_col_names = c('LGA', 'State', 'Functional', 'Management', 'Quality', 'presence_of_fecal_coliform', 'Water_Source_Category', 'Water_Tech_Category', 'latitude', 'longitude')\n\nwpdx_clean = subset(wpdx_raw, select = (names(wpdx_raw) %in% retain_cols)) %>%  rename_with(~ new_col_names, all_of(retain_cols)) %>% \nreplace_na(list(Functional = \"Unknown\", Management = \"Unknown\", Quality = \"Unknown\", Water_Source_Category = \"Unknown\", Water_Tech_Category = \"Unknown\"))\n\nWe save the clean file with saveRDS(), the file will be reduced to 1.6MB from the 144MB raw file that we downloaded.\n\nsaveRDS(wpdx_clean, \"data/aspatial/wpdx_clean.rds\")\n\nWe can then delete the raw file from the project and retrieve the saved RDS file using readRDS()\n\nwpdx_clean = readRDS(\"data/aspatial/wpdx_clean.rds\")\n\n\n\nConverting csv data into spatial features\nWe can use st_as_sfto create a dataframe from the longitude (x) and latitude (y) values. The EPSG 4326 code is used as the dataset is referencing WGS84 geographic coordinate system. We could use st_crs()to verify the coordinate system from the object.\n\nwpdx_clean_sf = st_as_sf(wpdx_clean, coords = c(\"longitude\", \"latitude\"), crs=4326)\nst_crs(wpdx_clean_sf)\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\nWe can then use glimpse() to verify each field’s data type & available values.\nThe results shows that the longitude and latitude values have been converted to a geometry object consisting of the longitude and latitude values as points, with both columns now dropped.\n\nglimpse(wpdx_clean_sf)\n\nRows: 95,008\nColumns: 8\n$ Water_Source_Category <chr> \"Unknown\", \"Well\", \"Well\", \"Well\", \"Well\", \"Well…\n$ Water_Tech_Category   <chr> \"Tapstand\", \"Mechanized Pump\", \"Hand Pump\", \"Unk…\n$ State                 <chr> \"Ekiti\", \"Ogun\", \"Ebonyi\", \"Enugu\", \"Enugu\", \"Be…\n$ LGA                   <chr> \"Moba\", \"Obafemi-Owode\", \"Ohaukwu\", \"Isi-Uzo\", \"…\n$ Management            <chr> \"Unknown\", \"Other\", \"Unknown\", \"Unknown\", \"Unkno…\n$ Functional            <chr> \"Unknown\", \"Functional\", \"Unknown\", \"Unknown\", \"…\n$ Quality               <chr> \"Unknown\", \"Acceptable quality\", \"Unknown\", \"Unk…\n$ geometry              <POINT [°]> POINT (5.12 7.98), POINT (3.597668 6.96453…\n\n\n\n\nAggregate the Data\nThe code below uses freq() of the funModeling package to display the distribution of functional field in wpdx_clean_sf\n\nfreq(data=wpdx_clean_sf, input = 'Functional')\n\n\n\n\n                        Functional frequency percentage cumulative_perc\n1                       Functional     45883      48.29           48.29\n2                   Non-Functional     29385      30.93           79.22\n3                          Unknown     10656      11.22           90.44\n4      Functional but needs repair      4579       4.82           95.26\n5 Non-Functional due to dry season      2403       2.53           97.79\n6        Functional but not in use      1686       1.77           99.56\n7         Abandoned/Decommissioned       234       0.25           99.81\n8                        Abandoned       175       0.18           99.99\n9 Non functional due to dry season         7       0.01          100.00\n\n\nAfter finding its classification, we will need to aggregate them into functional, non functional and unknown. We will create new data frames to store them by using the filter function\n\nfunc_list = c(\"Functional\", \"Functional but needs repair\", \"Functional but not in use\")\nwpt_functional = wpdx_clean_sf %>%\n  filter(Functional %in% func_list)\n\nwpt_non_functional = wpdx_clean_sf %>%\n  filter(!Functional %in% c(func_list, \"Unknown\"))\n\nwpt_unknown = wpdx_clean_sf %>%\n  filter(Functional %in% \"Unknown\")\n\nWe can use st_intersects() to find common data points between geographical datasets. In our case we need to find the common points in the Nigeria’s LGA spatial dataset and the water point aspatial dataset\nThe below code does 4 things\n\nIt intersects the Nigeria LGA dataset (nga dataframe) with the water point dataset (wpdx_clean_sf dataframe) and produce a new column to denote the total number of water points in the area (Total wpt).\nThe result of 1 is piped to add 3 columns to denote the number of functional, non functional and unknown water points in the area to produce wpt functional, wpt non functional and wpt unknown respectively\nWe will also add 2 new columns to find the percentage of functional and non functional water points\nSelect appropriate columns required which are the LGA area and LGA code (Column 3 & 4), Administration Level 1 Area and Administration Level 1 Code (Column 9 & 10), the columns that were added as explained in steps 2 & 3 and the geometry multipolygon objects (Column 18 to 23).\n\n\nnga_wp = nga %>% \n  #combine nga with water point sf\n  mutate(`total wpt` = lengths(\n    st_intersects(nga, wpdx_clean_sf))) %>%\n  #add columns to produce no. of functional, non functional and unknown points\n  mutate(`wpt functional` = lengths(\n    st_intersects(nga, wpt_functional))) %>%\n  mutate(`wpt non functional` = lengths(\n    st_intersects(nga, wpt_non_functional))) %>%\n  mutate(`wpt unknown` = lengths(\n    st_intersects(nga, wpt_unknown))) %>%\n  #add columns to compute %\n  mutate(pct_functional = `wpt functional`/`total wpt`) %>%\n  mutate(`pct_non-functional` = `wpt non functional`/`total wpt`) %>%\n  select(3:4, 9:10, 18:23)"
  },
  {
    "objectID": "In-Class_Ex2/In-class_Ex2.html#visualizing-the-spatial-distribution-of-water-points",
    "href": "In-Class_Ex2/In-class_Ex2.html#visualizing-the-spatial-distribution-of-water-points",
    "title": "In class Exercise 1 - Do functionally similar water points positively co-occur in Nigeria?",
    "section": "Visualizing the spatial distribution of water points",
    "text": "Visualizing the spatial distribution of water points\nWe can find breaks of the respective distributions by using the summary statistics using percentiles, this is to help us find out the distribution of water points in each quantile.\n\nsummary(nga_wp$`total wpt`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    0.0    45.0    96.0   122.7   168.8   894.0 \n\nsummary(nga_wp$`wpt functional`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00   17.00   45.50   67.36   87.75  752.00 \n\nsummary(nga_wp$`wpt non functional`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00   12.25   34.00   41.60   60.75  278.00 \n\nsummary(nga_wp$`wpt unknown`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    0.00   13.76   17.75  219.00 \n\n\nFunctions from the tmap packages is used to produce the map\n\nwp_total = tm_shape(nga_wp) + \n  tm_fill(\"total wpt\", \n          palette =\"Reds\", breaks = c(0, 45, 96, 168, 894)) + \n  tm_borders(alpha=0.5) + \n  #tm_compass(type=\"8star\", size=2) +\n  #tm_scale_bar() +\n  tm_grid (alpha=0.2) +\n  tm_layout(main.title=\"Total WP\", \n            main.title.position=\"center\", \n            main.title.size=1.2, \n            legend.height = 0.35, \n            legend.width = 0.35, \n            frame = TRUE) \n\nwp_functional = tm_shape(nga_wp) + \n  tm_fill(\"wpt functional\", \n          palette =\"Reds\", breaks = c(0, 17, 46, 88, 752)) + \n  tm_borders(alpha=0.5) + \n  #tm_compass(type=\"8star\", size=2) +\n  #tm_scale_bar() +\n  tm_grid (alpha=0.2) +\n  tm_layout(main.title=\"functional WP\", \n            main.title.position=\"center\", \n            main.title.size=1.2, \n            legend.height = 0.35, \n            legend.width = 0.35, \n            frame = TRUE) \n\nwp_nonfunctional = tm_shape(nga_wp) + \n  tm_fill(\"wpt non functional\", \n          palette =\"Reds\", breaks = c(0, 13, 34, 42, 61, 278)) + \n  tm_borders(alpha=0.5) + \n  #tm_compass(type=\"8star\", size=2) +\n  #tm_scale_bar() +\n  tm_grid (alpha=0.2) +\n  tm_layout(main.title=\"non functional WP\", \n            main.title.position=\"center\", \n            main.title.size=1.2, \n            legend.height = 0.35, \n            legend.width = 0.35, \n            frame = TRUE) \n\nwp_Unknown = tm_shape(nga_wp) + \n  tm_fill(\"wpt unknown\", \n          palette =\"Reds\", breaks = c(0, 14, 18, 219)) + \n  tm_borders(alpha=0.5) + \n  #tm_compass(type=\"8star\", size=2) +\n  #tm_scale_bar() +\n  tm_grid (alpha=0.2) +\n  tm_layout(main.title=\"unknown status\", \n            main.title.position=\"center\", \n            main.title.size=1.2, \n            legend.height = 0.35, \n            legend.width = 0.35, \n            frame = TRUE) \n\nFinally, we will use the tmap_arrange() method to create a 2x2 matrix to display the maps\n\ntmap_arrange(wp_functional, wp_nonfunctional, wp_Unknown, wp_total, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\nIn order to make observations, lets first divide the map into 6 sectors for easy reference\nSector 1 will be from (2, 10) to (4, 12), Sector 2 will be from (6, 10) to (8, 12),\nSector 3 will be from (10, 10) to (14, 12), Sector 4 will be from (2, 4) to (4, 10),\nSector 5 will be from (6, 4) to (8,10) and lastly sector 6 from (10, 4) to (14, 8)\n\n\n\nFigure 1: Sectoral Division of Map Of Nigeria LGA\n\n\nThe following observations can be made:\n\nFrom the wp_functional map, it can be seen that the number of functional water points that is in the upper quantile tend to congregate in Sector 2 and the parts of sector 4 between (5, 8) and (6, 10)\nFrom the wp_nonfunctional map, it can be seen that the most of the non functional water points in the upper quantile tend to congregate the following areas: In Sector 4 in (4, 8), Sector 5 in (8, 6) and Sector 6 between (10, 6) and (10, 8), and stretching to sector 3 all the way to (10, 10)\nFrom the wp_Unknown map, it can be seen that the most of the water points with unknown status in the upper quantile congregate in Sector 4 between (2, 6) and (4, 6), in Sector 5 between (6, 4) and (8, 4) and in (8, 8) and in sector 6 between (10, 6) and (10, 8).\nFrom the wp_total map, it can be seen that most of the water points regardless of status, its upper quantile congregate in sector 5 between (8, 4) and (8,6) and in sector 6 between (10, 6) and (10, 8)\nFrom the wp_total map, it can also be seen that in the areas (8, 12), (10, 12) and (12, 12), there are sometimes no water point at all or very few of them."
  },
  {
    "objectID": "Take-Home_Ex1/Take-Home_Ex1.html",
    "href": "Take-Home_Ex1/Take-Home_Ex1.html",
    "title": "Take Home Exercise 1 - Investigation of Water points in Nigeria",
    "section": "",
    "text": "Water is a crucial resource for humanity. People must have access to clean water in order to be healthy. It promotes a healthy environment, peace and security, and a sustainable economy. However, more than 40% of the world’s population lacks access to enough clean water. According to UN-Water, 1.8 billion people would live in places with a complete water shortage by 2025. One of the many areas that the water problem gravely threatens is food security. Agriculture uses over 70% of the freshwater that is present on Earth.\nThe severe water shortages and water quality issues are seen in underdeveloped countries. Up to 80% of infections in developing nations are attributed to inadequate water and sanitation infrastructure.\nDespite technological advancement, providing rural people with clean water continues to be a key development concern in many countries around the world, especially in those on the continent of Africa.\nThe spatial patterns of non-functional water points will be shown in this study by using the proper global and local spatial association methodologies. We look at Nigeria’s in this assignment (LGA)"
  },
  {
    "objectID": "Take-Home_Ex1/Take-Home_Ex1.html#getting-started",
    "href": "Take-Home_Ex1/Take-Home_Ex1.html#getting-started",
    "title": "Take Home Exercise 1 - Investigation of Water points in Nigeria",
    "section": "Getting Started",
    "text": "Getting Started\nFirst, the required packages are loaded into the R environment . The required packages are sf, tidyverse, spdep, tmap, & funModeling\nwith the code below:\n\npacman::p_load(sf, tidyverse, spdep, tmap, funModeling)\n\n\nSpatial Data\nThe spatial dataset used in this assignment is the Nigeria Level-2 Administrative Boundary spatial dataset downloaded from Center for Humanitarian Data - Nigeria - Subnational Administrative Boundaries\nWe will load the spatial features by using st_read() from the sf package\nAs the data we want is in WSG-84 format, we set crs to 4326.\nWe won’t utilize st transform() at this time because it can result in outputs with missing points after transformation, which would skew our study.\n\nnga = st_read(dsn = \"data/geospatial\",\n               layer = \"nga_admbnda_adm2_osgof_20190417\",\n               crs = 4326)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `D:\\Allanckw\\ISSS624\\Take-Home_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n#nigeria_lga_sf = st_transform(nigeria_lga_sf, crs=4326) cause missing points\n\nWe could use st_crs()to verify the coordinate system from the object.\n\nst_crs(nga)\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\nBefore we start analyzing the data, lets us take a look at some characteristics of the spatial features to have a sense of what we are dealing with. We can use glimpse() to determine to accomplish that\n\nglimpse(nga)\n\nRows: 774\nColumns: 17\n$ Shape_Leng <dbl> 0.2370744, 0.2624772, 3.0753158, 2.5379842, 0.6871498, 1.06…\n$ Shape_Area <dbl> 0.0015239210, 0.0035311037, 0.3268678399, 0.0683785064, 0.0…\n$ ADM2_EN    <chr> \"Aba North\", \"Aba South\", \"Abadam\", \"Abaji\", \"Abak\", \"Abaka…\n$ ADM2_PCODE <chr> \"NG001001\", \"NG001002\", \"NG008001\", \"NG015001\", \"NG003001\",…\n$ ADM2_REF   <chr> \"Aba North\", \"Aba South\", \"Abadam\", \"Abaji\", \"Abak\", \"Abaka…\n$ ADM2ALT1EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2ALT2EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1_EN    <chr> \"Abia\", \"Abia\", \"Borno\", \"Federal Capital Territory\", \"Akwa…\n$ ADM1_PCODE <chr> \"NG001\", \"NG001\", \"NG008\", \"NG015\", \"NG003\", \"NG011\", \"NG02…\n$ ADM0_EN    <chr> \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nig…\n$ ADM0_PCODE <chr> \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\",…\n$ date       <date> 2016-11-29, 2016-11-29, 2016-11-29, 2016-11-29, 2016-11-29…\n$ validOn    <date> 2019-04-17, 2019-04-17, 2019-04-17, 2019-04-17, 2019-04-17…\n$ validTo    <date> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ SD_EN      <chr> \"Abia South\", \"Abia South\", \"Borno North\", \"Federal Capital…\n$ SD_PCODE   <chr> \"NG00103\", \"NG00103\", \"NG00802\", \"NG01501\", \"NG00302\", \"NG0…\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((7.401109 5...., MULTIPOLYGON (…\n\n\nWe can use freq() of the funModeling package to display the distribution of Level 1 administration (Which are states in Nigeria) instead and only zooming in on the micro level when we perform the water point analysis.\n\nfreq(data=nga, input = 'ADM1_EN')\n\n\n\n\n                     ADM1_EN frequency percentage cumulative_perc\n1                       Kano        44       5.68            5.68\n2                    Katsina        34       4.39           10.07\n3                        Oyo        33       4.26           14.33\n4                  Akwa Ibom        31       4.01           18.34\n5                       Osun        30       3.88           22.22\n6                      Borno        27       3.49           25.71\n7                        Imo        27       3.49           29.20\n8                     Jigawa        27       3.49           32.69\n9                      Delta        25       3.23           35.92\n10                     Niger        25       3.23           39.15\n11                     Benue        23       2.97           42.12\n12                    Kaduna        23       2.97           45.09\n13                    Rivers        23       2.97           48.06\n14                    Sokoto        23       2.97           51.03\n15                   Adamawa        21       2.71           53.74\n16                   Anambra        21       2.71           56.45\n17                     Kebbi        21       2.71           59.16\n18                      Kogi        21       2.71           61.87\n19                    Bauchi        20       2.58           64.45\n20                     Lagos        20       2.58           67.03\n21                      Ogun        20       2.58           69.61\n22               Cross River        18       2.33           71.94\n23                       Edo        18       2.33           74.27\n24                      Ondo        18       2.33           76.60\n25                      Abia        17       2.20           78.80\n26                     Enugu        17       2.20           81.00\n27                   Plateau        17       2.20           83.20\n28                      Yobe        17       2.20           85.40\n29                     Ekiti        16       2.07           87.47\n30                     Kwara        16       2.07           89.54\n31                    Taraba        16       2.07           91.61\n32                   Zamfara        14       1.81           93.42\n33                    Ebonyi        13       1.68           95.10\n34                  Nasarawa        13       1.68           96.78\n35                     Gombe        11       1.42           98.20\n36                   Bayelsa         8       1.03           99.23\n37 Federal Capital Territory         6       0.78          100.00\n\n\n774 Local Government Areas (LGA) make up Nigeria’s 37 states, with Kano having the most LGAs overall.\nFor a meaningful analysis, there are just too many LGAs, both large and little.\nCalling ttm() in the tmap package will switch the tmap’s viewing mode to interactive viewing, which will help us better visualize the map. Without this change, the tmap will be too small for any type of analysis. Additionally, we’ll base the map’s plot on States (Level 1 Administration Area)\nGiven that there are 37 states, we must raise the maximum number of categories from the default value of 30 to 37. Using tmap_options(max.categories = 37), the threshold can be set.\n\nttm()\ntmap_options(max.categories = 37)\n\nNow, we are ready to build our map with the functions in the tmap package\n\ntm_shape(nga) + \n \n  tm_polygons(\"ADM1_EN\") +\n  tm_borders(alpha=0.5) + \n  tm_scale_bar() +\n  tm_grid (alpha=0.2) +\n  tm_layout(main.title=\"Map of Nigeria LGA\", \n            main.title.position=\"center\", \n            main.title.size=1.2, \n            legend.height = 0.35, \n            legend.width = 0.35, \n            frame = TRUE) \n\n\n\n\n\n\n\n\nAspatial Data\n\nCleaning the Data\nThe aspatial dataset used in this assignment is the water point data exchange dataset found in WPdx Global Data Repositories. Data is filtered on the web portal to only keep Nigeria and the file is saved as NigeriaWaterPoints_Raw.csv\nAs we are only interested in the functionality of the water point, it is important to capture fields that may affect the functionality\n\nLGA: The area we are interested in\nState: The state of the LGA of Nigeria\nFunctional: Whether it is functional or not\nmanagement: who manages it?\nQuality: what is the quality?\nWater Source Category: where the water came from?\nWater Tech Category: What technology is used?\nlatitude\nlongitude\n\nTo load the raw data file, we use the read_csv function\n\nwpdx_raw = read_csv(\"data/aspatial/NigeriaWaterPoints_Raw.csv\") \n\nMost of the columns are irrelevant, so we will perform the following:\n\nkeep the columns we want to clean it up by specifying the columns with one to retain with subset\nrenaming the columns using rename_with\nReplace all the NA with unknown for columns with NA value present\n\n\nretain_cols <- c('#clean_adm2', '#clean_adm1', '#status_clean', '#management_clean', '#subjective_quality', '#fecal_coliform_presence', '#water_source_category', '#water_tech_category', '#lat_deg', '#lon_deg' )\n\nnew_col_names <- c('LGA', 'State', 'Functional', 'Management', 'Quality', 'presence_of_fecal_coliform', 'Water_Source_Category', 'Water_Tech_Category', 'latitude', 'longitude')\n\nwpdx_clean = subset(wpdx_raw, select = (names(wpdx_raw) %in% retain_cols)) %>%  rename_with(~ new_col_names, all_of(retain_cols)) %>% \nreplace_na(list(Functional = \"Unknown\", Management = \"Unknown\", Quality = \"Unknown\", Water_Source_Category = \"Unknown\", Water_Tech_Category = \"Unknown\"))\n\nWe save the clean file with saveRDS(), the file will be reduced to 1.6MB from the 144MB raw file that we downloaded.\n\nsaveRDS(wpdx_clean, \"data/aspatial/wpdx_clean.rds\")\n\nWe can then delete the raw file from the project and retrieve the saved RDS file using readRDS()\n\nwpdx_clean = readRDS(\"data/aspatial/wpdx_clean.rds\")\n\n\n\nConverting csv data into spatial features\nWe can use st_as_sfto create a dataframe from the longitude (x) and latitude (y) values. The EPSG 4326 code is used as the dataset is referencing WGS84 geographic coordinate system. We could use st_crs()to verify the coordinate system from the object.\n\nwpdx_clean_sf = st_as_sf(wpdx_clean, coords = c(\"longitude\", \"latitude\"), crs=4326)\nst_crs(wpdx_clean_sf)\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\nWe can then use glimpse() to verify each field’s data type & available values.\nThere are 95, 008 water points in the LGAs. The results also shows that the longitude and latitude values have been converted to a geometry object consisting of the longitude and latitude values as points, with both columns now dropped.\n\nglimpse(wpdx_clean_sf)\n\nRows: 95,008\nColumns: 8\n$ Water_Source_Category <chr> \"Unknown\", \"Well\", \"Well\", \"Well\", \"Well\", \"Well…\n$ Water_Tech_Category   <chr> \"Tapstand\", \"Mechanized Pump\", \"Hand Pump\", \"Unk…\n$ State                 <chr> \"Ekiti\", \"Ogun\", \"Ebonyi\", \"Enugu\", \"Enugu\", \"Be…\n$ LGA                   <chr> \"Moba\", \"Obafemi-Owode\", \"Ohaukwu\", \"Isi-Uzo\", \"…\n$ Management            <chr> \"Unknown\", \"Other\", \"Unknown\", \"Unknown\", \"Unkno…\n$ Functional            <chr> \"Unknown\", \"Functional\", \"Unknown\", \"Unknown\", \"…\n$ Quality               <chr> \"Unknown\", \"Acceptable quality\", \"Unknown\", \"Unk…\n$ geometry              <POINT [°]> POINT (5.12 7.98), POINT (3.597668 6.96453…\n\n\n\n\nAggregate the Data\nWe can use freq() of the funModeling package to display the distribution of functional field in wpdx_clean_sf. This is to help us aggregate the data as the dataset provide breakdowns of functional status. In order to only look at non functional water points, we will need to aggregate the different categories into simply functional, non functional and unknowns.\n\nfreq(data=wpdx_clean_sf, input = 'Functional')\n\n\n\n\n                        Functional frequency percentage cumulative_perc\n1                       Functional     45883      48.29           48.29\n2                   Non-Functional     29385      30.93           79.22\n3                          Unknown     10656      11.22           90.44\n4      Functional but needs repair      4579       4.82           95.26\n5 Non-Functional due to dry season      2403       2.53           97.79\n6        Functional but not in use      1686       1.77           99.56\n7         Abandoned/Decommissioned       234       0.25           99.81\n8                        Abandoned       175       0.18           99.99\n9 Non functional due to dry season         7       0.01          100.00\n\n\nTo aggregate them into functional, non functional and unknown, we will create new data frames to store them by using the filter function\n\nfunc_list = c(\"Functional\", \"Functional but needs repair\", \"Functional but not in use\")\nwpt_functional = wpdx_clean_sf %>%\n  filter(Functional %in% func_list)\n\nwpt_non_functional = wpdx_clean_sf %>%\n  filter(!Functional %in% c(func_list, \"Unknown\"))\n\nwpt_unknown = wpdx_clean_sf %>%\n  filter(Functional %in% \"Unknown\")\n\nOut of the 32, 204, records, we can gain some insights on why it might be non functional, is it due to management? Is it due to technology? Is it due to the source of the water?\nSimilarly, like how we aggregate functional data points, we could use freq() of the funModeling package to find out\n\nfreq(data=wpt_non_functional, input = 'Management')\n\n\n\n\n                             Management frequency percentage cumulative_perc\n1                               Unknown     17617      54.70           54.70\n2                  Community Management      8249      25.61           80.31\n3           Direct Government Operation      3831      11.90           92.21\n4                                 Other      1941       6.03           98.24\n5                     School Management       397       1.23           99.47\n6                  Health Care Facility       128       0.40           99.87\n7        Other Institutional Management        25       0.08           99.95\n8 Private Operator/Delegated Management        16       0.05          100.00\n\n\n\nfreq(data=wpt_non_functional, input = 'Water_Tech_Category')\n\n\n\n\n  Water_Tech_Category frequency percentage cumulative_perc\n1           Hand Pump     20471      63.57           63.57\n2     Mechanized Pump     11532      35.81           99.38\n3             Unknown       169       0.52           99.90\n4            Tapstand        32       0.10          100.00\n\n\n\nfreq(data=wpt_non_functional, input = 'Water_Source_Category')\n\n\n\n\n  Water_Source_Category frequency percentage cumulative_perc\n1                  Well     31470      97.72           97.72\n2                Spring       733       2.28          100.00\n3           Piped Water         1       0.00          100.00\n\n\nFrom the results, we can conclude that\n\nMore than half of the non functional water points have an unknown management, we could ask if these water points are even managed.\nMost of the non functional water points uses pumps, we could ask the question if there is an issue with the pumps and if there is a lack of expertise to repair or replace them when they fail.\n97.72% of such non functional water points are made up of wells."
  },
  {
    "objectID": "Take-Home_Ex1/Take-Home_Ex1.html#visualizing-the-spatial-distribution-of-water-points",
    "href": "Take-Home_Ex1/Take-Home_Ex1.html#visualizing-the-spatial-distribution-of-water-points",
    "title": "Take Home Exercise 1 - Investigation of Water points in Nigeria",
    "section": "Visualizing the spatial distribution of water points",
    "text": "Visualizing the spatial distribution of water points\nWe could use breaks of the summary statistics by using percentiles, this is to help us find out the distribution of water points in each quantile.\n\n#summary(nga_wp$`total wpt`)\n#summary(nga_wp$`wpt functional`)\nsummary(nga_wp$`wpt non functional`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00   12.25   34.00   41.60   60.75  278.00 \n\n#summary(nga_wp$`wpt unknown`)\n\nIt is recommended not to use the default style with breaks as quantile since the range from the third quantile to the maximum is too wide and could result in a skewed representation. We compute the variance and standard deviation of non-functional water points first to better understand our dataset since we now need to decide which style is appropriate for the map.\n\nvar(nga_wp$`wpt non functional`)\n\n[1] 1376.914\n\nsd(nga_wp$`wpt non functional`) \n\n[1] 37.10679\n\n\nIt appears that this dataset has a very large variance.  Since the variance is so high, we would like to lower it. Using the kmeans style is one method to do this. n = 6 is choosen as after some experimentation, it appears that 6 is the optimal number of clusters.\nFunctions from the tmap packages is used to produce the map\nFirst we use tm_shape() + tm_fill(\"ADM1_EN\") to form Layer 1 of the map to form the 37 states of the map. The Pastel1 palette is used because it is difficult to read different shades of the same two to three colors; Pastel1 has more colors, making states more distinct.\nNext we use tm_shape() + tm_fill(\"wpt non functional\") to form Layer 2 of the map which are the non functional water points. The palette used in this case is Purple Red such that areas with very little water points are shaded with a very light colour.\nWe may switch between layers on the interactive map to superimpose the nonfunctional water locations. With so many polygons, putting it side by side can be challenging to interpret.\n\ntm_shape(nga) + \n \n  tm_fill(\"ADM1_EN\", palette = \"Pastel1\") +\n  tm_borders(alpha=0.5) + \n  tm_grid (alpha=0.2) +\n\n  tm_shape(nga_wp) + \n  tm_fill(\"wpt non functional\", \n          palette =\"PuRd\", style=\"kmeans\", n=6) +  \n  tm_borders(alpha=0.5) + \n  tm_grid (alpha=0.2) +\n  tm_layout(main.title=\"non functional WP - 2 Layer map\", \n            main.title.position=\"center\", \n            main.title.size=1.2, \n            #legend.height = 0.35, \n            #legend.width = 0.35, \n            frame = TRUE) \n\n\n\n\n\n\nUsing dplyr package, we can summarize find out which States has the most number non functional water points and which are the states that has the most number of LGAs by using the functions group_by, summarise and arrange\n\n#Sum of non functional water points \nnga_wp %>% \n  group_by(ADM1_EN) %>% \n   summarise(NF_Frequency = sum(`wpt non functional`), \n             #F_Frequency = sum(`wpt functional`),\n             Total_Freq = sum(`total wpt`),\n             NF_Ratio = (NF_Frequency / Total_Freq) * 100\n             ) %>% \n    arrange(desc(NF_Frequency))\n\nSimple feature collection with 37 features and 4 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n# A tibble: 37 × 5\n   ADM1_EN     NF_Frequency Total_Freq NF_Ratio                         geometry\n   <chr>              <int>      <int>    <dbl>                   <GEOMETRY [°]>\n 1 Osun                2118       5519     38.4 POLYGON ((4.910021 7.841812, 4.…\n 2 Kaduna              1912       4925     38.8 POLYGON ((8.273597 11.30846, 8.…\n 3 Kwara               1634       3531     46.3 POLYGON ((4.876071 9.157646, 4.…\n 4 Kano                1570       7125     22.0 POLYGON ((8.727456 12.21461, 8.…\n 5 Ondo                1552       2575     60.3 POLYGON ((5.937628 7.648777, 5.…\n 6 Katsina             1521       5465     27.8 POLYGON ((8.3992 13.0758, 8.390…\n 7 Jigawa              1517       9696     15.6 POLYGON ((8.399011 12.82706, 8.…\n 8 Cross River         1446       3492     41.4 MULTIPOLYGON (((8.818036 5.6935…\n 9 Plateau             1332       4701     28.3 POLYGON ((8.820398 10.38392, 8.…\n10 Oyo                 1329       4085     32.5 POLYGON ((4.024729 7.664918, 4.…\n# … with 27 more rows\n\n#sum of LGAs by states \nnga_wp %>% \n  group_by(ADM1_EN) %>% \n  summarise(count = n())%>% \n    arrange(desc(count))\n\nSimple feature collection with 37 features and 2 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n# A tibble: 37 × 3\n   ADM1_EN   count                                                      geometry\n   <chr>     <int>                                                <GEOMETRY [°]>\n 1 Kano         44 POLYGON ((8.727456 12.21461, 8.72491 12.21429, 8.721373 12.2…\n 2 Katsina      34 POLYGON ((8.3992 13.0758, 8.39043 13.08745, 8.38292 13.09174…\n 3 Oyo          33 POLYGON ((4.024729 7.664918, 4.039038 7.684978, 4.056281 7.6…\n 4 Akwa Ibom    31 MULTIPOLYGON (((7.530807 5.150259, 7.531415 5.146801, 7.5325…\n 5 Osun         30 POLYGON ((4.910021 7.841812, 4.911101 7.85011, 4.914135 7.85…\n 6 Borno        27 POLYGON ((14.58718 11.75277, 14.58861 11.75334, 14.59292 11.…\n 7 Imo          27 POLYGON ((7.422786 5.583626, 7.425965 5.585613, 7.426281 5.5…\n 8 Jigawa       27 POLYGON ((8.399011 12.82706, 8.390081 12.82528, 8.38304 12.8…\n 9 Delta        25 POLYGON ((5.985599 5.124185, 5.99217 5.117613, 5.995821 5.11…\n10 Niger        25 POLYGON ((7.250727 10.03942, 7.240785 10.03998, 7.232374 10.…\n# … with 27 more rows\n\n\n\nObservations\n\nAccording to the statistics, Osun has the highest number of non-operational water points - 2118 of them among the 37 states, followed by Kaduna (1912 water points) and Kwara (1634 water points).\nKano, despite being the State with the most number of LGAs (44), has only 1570 non functional water points (Ranked 4th) as compared to Osun that only comprises of 30 LGAs (Ranked 1st).\nIn contrast to Kaduna & Kwara, which are greater in size, Osun has 5519 water points, which is an interesting fact. In addition, nearly half of the water points in Kwara are not working.\nDespite having a larger territory, Ondo, the state directly south-east of Osun, has over 60% of its water points that are not operational.\nThe south-eastern and western regions of Nigeria appear to be the hotspots for the spread of inoperative water points.\nThere are no non-functional water points on Nigeria’s north-eastern coast. Using the tmap package, we plot the functional map to see if there are any water points in the region or if there are none at all.\nThis can assist us in figuring out whether the region in the north-east is succeeding in a way that can be transferred to other parts of the nation, or whether it is uninhabited or underdeveloped.\n\n\n  tm_shape(nga_wp) + \n  tm_fill(\"wpt functional\", \n          palette =\"PuRd\", style=\"kmeans\", n=6) +  \n  tm_borders(alpha=0.5) + \n  tm_grid (alpha=0.2) +\n  tm_layout(main.title=\"non functional WP - 2 Layer map\", \n            main.title.position=\"center\", \n            main.title.size=1.2, \n            #legend.height = 0.35, \n            #legend.width = 0.35, \n            frame = TRUE) \n\n\n\n\n\n\nThe north-eastern region of Nigeria has few to no water points, which suggests to us that it may be that the region is underdeveloped or uninhabited."
  },
  {
    "objectID": "Take-Home_Ex1/Take-Home_Ex1.html#reference",
    "href": "Take-Home_Ex1/Take-Home_Ex1.html#reference",
    "title": "Take Home Exercise 1 - Investigation of Water points in Nigeria",
    "section": "Reference",
    "text": "Reference\nKassambara A (n.d) . K-Means Clustering in R: Algorithm and Practical Examples\nhttps://www.datanovia.com/en/lessons/k-means-clustering-in-r-algorith-and-practical-examples/\nLong, A (n.d.), Local Moran\nhttp://ceadserv1.nku.edu/longa//geomed/stats/localmoran/localmoran.html"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on Ex2.html",
    "href": "Hands-on_Ex2/Hands-on Ex2.html",
    "title": "Hands-on Exercise2 - Choropleth Mapping with R",
    "section": "",
    "text": "In this hands on exercise, I learnt how to use the tmap package in R\nFirstly, we load the required packages in R\n\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on Ex2.html#importing-preparing-the-data",
    "href": "Hands-on_Ex2/Hands-on Ex2.html#importing-preparing-the-data",
    "title": "Hands-on Exercise2 - Choropleth Mapping with R",
    "section": "2.3 Importing & preparing the data",
    "text": "2.3 Importing & preparing the data\n\nLoading the Master Plan 2014 Subzone Boundary\n\nmpsz = st_read(dsn=\"data/geospatial\", layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\Allanckw\\ISSS624\\Hands-on_Ex2\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\nLoading the Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling dataset\n\npopData = read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nCreate a data table to break the population data into the following categories:\n\n\nYOUNG: age group 0 to 4 until age group 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\npopdata2020 = popData %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\n  rowSums(.[13:15]))%>%\n    mutate(`AGED`=rowSums(.[16:21])) %>%\n    mutate(`TOTAL`=rowSums(.[3:21])) %>%  \n    mutate(`DEPENDENCY` = (`YOUNG` + `AGED`) /`ECONOMY ACTIVE`) %>%\n  \n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n\nJoining attribute data & geospatial data\nBefore joining, we need to convert the PA and SZ fields to upper case. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\nWe only want Economy Active citizen in our analysis.\n\npopdata2020 = popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), .funs = funs(toupper)) %>%\n  filter('ECONOMY ACTIVE' > 0)\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 = left_join(mpsz, popdata2020, by = c(\"SUBZONE_N\" = \"SZ\"))\n\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on Ex2.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on_Ex2/Hands-on Ex2.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on Exercise2 - Choropleth Mapping with R",
    "section": "2.4 Choropleth Mapping Geospatial Data Using tmap",
    "text": "2.4 Choropleth Mapping Geospatial Data Using tmap\n\nPlotting a choropleth map quickly using Quick Thematic map Plot - qtm()\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\nUsing tmap\nThe drawback of qtm() is that it is difficult to manage the appearance of individual levels. Drawing elements of tmap should be utilized to create a cartographic choropleth map as displayed below\nIn tmap, several legend options are provided to change the placement, format and appearance of the legend using the tm_layout method\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map. They are known as Cartographic Furniture\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\n\ntm_shape(mpsz_pop2020) + \n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette =\"Reds\", \n          title=\"DEPENDENCY RATIO\") + \n  tm_layout(main.title=\"Distribution of Dependency ratio by planning subzone\", \n            main.title.position=\"center\", \n            main.title.size=1.2, \n            legend.height = 0.35, \n            legend.width = 0.35, \n            frame = TRUE) + \n  tm_borders(alpha=0.5) + \n  tm_compass(type=\"8star\", size=2) +\n  tm_scale_bar() +\n  tm_grid (alpha=0.2) +\n  tmap_style(\"classic\") +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\") \n  \n             )\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\nBase Map\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\nDrawing a choropleth map using tm_polygons()\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer.\nBy default, Missing value will be shaded in grey.\n\n\n\nDrawing a choropleth map using tm_fill() and tm_border()\ntm_polygons() is a wraper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\nThe above shows the map drawn by using tm_fill() alone Various dependencies are accounted for when distributing the planning subzones.\nThe planning subzone boundaries will be added using tm_borders().\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\nThe alpha parameter is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha parameter, there are three other parameters for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”.\n\n\n\nData Classification Methods of tmap\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes. The breaks factor determines how a continuous variable is broken down into its respective categories\n\nVarying Style\ntmap provides a total ten data classification methods, namely (Nowosad, 2019):\n\nfixed, we need breaks for fixed value\nIn conjunction with the breaks argument, the “fixed” style permits manual choosing of the breaks.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\nWe could use the quantile values to define breaks in fixed style\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5, breaks = c(0, 0.60, 0.70, 0.76, 0.90, 1.00),\n          style = \"fixed\") +\n  tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break\n\n\n\n\n\nsd\nThe sd style determines a variable’s standard deviation and uses that number as the break width.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nequal\nThe equal style is suitable for variables with a uniform distribution and separates input values into bins of equal range. It is not advised for variables with a skewed distribution since the generated map can have a limited range of colors.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\npretty (default) This style rounds breaks into whole numbers where possible and spaces them evenly.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"pretty\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nquantile\nBreaks are produced by the quantile style using an equal number of features.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nkmeans\nThe breaks in the kmeans style are produced using the kmeans function.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nhclust\nBreaks are made using hierarchical clustering in the hclust style.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nbclust\nThe breaks in the bclust style are produced using bagged clustering \n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"bclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n\n\nfisher\nThe fisher style produces groups that are as homogeneous as possible.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\njenks\nThe jenks style of data analysis locates clusters of related values and emphasizes the distinctions between categories.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5, \n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\nVarying n & palette\nn defines the preferred number of classes, if we were to enter a lower number, there will be less shades (or categories) vs a higher number will produce more shades (or categories)\nUsing the jenkers example, we can see using n = 3 produces only three shades, while n = 10 produces ten shades\nWe can also change the colour schemes using the palette parameter, to reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 3, palette = \"Greens\",\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10, palette = \"-Blues\",\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\nDrawing Small Multiple Choropleth Maps\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualization of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in 3 ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nIn this example, small multiple choropleth maps are created by defining ncols (Young and Aged) in tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments (Style & palette\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\nby defining a group-by variable in tm_facets(),\nIn this example, multiple small choropleth maps are created by using tm_facets().\nThis function specifies the facets, such as the number of rows and columns, the coordinate system, and whether the scales are fixed or free (i.e. independent of each other). (R Documentation, n,d)\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Reds\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\nby creating multiple stand-alone maps with tmap_arrange().\nIn this example, multiple small choropleth maps (youngmap & agedmap) are created by creating multiple stand-alone maps with tmap_arrange().\nThis function can be used to arrange custom small multiples in a grid layout. (R Documentation, n,d)\n\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nMapping Spatial Object Meeting a Selection Criterion\nInstead of creating small multiple choropleth map, the selection function can be used to map spatial objects meeting the selection criterion.\nIn this example, we specify that we only want the Central Region in the mpsz_pop2020 dataset\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Reds\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on Ex2.html#reference",
    "href": "Hands-on_Ex2/Hands-on Ex2.html#reference",
    "title": "Hands-on Exercise2 - Choropleth Mapping with R",
    "section": "Reference",
    "text": "Reference\nJ. Nowosad (2019), Map coloring: the color scale styles available in the tmap package https://geocompr.github.io/post/2019/tmap-color-scales/\nR Documentation (n.d), tmap_arrange: Arrange small multiples in grid layout https://www.rdocumentation.org/packages/tmap/versions/3.3-3/topics/tmap_arrange\nR Documentation (n.d), tm_facets: Small multiples https://www.rdocumentation.org/packages/tmap/versions/3.3-3/topics/tm_facets"
  },
  {
    "objectID": "Take-Home_Ex1/Take-Home_Ex1.html#combining-spatial-aspatial-data",
    "href": "Take-Home_Ex1/Take-Home_Ex1.html#combining-spatial-aspatial-data",
    "title": "Take Home Exercise 1 - Investigation of Water points in Nigeria",
    "section": "Combining Spatial & Aspatial Data",
    "text": "Combining Spatial & Aspatial Data\nWe can use st_intersects() to find common data points between geographical datasets. In our case we need to find the common points in the Nigeria’s LGA spatial dataset and the water point aspatial dataset\nThe below code does 4 things\n\nIt intersects the Nigeria LGA dataset (nga dataframe) with the water point dataset (wpdx_clean_sf dataframe) and produce a new column to denote the total number of water points in the area (Total wpt) by using mutate() and lengths()\nSimilar to step 1, the result of step 1 is piped to add 3 columns to denote the number of functional, non functional and unknown water points in the area to produce wpt functional, wpt non functional and wpt unknown respectively\nWe also add 2 new columns to find the percentage of functional and non functional water points by using mutate()\nSelect appropriate columns required which are the LGA area and LGA code (Column 3 & 4), Administration Level 1 Area and Administration Level 1 Code (Column 8 & 9) which represent states, the columns that were added as explained in steps 2 & 3 and the geometry multipolygon objects (Column 18 to 23) using select()\n\n\nnga_wp <- nga %>% \n  #combine nga with water point sf\n  mutate(`total wpt` = lengths(\n    st_intersects(nga, wpdx_clean_sf))) %>%\n  #add columns to produce no. of functional, non functional and unknown points\n  mutate(`wpt functional` = lengths(\n    st_intersects(nga, wpt_functional))) %>%\n  mutate(`wpt non functional` = lengths(\n    st_intersects(nga, wpt_non_functional))) %>%\n  mutate(`wpt unknown` = lengths(\n    st_intersects(nga, wpt_unknown))) %>%\n  \n  #add columns to compute %\n  mutate(pct_functional = `wpt functional`/`total wpt`) %>%\n  mutate(`pct_non-functional` = `wpt non functional`/`total wpt`) %>%\n  select(3:4, 8:9, 18:23)\n\nWe did not adjust the projection from WSG84 in the earlier part because we needed to perform st_transform(). Since the spatial feature data frame has been fully constructed, we can now use st_transform() to update the appropriate projection system. The Nigeria Mid Belt Coordinate System (26392) will be applied, and st crs() is used to confirm the transformation was completed.\n\nwpdx_clean_sf = st_transform(wpdx_clean_sf, crs=26392)\nst_crs(wpdx_clean_sf)\n\nCoordinate Reference System:\n  User input: EPSG:26392 \n  wkt:\nPROJCRS[\"Minna / Nigeria Mid Belt\",\n    BASEGEOGCRS[\"Minna\",\n        DATUM[\"Minna\",\n            ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4263]],\n    CONVERSION[\"Nigeria Mid Belt\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",8.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.99975,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",670553.98,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Nigeria between 6°30'E and 10°30'E, onshore and offshore shelf.\"],\n        BBOX[3.57,6.5,13.53,10.51]],\n    ID[\"EPSG\",26392]]"
  },
  {
    "objectID": "Take-Home_Ex1/Take-Home_Ex1.html#spatially-constrained-cluster-analysis",
    "href": "Take-Home_Ex1/Take-Home_Ex1.html#spatially-constrained-cluster-analysis",
    "title": "Take Home Exercise 1 - Investigation of Water points in Nigeria",
    "section": "Spatially Constrained Cluster Analysis",
    "text": "Spatially Constrained Cluster Analysis\n\nThe Null Hypothesis of Local Moran’s I Statistics\nThe null hypothesis of Local Moran’s I statistics is that there is no correlation between the value at one site and the values at other locations close by. (Long, n.d.)"
  }
]