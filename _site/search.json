[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on Ex1.html",
    "href": "Hands-on_Ex1/Hands-on Ex1.html",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling",
    "section": "",
    "text": "In this hands on exercise, I learnt how to import & wrangle geospatial data using appropriate R packages"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on Ex1.html#getting-started",
    "href": "Hands-on_Ex1/Hands-on Ex1.html#getting-started",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling",
    "section": "Getting Started",
    "text": "Getting Started\nThe code chunk below install & load sf & tidyverse packages into the R env\n\npacman::p_load(sf,tidyverse)\n\n\nWhat is a Projected Coordinate System\nAccording to SLA SiReNT (2020), Geographical information systems’ data sets uses projected coordinate systems, such that common features can be incorporated into geographical data sets. A common coordinate system is the global WGS84 datum to map the spherical surface of the earth onto a 2 or 3 dimensional Cartesian coordinate plane for analysis.\nThe SVY21 coordinate system may be used in Singapore’s context as the datum are localized to describe the region more precisely in order to provide accurate analysis."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on Ex1.html#importing-geospatial-data",
    "href": "Hands-on_Ex1/Hands-on Ex1.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling",
    "section": "1.4 Importing Geospatial Data",
    "text": "1.4 Importing Geospatial Data\nWe use st_read() to read the dataset, specifying the folder in the dsn parameter and the dataset name in the layer parameter\n\nMaster Planning Subzone dataset\n\nmpsz = st_read(dsn=\"data/geospatial\", layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\Allanckw\\ISSS624\\Hands-on_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe output of the code shows that there are a total of 323 features & 15 fields of geometry type Multipolygon in the x and y dimensions.\nThe driver used is ESRI shapefile, which is a geospatial vector data format for Geographical information systems\n\n\nCycling path dataset\n\ncyclingpath = st_read(dsn=\"data/geospatial\", layer=\"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `D:\\Allanckw\\ISSS624\\Hands-on_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 2248 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nThe output of the code shows that there are a total of 1625 features & 2 fields of geometry type LINESTRING in the x and y dimensions.\n\n\nPreschool dataset\nThe preschool dataset is in kml format. The difference between importing kml file and the other 2 dataset is that there is no layer information. Simply call st_read() with the filename\nKML stands for Keyhole markup language., an XML notation to express geographical annotation and visualization. (ARCGIS, 2016)\n\npreschool = st_read(\"data/geospatial/pre-schools-location-kml.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `D:\\Allanckw\\ISSS624\\Hands-on_Ex1\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1359 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nThe output of the code shows that there are a total of 1359 features & 2 fields of geometry type POINT in 3 dimensions (X, Y and Z). In this case preschool is in the WGS84 projected coordinate systems"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on Ex1.html#checking-the-content-of-a-simple-feature-data-frame",
    "href": "Hands-on_Ex1/Hands-on Ex1.html#checking-the-content-of-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling",
    "section": "1.5 Checking the content of a simple Feature Data Frame",
    "text": "1.5 Checking the content of a simple Feature Data Frame\n\nst_geometry()\nst_geometry returns geometries in a list, of class 'sfc'\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\nThe output in the case returns the bounding box, projected coordinated systems and the first 5 geometries\n\n\nglimpse()\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nglimpse() displays each field’s data type, for example double precision number for X_ADDR, Y_ADDR, SHAPE_Leng, SHAPE_AREA and their corresponding available values in the dataset.\n\n\nhead()\nhead() reveals the complete information of a feature object\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on Ex1.html#plotting-the-geospatial-data-with-plot",
    "href": "Hands-on_Ex1/Hands-on Ex1.html#plotting-the-geospatial-data-with-plot",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling",
    "section": "1.6 Plotting the Geospatial Data with Plot()",
    "text": "1.6 Plotting the Geospatial Data with Plot()\nWe can use plot() of R to plot the geographical objects.\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\nWe could call st_geometry() from within plot() to only display the geometry of the sf object\n\nplot(st_geometry(mpsz))\n\n\n\n\nIn addition, we can choose the plot the sf object by using a specific attribute like how we reference a dictionary in major programming languages with objname[\"<attributename>\"]\n\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on Ex1.html#working-with-projection",
    "href": "Hands-on_Ex1/Hands-on Ex1.html#working-with-projection",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling",
    "section": "1.7 Working with projection",
    "text": "1.7 Working with projection\n\nAssigning EPSG Code to a simple feature data frame\nThe EPSG, or European Petroleum Survey Group, is a company that manages a database of geodetic parameters with standardized codes for coordinate systems, datums, spheroids, units.\nSometimes, importing geospatial data into R may not give an accurate analysis as the projected coordinate system is either missing or incorrect during the import system. We could use st_crs()to retrieve the coordinate system from the object.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nThe result shows that the EPSG Code is 9001, which is incorrect. The correct code for the SVY21 projected coordinate system is 3414. We could use st_set_crs() to correct the EPSG Code.\n\nmpsz3414 = st_set_crs(mpsz,3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\n\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\nReprojection\nWe can see that the variable mpsz3414 has the EPSG code corrected after running st_set_crs()\nWe could however see that it returns a warning that it does not reproject data, and is asked to use st_transform()\nReprojection is the process to update the coordinates values of a dataset from one coordinate system to another coordinate system, in this case from EPSG 9001 to EPSG 3414 for the mpsz dataset.\nBelow is the code to transform the preschool dataset to the SVY21 (EPSG 3414) projected coordinate system\n\npreschool3414 = st_transform(preschool, crs=3414)\nst_crs(preschool3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on Ex1.html#importing-converting-aspatial-data",
    "href": "Hands-on_Ex1/Hands-on Ex1.html#importing-converting-aspatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling",
    "section": "1.8 Importing & Converting Aspatial Data",
    "text": "1.8 Importing & Converting Aspatial Data\nASpatial data is a dataset that contains x and y coordinates of locations’ data points. In this example, the Inside AirBnB dataset is used.\n\nImporting Aspatial data\nAs listings is in csv format, we could use read_csv() of readr package to import the dataset\n\nairbnb_listing = read_csv(\"data/aspatial/listings.csv\")\n\nRows: 4252 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (5): name, host_name, neighbourhood_group, neighbourhood, room_type\ndbl  (10): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nWe can use list() to display the dataset, it shows that there are 4252 rows and 16 columns, and we are interested in the longitude and latitude values\n\nlist(airbnb_listing)\n\n[[1]]\n# A tibble: 4,252 × 16\n       id name     host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n    <dbl> <chr>      <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  50646 Pleasan…  227796 Sujatha Centra… Bukit …    1.33    104. Privat…    80\n 2  71609 Ensuite…  367042 Belinda East R… Tampin…    1.35    104. Privat…   178\n 3  71896 B&B  Ro…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 4  71903 Room 2-…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 5 275343 Conveni… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    52\n 6 275344 15 mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    40\n 7 294281 5 mins … 1521514 Elizab… Centra… Newton     1.31    104. Privat…    72\n 8 301247 Nice ro… 1552002 Rahul   Centra… Geylang    1.32    104. Privat…    41\n 9 324945 20 Mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n10 330089 Accomo@… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n# … with 4,242 more rows, 6 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>, and\n#   abbreviated variable names ¹​host_name, ²​neighbourhood_group,\n#   ³​neighbourhood, ⁴​latitude, ⁵​longitude, ⁶​room_type\n\n\n\n\nCreating a feature dataframe from an Aspatial data frame with st_as_sf()\nWe can use st_as_sfto create a dataframe from the longitude (x) and latitude (y) values. The EPSG 4326 code is used as the dataset is referencing WGS84 geographic coordinate system\n\nairbnb_listings_sf = st_as_sf(airbnb_listing, coords = c(\"longitude\", \"latitude\"), crs=4326)\n\nWe can then use glimpse() to displays each field’s data type & available values.\nThe results shows that the longitude and latitude values have been converted to a geometry object consisting of the longitude and latitude values as points, with both columns now dropped.\n\nglimpse(airbnb_listings_sf)\n\nRows: 4,252\nColumns: 15\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275343, 275…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <dbl> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 80, 178, 81, 81, 52, 40, 72, 41, 49, 49…\n$ minimum_nights                 <dbl> 90, 90, 90, 90, 14, 14, 90, 8, 14, 14, …\n$ number_of_reviews              <dbl> 18, 20, 24, 48, 20, 13, 133, 105, 14, 1…\n$ last_review                    <date> 2014-07-08, 2019-12-28, 2014-12-10, 20…\n$ reviews_per_month              <dbl> 0.22, 0.28, 0.33, 0.67, 0.20, 0.16, 1.2…\n$ calculated_host_listings_count <dbl> 1, 4, 4, 4, 50, 50, 7, 1, 50, 50, 50, 4…\n$ availability_365               <dbl> 365, 365, 365, 365, 353, 364, 365, 90, …\n$ geometry                       <POINT [°]> POINT (103.7852 1.33432), POINT (…"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on Ex1.html#geoprocessing-with-sf-package",
    "href": "Hands-on_Ex1/Hands-on Ex1.html#geoprocessing-with-sf-package",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling",
    "section": "1.9 Geoprocessing with sf package",
    "text": "1.9 Geoprocessing with sf package\n\nst_buffer()\nUsing st_buffer() to compute the 5m buffers around cycling path\n\nbuffer_cycling = st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\nnQuadSegs is the number of segments per quadrant for all or per feature, the higher the number, the smoother are the curves of the buffer. Setting nQuadSeg to 1 yields straight lines with jagged edges (Pebesma, n.d)\n\n\nst_area()\nThe area of the buffer is computed by using st_area()\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\nFinally, we use sum() to compute the total land area\n\nsum(buffer_cycling$AREA)\n\n1556978 [m^2]\n\n\n\n\nst_intersects()\nWe can use st_intersects() to find common data points between 2 geographical datasets. The length() function is used to find the number of points in the intersection.\nIn this case we want to identify pre-schools located inside each Planning Subzones\n\nmpsz3414$'PreSch Count'<- lengths(st_intersects(mpsz3414, preschool3414))\n\nUsing the summary function, we can find the summary statistics of the numbers of preschools of the various planning zones\n\nsummary(mpsz3414$'PreSch Count')\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   2.000   4.207   6.000  37.000 \n\n\nThe top_n function can be used to find the planning zones with the most pre-schools\n\ntop_n(mpsz3414, 1, 'PreSch Count')\n\nSimple feature collection with 323 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...            0\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...            5\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...            0\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...            2\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...            1\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...           10\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...            4\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...            4\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...            3\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...            1\n\n\n\n\nComputing Density\nDensity can be computed by first computing the area of each planning subzone.\n\nmpsz3414$Area <- mpsz3414 %>% st_area()\n\nthe mutate() function of dplyr package is then called to compute the density\n\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on Ex1.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex1/Hands-on Ex1.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling",
    "section": "1.10 Exploratory Data Analysis (EDA)",
    "text": "1.10 Exploratory Data Analysis (EDA)\n\nUsing ggplot2() to plot graphs\n\nHistogram\nThe Hist() function of R Graphics can be used to output the histogram to display the distribution of PreSch Density.\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\nHowever, it is not meaningful with the default labels. ggplot2 can be used to enhanced the quality of data visualization.\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"White\", \n                 fill=\"Blue\") +\n  labs(title = \"Are pre-school evenly distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\n\nScatterplot\nWe can use ggplot and geom_point() to plot scatter diagram\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`), y=as.numeric(`PreSch Count`))) +\n       geom_point(shape=18, color=\"blue\") + \n       xlim(0,40) + ylim(0,40) +\n       labs(title=\"Relationship between Pre-school density & Pre-school count\", x=\"Pre-School Density (per km sq)\", y=\"Pre-school count\")"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on Ex1.html#reference",
    "href": "Hands-on_Ex1/Hands-on Ex1.html#reference",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling",
    "section": "Reference:",
    "text": "Reference:\nARCGIS (2016), What is KML\nhttps://desktop.arcgis.com/en/arcmap/10.3/manage-data/kml/what-is-kml-.htm\nSingapore Land Authority (SLA), Singapore Satellite Positioning Reference Network (SiReNT), 2020, Plane Coordinate System - SVY21\nhttps://app.sla.gov.sg/sirent/About/PlaneCoordinateSystem\nE. Pebesma (n.d) Geometric unary operations on simple feature geometry sets\nhttps://r-spatial.github.io/sf/reference/geos_unary.html\nVirtual Surveyor (2022), What is an EPSG Code\nhttps://support.virtual-surveyor.com/en/support/solutions/articles/1000261353-what-is-an-epsg-code-#:~:text=EPSG%20stands%20for%20European%20Petroleum,spheroids%2C%20units%20and%20such%20alike."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on Ex2.html",
    "href": "Hands-on_Ex2/Hands-on Ex2.html",
    "title": "Hands-on Exercise2 - Choropleth Mapping with R",
    "section": "",
    "text": "In this hands on exercise, I learnt how to use the tmap package in R\nFirstly, we load the required packages in R\n\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on Ex2.html#importing-preparing-the-data",
    "href": "Hands-on_Ex2/Hands-on Ex2.html#importing-preparing-the-data",
    "title": "Hands-on Exercise2 - Choropleth Mapping with R",
    "section": "2.3 Importing & preparing the data",
    "text": "2.3 Importing & preparing the data\n\nLoading the Master Plan 2014 Subzone Boundary\n\nmpsz = st_read(dsn=\"data/geospatial\", layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\Allanckw\\ISSS624\\Hands-on_Ex2\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\nLoading the Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling dataset\n\npopData = read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nCreate a data table to break the population data into the following categories:\n\n\nYOUNG: age group 0 to 4 until age group 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\npopdata2020 = popData %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\n  rowSums(.[13:15]))%>%\n    mutate(`AGED`=rowSums(.[16:21])) %>%\n    mutate(`TOTAL`=rowSums(.[3:21])) %>%  \n    mutate(`DEPENDENCY` = (`YOUNG` + `AGED`) /`ECONOMY ACTIVE`) %>%\n  \n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n\nJoining attribute data & geospatial data\nBefore joining, we need to convert the PA and SZ fields to upper case. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\nWe only want Economy Active citizen in our analysis.\n\npopdata2020 = popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), .funs = funs(toupper)) %>%\n  filter('ECONOMY ACTIVE' > 0)\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 = left_join(mpsz, popdata2020, by = c(\"SUBZONE_N\" = \"SZ\"))\n\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on Ex2.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on_Ex2/Hands-on Ex2.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on Exercise2 - Choropleth Mapping with R",
    "section": "2.4 Choropleth Mapping Geospatial Data Using tmap",
    "text": "2.4 Choropleth Mapping Geospatial Data Using tmap\n\nPlotting a choropleth map quickly using Quick Thematic map Plot - qtm()\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\nUsing tmap\nThe drawback of qtm() is that it is difficult to manage the appearance of individual levels. Drawing elements of tmap should be utilized to create a cartographic choropleth map as displayed below\nIn tmap, several legend options are provided to change the placement, format and appearance of the legend using the tm_layout method\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map. They are known as Cartographic Furniture\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\n\ntm_shape(mpsz_pop2020) + \n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette =\"Reds\", \n          title=\"DEPENDENCY RATIO\") + \n  tm_layout(main.title=\"Distribution of Dependency ratio by planning subzone\", \n            main.title.position=\"center\", \n            main.title.size=1.2, \n            legend.height = 0.35, \n            legend.width = 0.35, \n            frame = TRUE) + \n  tm_borders(alpha=0.5) + \n  tm_compass(type=\"8star\", size=2) +\n  tm_scale_bar() +\n  tm_grid (alpha=0.2) +\n  tmap_style(\"classic\") +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\") \n  \n             )\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\nBase Map\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\nDrawing a choropleth map using tm_polygons()\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer.\nBy default, Missing value will be shaded in grey.\n\n\n\nDrawing a choropleth map using tm_fill() and tm_border()\ntm_polygons() is a wraper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\nThe above shows the map drawn by using tm_fill() alone Various dependencies are accounted for when distributing the planning subzones.\nThe planning subzone boundaries will be added using tm_borders().\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\nThe alpha parameter is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha parameter, there are three other parameters for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”.\n\n\n\nData Classification Methods of tmap\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes. The breaks factor determines how a continuous variable is broken down into its respective categories\n\nVarying Style\ntmap provides a total ten data classification methods, namely (Nowosad, 2019):\n\nfixed, we need breaks for fixed value\nIn conjunction with the breaks argument, the “fixed” style permits manual choosing of the breaks.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\nWe could use the quantile values to define breaks in fixed style\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5, breaks = c(0, 0.60, 0.70, 0.76, 0.90, 1.00),\n          style = \"fixed\") +\n  tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break\n\n\n\n\n\nsd\nThe sd style determines a variable’s standard deviation and uses that number as the break width.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nequal\nThe equal style is suitable for variables with a uniform distribution and separates input values into bins of equal range. It is not advised for variables with a skewed distribution since the generated map can have a limited range of colors.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\npretty (default) This style rounds breaks into whole numbers where possible and spaces them evenly.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"pretty\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nquantile\nBreaks are produced by the quantile style using an equal number of features.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nkmeans\nThe breaks in the kmeans style are produced using the kmeans function.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nhclust\nBreaks are made using hierarchical clustering in the hclust style.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nbclust\nThe breaks in the bclust style are produced using bagged clustering \n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"bclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n\n\nfisher\nThe fisher style produces groups that are as homogeneous as possible.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\njenks\nThe jenks style of data analysis locates clusters of related values and emphasizes the distinctions between categories.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5, \n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\nVarying n & palette\nn defines the preferred number of classes, if we were to enter a lower number, there will be less shades (or categories) vs a higher number will produce more shades (or categories)\nUsing the jenkers example, we can see using n = 3 produces only three shades, while n = 10 produces ten shades\nWe can also change the colour schemes using the palette parameter, to reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 3, palette = \"Greens\",\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10, palette = \"-Blues\",\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\nDrawing Small Multiple Choropleth Maps\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualization of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in 3 ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nIn this example, small multiple choropleth maps are created by defining ncols (Young and Aged) in tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments (Style & palette\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\nby defining a group-by variable in tm_facets(),\nIn this example, multiple small choropleth maps are created by using tm_facets().\nThis function specifies the facets, such as the number of rows and columns, the coordinate system, and whether the scales are fixed or free (i.e. independent of each other). (R Documentation, n,d)\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Reds\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\nby creating multiple stand-alone maps with tmap_arrange().\nIn this example, multiple small choropleth maps (youngmap & agedmap) are created by creating multiple stand-alone maps with tmap_arrange().\nThis function can be used to arrange custom small multiples in a grid layout. (R Documentation, n,d)\n\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nMapping Spatial Object Meeting a Selection Criterion\nInstead of creating small multiple choropleth map, the selection function can be used to map spatial objects meeting the selection criterion.\nIn this example, we specify that we only want the Central Region in the mpsz_pop2020 dataset\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Reds\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on Ex2.html#reference",
    "href": "Hands-on_Ex2/Hands-on Ex2.html#reference",
    "title": "Hands-on Exercise2 - Choropleth Mapping with R",
    "section": "Reference",
    "text": "Reference\nJ. Nowosad (2019), Map coloring: the color scale styles available in the tmap package https://geocompr.github.io/post/2019/tmap-color-scales/\nR Documentation (n.d), tmap_arrange: Arrange small multiples in grid layout https://www.rdocumentation.org/packages/tmap/versions/3.3-3/topics/tmap_arrange\nR Documentation (n.d), tm_facets: Small multiples https://www.rdocumentation.org/packages/tmap/versions/3.3-3/topics/tm_facets"
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on Ex3.html",
    "href": "Hands-on_Ex3/Hands-on Ex3.html",
    "title": "Hands On Exercise 2.1 - Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "Hands On Exercise 3 - Global and Local Measures of Spatial Autocorrelation\nIn this hands-on exercise, we explore how to compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using spdep package."
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on Ex3.html#getting-started",
    "href": "Hands-on_Ex3/Hands-on Ex3.html#getting-started",
    "title": "Hands On Exercise 2.1 - Global and Local Measures of Spatial Autocorrelation",
    "section": "Getting Started",
    "text": "Getting Started\nThe code chunk below install & load sf, spdep, tmap & tidyverse packages into the R env\n\npacman::p_load(sf,tidyverse,spdep, tmap)\n\n\nImporting Hunan Geospatial sf\n\nhunan_sf = st_read(dsn=\"data/geospatial\", layer=\"Hunan\")\n\nReading layer `Hunan' from data source \n  `D:\\Allanckw\\ISSS624\\Hands-on_Ex3\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nLoading Hunan 2012 Aspatial File in CSV\n\nhunan_GDP = read_csv(\"data/aspatial/hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on Ex3.html#joining-attribute-data-to-the-simple-feature-files",
    "href": "Hands-on_Ex3/Hands-on Ex3.html#joining-attribute-data-to-the-simple-feature-files",
    "title": "Hands On Exercise 2.1 - Global and Local Measures of Spatial Autocorrelation",
    "section": "Joining attribute data to the simple feature files",
    "text": "Joining attribute data to the simple feature files\nNext, left_join() of dplyr is used to join the geographical data and attribute table\n\nhunan = left_join(hunan_sf, hunan_GDP)\n\nJoining, by = \"County\""
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on Ex3.html#visualizing-regional-development-indicator",
    "href": "Hands-on_Ex3/Hands-on Ex3.html#visualizing-regional-development-indicator",
    "title": "Hands On Exercise 2.1 - Global and Local Measures of Spatial Autocorrelation",
    "section": "Visualizing Regional Development Indicator",
    "text": "Visualizing Regional Development Indicator\nWe will visualize a choropleth map that displays the distribution of GDPPC 2012 using the tmap package\n\nequal = tm_shape(hunan) + \n  tm_fill(\"GDPPC\", n = 5, style=\"equal\") +\n  tm_borders(alpha=0.5) + \n  tm_layout(main.title = \"Equal interval categorization\")\n\nquantile = tm_shape(hunan) + \n  tm_fill(\"GDPPC\", n = 5, style=\"quantile\") +\n  tm_borders(alpha=0.5) + \n  tm_layout(main.title = \"Equal quantile interval categorization\")\n\ntmap_arrange(equal, quantile)"
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on Ex3.html#computing-spatial-autocorrelation",
    "href": "Hands-on_Ex3/Hands-on Ex3.html#computing-spatial-autocorrelation",
    "title": "Hands On Exercise 2.1 - Global and Local Measures of Spatial Autocorrelation",
    "section": "Computing Spatial Autocorrelation",
    "text": "Computing Spatial Autocorrelation\nWe learn how to compute GLOBAL spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial correlation\n\nComputing Spatial Weights\nWe need to find the spatial weights first before we can compute global spatial correlation statistics. The spatial weights is used to define the neighbourhood relationships between the geographical units\nWe use poly2nb() of spdep package to compute the contiguity weight matrix. The function builds a neighbour list based on regions with contiguous boundaries. Using queen’s contiguity weight matrix, we have\n\nwm_q = poly2nb(hunan)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nFrom the results, there are 88 regions in Hunan,\nUsing the Queen’s method, 85 of them has 11 neighbours, while only 2 of them has 1 neighbour\n\n\nBuilding the Row-standardised weights matrix\nAfter computing the spatial weights, we will need to build the row standardized weights matrix. “W” Style will be used such that each neighbouring polygon will be assigned equal weight. This is done by taking the 1/(no. of neighbours) to each neighbouring county and then summing up the weighted income values.\nAlthough this is the most logical way to summarize the neighbours’ values, there is a disadvantage in that polygons at the study area’s boundaries will base their lagged values on fewer polygons, which could lead to an over- or underestimation of the true degree of spatial autocorrelation in the data.\n\nrs_wm_q = nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrs_wm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe Null Hypothesis\nThe null hypothesis is to assume that GDPPC is randomly distributed between the different counties.\n\nComputing Spatial Autocorrelation: Moran’s I\nWe will perform Moran’s I statistical test with moran.test() of the spdep package.\n\nmoran.test(hunan$GDPPC, listw = rs_wm_q, zero.policy = TRUE, na.action = na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rs_wm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nBased on the result, we will reject the null hypothesis as the p-value is less than 0.05. In fact as the p-value is less than 0.01, we can consider that as highly significant.\nTherefore, we can conclude that the GDPPC is not randomly distributed based on Moran’s I statistics\n\n\nComputing Spatial Autocorrelation: Moran’s I with Monte Carlo simulation\nIn order to further confirm that the null hypothesis is false, we could use Monte Carlo simulation to predict potential outcomes of the event by using moran.mc() function of the spdep package. We will use 1000 simulations for this test.\n\nset.seed(908)\n\nbperm = moran.mc(hunan$GDPPC, listw = rs_wm_q, nsim=999, zero.policy = TRUE, na.action = na.omit)\n\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rs_wm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nBased on the result, we will reject the null hypothesis as the p-value is less than 0.05. In fact as the p-value is less than 0.01, we can consider that as highly significant even when the statistics is repeated 1000 times.\nTherefore, we can conclude that the GDPPC is not randomly distributed based on Moran’s I statistics with Monte Carlo simulation\n\n\nVisualizing Monte Carlo Moran’s I\nIt is always a good practice to examine the simulated Moran’s I test statistics in detail. This can be done by plotting the statistical values as a histogram by the code below:\n\nmean(bperm$res[1:999]) #compute mean\n\n[1] -0.01381501\n\nvar(bperm$res[1:999]) #compute variance\n\n[1] 0.004192274\n\nsd(bperm$res[1:999]) #compute std dev.\n\n[1] 0.06474778\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.16447 -0.06010 -0.01643 -0.01382  0.02926  0.23767 \n\n\nBuilding the histogram\n\nhist(bperm$res, freq=TRUE, breaks = 20, xlab=\"Simulated Moran's I\")\nabline(v=0, col=\"blue\")\n\n\n\n\nUsing ggplot, we can reproduce the same graph, however we need to convert the result into a data frame first\n\ndf = data.frame(bperm$res) #convert to data frame\n\nggplot(df, aes(bperm$res)) + #aes = column name\n  geom_histogram(bins=20, \n                 color=\"White\", \n                 fill=\"lightblue\") +\n  labs(x = \"Simulated Moran's I\",\n       y = \"Frequency\") +\n  geom_vline(aes(xintercept=0),   \n               color=\"red\", linetype=\"dashed\", size=1)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\nAnalysis:\nThe reason why abline is set to 0 is because it must fall between [-1, 1].\nNegative correlation is -1, No correlation is 0, Positive correlation is 1\nThere is a positive correlation based on the result of the histogram for Moran’s I Statistics\n\n\n\nVisualising Geary’s C test\n\nComputing Spatial Autocorrelation: Geary’s C\nWe will perform Geary’s C statistical test with geary.test() of the spdep package.\n\ngeary.test(hunan$GDPPC, list=rs_wm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rs_wm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\nBased on the result, we will reject the null hypothesis as the p-value is less than 0.05. In fact as the p-value is less than 0.01, we can consider that as highly significant.\nTherefore, we can conclude that the GDPPC is not randomly distributed based on Geary’s C statistics\n\n\nComputing Spatial Autocorrelation: Geary’s C with Monte Carlo simulation\nIn order to further confirm that the null hypothesis is false, we could use Monte Carlo simulation to predict potential outcomes of the event by using geary.mc() function of the spdep package. We will use 1000 simulations for this test\n\nset.seed(908)\n\nbpermG = geary.mc(hunan$GDPPC, listw = rs_wm_q, nsim=999)\n\nbpermG\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rs_wm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nBased on the result, we will reject the null hypothesis as the p-value is less than 0.05. In fact as the p-value is less than 0.01, we can consider that as highly significant even when the statistics is repeated 1000 times.\nTherefore, we can conclude that the GDPPC is not randomly distributed based on Geary’s C statistics with Monte Carlo simulation\n\n\nVisualising Monte Carlo Geary’s C\n\nmean(bpermG$res[1:999]) #compute mean\n\n[1] 1.002273\n\nvar(bpermG$res[1:999]) #compute variance\n\n[1] 0.007094831\n\nsd(bpermG$res[1:999]) #compute std dev.\n\n[1] 0.08423082\n\nsummary(bpermG$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7135  0.9477  1.0010  1.0023  1.0577  1.2441 \n\n\nBuilding the histogram\n\nhist(bpermG$res, freq=TRUE, breaks=20, xlab = \"Simulated Geary c\")\nabline (v=1, col=\"blue\")\n\n\n\n\nUsing ggplot, we can reproduce the same graph, however we need to convert the result into a data frame first\n\ndf_G = data.frame(bpermG$res) #convert to data frame\n\nggplot(df_G, aes(bpermG$res)) + #aes = column name\n  geom_histogram(bins=20, \n                 color=\"White\", \n                 fill=\"lightblue\") +\n  labs(x = \"Simulated Geary's C\",\n       y = \"Frequency\") +\n  geom_vline(aes(xintercept=1),   \n               color=\"red\", linetype=\"dashed\", size=1)\n\n\n\n\nAnalysis:\nThe reason why abline is set to 1 is because it must fall between [0, 2].\nNegative correlation is 2, No correlation is 1, Positive correlation is 0, notice that it is essentially the opposite from Moran’s I\nIn Moran I the smaller the number, indicates negative correlation (small -> -ve), in contrast in Geary’s C the smaller the number indicates positive correlation (small -> +ve)\nThere is a positive correlation based on the result of the histogram for Geary’s C statistics"
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on Ex3.html#spatial-correlogram",
    "href": "Hands-on_Ex3/Hands-on Ex3.html#spatial-correlogram",
    "title": "Hands On Exercise 2.1 - Global and Local Measures of Spatial Autocorrelation",
    "section": "Spatial Correlogram",
    "text": "Spatial Correlogram\nExamining spatial autocorrelation patterns in the data or model residuals is made simple with spatial correlograms.\nThey are graphs of some measure of autocorrelation (Moran’s I or Geary’s C) against distance and they demonstrate how correlated pairs of spatial observations are as one increase the distance (lag) between them.\n\nComputing Moran’s I correlogram\nWe use sp.correlogram() of spdep package to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I\nThey are graphs of some measure of autocorrelation (Moran’s I or Geary’s c) against distance and they demonstrate how correlated pairs of spatial observations are as one increase the distance (lag) between them.\nAlthough correlograms are not as fundamental as variograms, which is a fundamental idea in geostatistics, they are nevertheless a very valuable tool for exploratory and descriptive work. They offer deeper insights than variograms do for this purpose.\n\n\nComputing Moran’s I correlogram\nWe use sp.correlogram() of spdep package to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I\nPlot() is used to draw the output\n\nMI_Corr = sp.correlogram(wm_q, hunan$GDPPC, order = 6, method = \"I\", style = \"W\")\n\nplot(MI_Corr)\n\n\n\n\nPlotting the output might not allow us to provide complete interpretation, this is because not all autocorrelation values are statistically significant. Hence we should analyze the report by printing out the result\n\nprint(MI_Corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nThe p value is < 0.05 and hence is statically significant except for the 4th neighbour with p value at 0.226.\nWe can tell that GDPPC is positively correlated for counties up to a distance of 3 neighbours, and negatively correlated from the 5th neighbour onwards.\nAs the 4th degree neighbour is not statistically significant, we will not reject the null hypothesis of it being random.\n\n\nComputing Geary’s C correlogram\nWe use sp.correlogram() of spdep package to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C\n\nGC_Corr = sp.correlogram(wm_q, hunan$GDPPC, order = 6, method = \"C\", style = \"W\")\n\nplot(GC_Corr)\n\n\n\n\nPlotting the output might not allow us to provide complete interpretation, this is because not all autocorrelation values are statistically significant. Hence we should analyze the report by printing out the result\n\nprint(GC_Corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nIn this case, it is only statistically significant for the 1st, 2nd and 5th degree neighbour for GDPPC to be correlated by distance. The rest of the neighbours are not and appears to be random for the Geary’s C method."
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on Ex3.html#cluster-and-outlier-analysis",
    "href": "Hands-on_Ex3/Hands-on Ex3.html#cluster-and-outlier-analysis",
    "title": "Hands On Exercise 2.1 - Global and Local Measures of Spatial Autocorrelation",
    "section": "Cluster and Outlier Analysis",
    "text": "Cluster and Outlier Analysis\nStatistics called Local Indicators of Spatial Association, or LISA, assess whether clusters exist in the spatial arrangement of a given variable.\nLocal clusters in the rates, for example, indicate that some census tracts in a given city have greater or lower rates than would be predicted by chance alone; that is, the values observed are higher or lower than those of a random distribution in space.\nWe will use relevant Local Indicators for Spatial Association (LISA), particularly local Moran, in this section to identify clusters and/or outliers in the GDP per capita 2012 figures for Hunan Province.\n\nComputing local Moran’s I\nThe localmoran() function of spdep will be used to calculate local Moran’s I. Given a collection of l_i values, z_i values and a listw object with neighbour weighting details for the polygon associated with the z_i values.\n\nfips = order(hunan$County)\nlocalMI = localmoran(hunan$GDPPC, rs_wm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation (mean) of local Moran statistic under the randomization hypothesis\nVar.Ii: the variance of local Moran statistic under the randomization hypothesis\nZ.Ii: the standard deviation of local Moran statistic\nPr: the p-value of local Moran statistic where it investigate\n\nWe can print the local Moran’s matrix by printCoefmat\n\nprintCoefmat(data.frame(localMI[fips,], \n                        row.names=hunan$County[fips]), \n                        check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\nMapping the local Moran’s I\nBefore mapping the local Moran’s I map, we need to append the local Moran’s I data frame (localMI) onto the Hunan’s spatial polygon data frame by using cbind()\n\nhunan.localMI = cbind(hunan, localMI) %>% #pipe\n                rename(Pr.Ii = Pr.z....E.Ii..)\n\nAfter creating the the new data frame hunan.localMI, we can use the tmap package to plot the local Moran’s I values\n\ntm_shape(hunan.localMI) + \n  tm_fill(col=\"Ii\", #note that actual value is Ii\n          style=\"pretty\", palette = \"PuRd\", title = \"Local Moran's I Statistics\") + \n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMapping local Moran’s I p-values\nThe choropleth map shows that there is evidence for both positive & negative li values. However, we need to consider the p-values for each of these values to determine if they are statistically significant\nBy using breaks and fixed style, we can determine which are the areas that are statistically significant\n\ntm_shape(hunan.localMI) + \n  tm_fill(col=\"Pr.Ii\", #note that p value is Pr.Ii\n          breaks=c(-Inf, 0.001, 0.01, 0.05, Inf),\n          style=\"fixed\",\n          palette = \"-Greens\", title = \"Local Moran's I p values\") +   tm_borders(alpha = 0.5)\n\n\n\n\nIt is recommended to plot the local Moran’s I values map and its associated p-values map side by side for effective interpretation, we can use tmap_arrange() to accomplish that.\n\nlocalMI.map = tm_shape(hunan.localMI) + \n  tm_fill(col=\"Ii\", #note that actual value is li\n          style=\"pretty\", palette = \"PuRd\", title = \"Local Moran's I Statistics\") + \n  tm_borders(alpha = 0.5)\n\n\npvalue.map = tm_shape(hunan.localMI) + \n  tm_fill(col=\"Pr.Ii\", #note that p value is Pr.li\n          breaks=c(-Inf, 0.001, 0.01, 0.05, Inf),\n          style=\"fixed\",\n          palette = \"-Greens\", title = \"Local Moran's I p values\") +   tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\n\n\n\n\n\nThe Null Hypothesis of Local Moran’s I Statistics\nThe null hypothesis of Local Moran’s I statistics is that there is no correlation between the value at one site and the values at other locations close by. (Long, n.d.)\n\n\nAnalysis of Results of Local Moran’s I Statistics - Dissimilar Features (< 0)\nThe figure below shows the various clusters boxed up that are considered outliers as their I value is less than zero.\nAfter superimposing it with the p value map, we can infer that\n\nOnly 2 areas are statistically significant (labelled by sig), which we can reject the null hypothesis to conclude that there is indeed a correlation in these 2 areas that their neighbouring features having dissimilar characteristics.\nAll other regions that does not have a sig label, the null hypothesis is accepted and they have a negative local Moran I value purely due to chance.\n\n\n\n\nAnalysis of Results of Local Moran’s I Statistics - Similar Features (>= 0)\nThe figure below shows the various clusters boxed up with similarly high or low attribute values as the local Moran I Statistics is more than or equal to zero.\nAfter superimposing it with the p value map, we can infer that\n\nCluster A is the most statistically significant, the area GDPPC is highly influence by its neighbours as we reject the null hypothesis. Only 2 areas has very different features as explained in the previous section. The 2 dissimilar area however, seems to suggest that they are outskirt of cluster A.\nIn Cluster B, only 4 sites are influence by one another, however the influence is weak as the I statistics is between zero and one\nIn cluster C, it looks like only its first degree neighbour has some influence over the GDPPC of the area in the statistically significant lone area\nIn all other regions. the null hypothesis is accepted and they have a positive local Moran I value purely due to chance.\n\n\nThe relevant sites are color coded on the LISA Cluster Map according to the type of spatial autocorrelation.\nThe Moran scatterplot must first be drawn before we can create the LISA cluster map.\n\n\n\nPlotting Moran Scatterplot\n\nA helpful visual tool for exploratory analysis is the Moran scatter plot, which helps one to judge how similar an observed value is to its nearby observations.\nThe y axis, also referred to as the response axis , is dependent on the values of the observations.\nBased on the weighted average or spatial lag of the corresponding observation on the X axis, the Y axis is constructed.\n\n\nnci = moran.plot(hunan$GDPPC, rs_wm_q, \n                 labels=as.character(hunan$County),\n                 xlab = \"GDPPC 2012\",\n                 ylab=\"Spatially lag GDPPC 2012\",\n                 xlim=c(0, 90000), ylim=c(0,60000), pch=5\n)\n\n\n\n\nThe plot is split into 4 quadrants, below is an example of what each quadrant represents.\n\nThe global Moran’s I is estimated from the slope of the regression line. The relative density of the dots in the correlation quadrants shows how association between high and/or low values determines the overall measure of spatial relationship. (Figure 5, Gomez, et al, 2011)\n\nAnalysis\n\nFrom the resulting plot, we can see that majority of the points are positively correlated but are below the average.\nThe areas that are above the average in the high-high quadrant are likely represented by purple and dark red spots on the local Moran’s I map in Cluster A.\nZiXing and LengShuiJiang are likely the 2 areas with dissimilar features in cluster A as previously explained.\n\n\n\n\nPreparing LISA map classes\n\nCreate the quadrants\n\nquadrant = vector(mode=\"numeric\",length=nrow(localMI))\n\nCenter the variable of interest around its mean\n\nhunan$lag_GDPPC = lag.listw(rs_wm_q, hunan$GDPPC)\nDV = hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \n\nCenter the local Moran’s I value around the mean\n\n#local moran\nLM_I = (localMI[,1] - mean(localMI[,1]))\n\nSetup the statistically significant levels for the local Moran\n\nsignif = 0.05\n\nDefine the quadrants levels\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\n#L_MI = Local Moran I ard mean\nquadrant[DV <0 & LM_I>0] = 1\nquadrant[DV >0 & LM_I<0] = 2\nquadrant[DV <0 & LM_I<0] = 3  \nquadrant[DV >0 & LM_I>0] = 4 \n\nPlace non significant Moran into category 0\n\nquadrant[localMI[,5]>signif] = 0\n\nPlotting the LISA Map\n\nhunan.localMI$quadrant <- quadrant\ncolors = c(\"white\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters = c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\n\ntm_shape(hunan.localMI) + \n  tm_fill(col=\"quadrant\", style=\"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1]) +\n\n          tm_borders(alpha=0.5)\n\n\n\n\n\n\nFor effective interpretation, it is better to plot both the LISA map and its GDPPC map next to each other.\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant <- quadrant\ncolors = c(\"white\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters = c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAMap = tm_shape(hunan.localMI) + \n  tm_fill(col=\"quadrant\", style=\"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n          tm_borders(alpha=0.5)\n\n#tmap_arrange(localMI.map, LISAMap, pvalue.map, asp=1, ncol=3)\ntmap_arrange(gdppc, LISAMap, asp=1, ncol=2)\n\n\n\n\n\nAnalysis\n\nComparing the GDPPC and LISA maps, it tallies with the analysis in the Local Moran’s section that the dissimilar areas have low GDPPC, while similar regions have high GDPPC in cluster A\nThere are also 2 low high areas in cluster B, these are outliers that neighbours affects its GDPPC. They are likely to be ZhuZhou and XiangTan in the Moran Scatter plot\nIn cluster C, the significant area is likely PingJiang as an outlier in the Moran Scatter plot, where most neighbouring counties have low GDPPC, while it has a GDPPC of between 20k to 40k. However, in the LISA plot, it is insignificant.\nThe small area at the center of the map, although it has high GDPPC, but only has 3 neighbours, as the number of neighbours is small, it has been considered to be statistically insignificant in hte LISA Map\n\nFor reference, the figure below was previously discussed in the Local Moran’s Section.\n\n\n\n\nHot Spot and Cold Spot Area Analysis\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).\nA hot spot is a location where high values cluster together\nA cold spot is a location place where low values cluster together\n• Moran’s I and Geary’s C cannot distinguish them\n• They only indicate clustering\n• Cannot tell if these are hot spots, cold spots, or both\n\n\nGetis and Ord’s G-Statistics\nThe G statistic distinguishes between hot spots and cold spots. It identifies spatial concentrations.\n\nG is relatively large if high values cluster together\nG is relatively low if low values cluster together\n\nThe General G statistic is interpreted relative to its mean (or expected) value. The value for which there is no spatial association\n\nG > expected value -> potential “hot spots”\nG < expected value -> potential “cold spots”\n\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\nDeriving distance-based weight matrix\nWe must first specify a new set of neighbours. While the spatial autocorrelation took into account units that shared borders, in Getis-Ord, neighbours are determined based on distance. There are 2 types of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\nTo get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\nThe reason why G statistics requires centroids is because it is based on point pattern analysis logic, which is very different from LISA or Local Moran’s I that compares local-global correlation.\n\nlongitude = map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind() to put longitude and latitude into the same object.\n\ncoord = cbind(longitude, latitude)\n\n\n\nDetermine the cut-off distance\n\nFind the lower and upper bounds\n\nUsing the k nearest neighbour (knn) algorithm, we can return a matrix with indices of points that belongs to the set of k nearest neighbours of each others by using knearneigh() of spdep\nConvert the knn objects into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb()\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the return objects by using unlist()\n\nk1 = knn2nb(knearneigh(coord)) #returns a list of nb objects from the result of k nearest neighbours matrix, Step 1 & 2\nk1dist = unlist(nbdists(k1, coord, longlat = TRUE)) #return the length of neighbour relationship edges and remove the list structures, Step 3 & 4\nsummary(k1dist)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nFrom the result, the largest first nearest neighbour is 61.79km, hence by using this as the upper bound, we can be certain that all units will have at least 1 neighbour\ndnearneigh will be used to compute the distance weight matrix\n\nwm_d62 = dnearneigh(coord, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext nb2listw() is used to convert the nb object into spatial weights objects\n\nwm62_lw = nb2listw(wm_d62, style=\"B\")\nsummary(wm62_lw) \n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\nThe fixed distance weight matrix has the property that locations with higher densities of habitation (often urban areas) tend to have more neighbours, whereas areas with lower densities (typically rural areas) tend to have fewer neighbours.\nBy enforcing symmetry or accepting asymmetric neighbours, as shown in the code below, it is possible to control the number of neighbours of each region using the knn algorithm.\n\nknn8 = knn2nb(knearneigh(coord, k=8))\n\nNext nb2listw() is used to convert the nb object into spatial weights objects\n\nknn_lw = nb2listw(knn8, style = \"B\")\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on Ex3.html#computing-gi-statistics",
    "href": "Hands-on_Ex3/Hands-on Ex3.html#computing-gi-statistics",
    "title": "Hands On Exercise 2.1 - Global and Local Measures of Spatial Autocorrelation",
    "section": "Computing Gi statistics",
    "text": "Computing Gi statistics\n\nGi statistics using fixed distance (G Statistics)\n\nfips = order(hunan$County)\ngi.fixed = localG(hunan$GDPPC, wm62_lw, return_internals = TRUE)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw, return_internals = TRUE)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding hunan sf data frame by using the cbind()\n\nhunan.gi = cbind(hunan, as.matrix(gi.fixed)) %>% #pipe\n          rename(gstat_fixed = as.matrix.gi.fixed.)\n\nThe code above performs 3tasks.\n\nFirst, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix().\ncbind() is used to join hunan@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi.\n\nthe field name of the gi values is renamed to gstat_fixed by using rename().\n\n\nMapping Gi values with fixed distance weights\nWe plot the map and the gimap side by side for analysis\n\nGimap_fixed = tm_shape(hunan.gi) +\n          tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap_fixed, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\nAnalysis\nComparing with Local Moran’s map that was discussed below, we can see that the dissimilar areas were classified as a hot spot.\nConversely, the spatial outliers in Cluster B and C were groups as cold spots in the G Statistics Map.\n\nThe reason for this phenomenon is that the G statistics does not take into account outliers as it does not consider spatial correlation. It only take into account hot spots & cold spots.\nFrom the result, we can infer that the GDPPC of the hot spot regions has high GDPPC, while the cold spot regions has low GDPPC.\n\n\n\nMapping Gi values with adaptive distance weights (G* Statistics)\nThe code below is used to compute the Gi values for GDPPC 2012 by using an adaptive distance weight matrix (i.e knb_lw).\n\nfips = order(hunan$County)\ngi.adaptive = localG(hunan$GDPPC, knn_lw, return_internals = TRUE)\ngi.adaptive\n\n [1]  0.274428799  0.300225037  0.030447697 -0.009771412 -0.033921570\n [6] -0.154780126  4.034649782  2.057586016  4.378892586  1.479129376\n[11]  0.761743842 -0.648205275 -0.773677838  0.589236922  1.040407601\n[16]  0.368526533 -0.604240867 -0.241840937  0.031714037 -0.110547691\n[21]  0.761314356  1.175580259 -0.884714136 -0.860993329 -1.643096490\n[26] -1.290687016 -1.422253022 -0.675281508 -1.719511109 -1.210266137\n[31] -1.300914263 -1.599085669 -1.298761870 -1.836622587  1.637619520\n[36] -0.721435309 -1.958848641 -1.665195897 -1.868014845 -1.183536130\n[41] -0.169560764 -2.084882362 -2.181780084 -2.081025645 -0.499000625\n[46]  2.194733590  2.495469794 -1.695557884 -0.745540634 -1.193763093\n[51] -1.821073681 -1.894085866 -1.570969008 -1.055766446 -1.299966539\n[56] -0.201823610  0.498063690  0.581955247 -0.876827566 -0.955484907\n[61] -0.723004897 -0.790993867 -0.183585082  1.129758266  2.271097895\n[66]  3.047193741  4.995149600  4.022126163 -0.313165513  0.384924896\n[71]  3.018245449  0.561045961  0.210102660  4.365942776 -1.210175378\n[76]  2.391729501 -1.188720061  3.068344267 -0.600223372  1.046676007\n[81] -1.427632954 -0.156355526  1.176546366  3.726230897 -0.327758027\n[86]  2.972571047 -1.009008013 -0.989393051\nattr(,\"internals\")\n              Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.09720587 0.09195402 0.0003662397  0.274428799   7.837551e-01\n [2,] 0.09769063 0.09195402 0.0003651040  0.300225037   7.640055e-01\n [3,] 0.09253816 0.09195402 0.0003680612  0.030447697   9.757100e-01\n [4,] 0.09176695 0.09195402 0.0003665281 -0.009771412   9.922037e-01\n [5,] 0.09130429 0.09195402 0.0003668767 -0.033921570   9.729397e-01\n [6,] 0.08898762 0.09195402 0.0003673079 -0.154780126   8.769947e-01\n [7,] 0.16751891 0.09195402 0.0003507748  4.034649782   5.468380e-05\n [8,] 0.13054918 0.09195402 0.0003518436  2.057586016   3.962989e-02\n [9,] 0.17277103 0.09195402 0.0003406253  4.378892586   1.192839e-05\n[10,] 0.12001759 0.09195402 0.0003599760  1.479129376   1.391057e-01\n[11,] 0.10633361 0.09195402 0.0003563487  0.761743842   4.462129e-01\n[12,] 0.07951853 0.09195402 0.0003680448 -0.648205275   5.168522e-01\n[13,] 0.07714548 0.09195402 0.0003663568 -0.773677838   4.391213e-01\n[14,] 0.10311529 0.09195402 0.0003587953  0.589236922   5.557024e-01\n[15,] 0.11178796 0.09195402 0.0003634216  1.040407601   2.981506e-01\n[16,] 0.09902122 0.09195402 0.0003677535  0.368526533   7.124807e-01\n[17,] 0.08068910 0.09195402 0.0003475655 -0.604240867   5.456835e-01\n[18,] 0.08732412 0.09195402 0.0003665092 -0.241840937   8.089034e-01\n[19,] 0.09256190 0.09195402 0.0003673900  0.031714037   9.747001e-01\n[20,] 0.08984049 0.09195402 0.0003655276 -0.110547691   9.119750e-01\n[21,] 0.10653391 0.09195402 0.0003667585  0.761314356   4.464693e-01\n[22,] 0.11447605 0.09195402 0.0003670374  1.175580259   2.397626e-01\n[23,] 0.07508563 0.09195402 0.0003635312 -0.884714136   3.763108e-01\n[24,] 0.07555112 0.09195402 0.0003629457 -0.860993329   3.892417e-01\n[25,] 0.06043622 0.09195402 0.0003679474 -1.643096490   1.003630e-01\n[26,] 0.06742593 0.09195402 0.0003611483 -1.290687016   1.968122e-01\n[27,] 0.06478946 0.09195402 0.0003647974 -1.422253022   1.549528e-01\n[28,] 0.07912867 0.09195402 0.0003607191 -0.675281508   4.994969e-01\n[29,] 0.05932898 0.09195402 0.0003599915 -1.719511109   8.552135e-02\n[30,] 0.06893033 0.09195402 0.0003618998 -1.210266137   2.261768e-01\n[31,] 0.06724327 0.09195402 0.0003608067 -1.300914263   1.932878e-01\n[32,] 0.06134370 0.09195402 0.0003664310 -1.599085669   1.098016e-01\n[33,] 0.06714525 0.09195402 0.0003648812 -1.298761870   1.940257e-01\n[34,] 0.05762358 0.09195402 0.0003493969 -1.836622587   6.626563e-02\n[35,] 0.12317148 0.09195402 0.0003633868  1.637619520   1.015011e-01\n[36,] 0.07825698 0.09195402 0.0003604615 -0.721435309   4.706417e-01\n[37,] 0.05490035 0.09195402 0.0003578169 -1.958848641   5.013052e-02\n[38,] 0.06013762 0.09195402 0.0003650661 -1.665195897   9.587368e-02\n[39,] 0.05649408 0.09195402 0.0003603425 -1.868014845   6.176000e-02\n[40,] 0.06958160 0.09195402 0.0003573248 -1.183536130   2.365967e-01\n[41,] 0.08870667 0.09195402 0.0003667818 -0.169560764   8.653556e-01\n[42,] 0.05226797 0.09195402 0.0003623370 -2.084882362   3.707998e-02\n[43,] 0.05058836 0.09195402 0.0003594662 -2.181780084   2.912577e-02\n[44,] 0.05256094 0.09195402 0.0003583316 -2.081025645   3.743156e-02\n[45,] 0.08249954 0.09195402 0.0003589829 -0.499000625   6.177789e-01\n[46,] 0.13351191 0.09195402 0.0003585448  2.194733590   2.818271e-02\n[47,] 0.13980943 0.09195402 0.0003677540  2.495469794   1.257905e-02\n[48,] 0.05972453 0.09195402 0.0003613115 -1.695557884   8.996964e-02\n[49,] 0.07779955 0.09195402 0.0003604495 -0.745540634   4.559450e-01\n[50,] 0.06933428 0.09195402 0.0003590369 -1.193763093   2.325707e-01\n[51,] 0.05717238 0.09195402 0.0003647919 -1.821073681   6.859566e-02\n[52,] 0.05561872 0.09195402 0.0003680088 -1.894085866   5.821361e-02\n[53,] 0.06225124 0.09195402 0.0003574860 -1.570969008   1.161898e-01\n[54,] 0.07183294 0.09195402 0.0003632178 -1.055766446   2.910749e-01\n[55,] 0.06738016 0.09195402 0.0003573408 -1.299966539   1.936124e-01\n[56,] 0.08811771 0.09195402 0.0003613143 -0.201823610   8.400546e-01\n[57,] 0.10147288 0.09195402 0.0003652580  0.498063690   6.184392e-01\n[58,] 0.10310390 0.09195402 0.0003670801  0.581955247   5.605968e-01\n[59,] 0.07526754 0.09195402 0.0003621606 -0.876827566   3.805803e-01\n[60,] 0.07370784 0.09195402 0.0003646671 -0.955484907   3.393325e-01\n[61,] 0.07823737 0.09195402 0.0003599264 -0.723004897   4.696769e-01\n[62,] 0.07683091 0.09195402 0.0003655412 -0.790993867   4.289476e-01\n[63,] 0.08846487 0.09195402 0.0003612141 -0.183585082   8.543390e-01\n[64,] 0.11362359 0.09195402 0.0003678997  1.129758266   2.585781e-01\n[65,] 0.13552322 0.09195402 0.0003680335  2.271097895   2.314105e-02\n[66,] 0.15029172 0.09195402 0.0003665206  3.047193741   2.309888e-03\n[67,] 0.18713548 0.09195402 0.0003630845  4.995149600   5.879018e-07\n[68,] 0.16912010 0.09195402 0.0003680793  4.022126163   5.767515e-05\n[69,] 0.08597972 0.09195402 0.0003639373 -0.313165513   7.541549e-01\n[70,] 0.09930460 0.09195402 0.0003646621  0.384924896   7.002931e-01\n[71,] 0.14976364 0.09195402 0.0003668522  3.018245449   2.542429e-03\n[72,] 0.10267460 0.09195402 0.0003651229  0.561045961   5.747662e-01\n[73,] 0.09598415 0.09195402 0.0003679379  0.210102660   8.335875e-01\n[74,] 0.17564058 0.09195402 0.0003674137  4.365942776   1.265756e-05\n[75,] 0.06894940 0.09195402 0.0003613546 -1.210175378   2.262116e-01\n[76,] 0.13777971 0.09195402 0.0003671080  2.391729501   1.676920e-02\n[77,] 0.06924543 0.09195402 0.0003649397 -1.188720061   2.345498e-01\n[78,] 0.15052389 0.09195402 0.0003643681  3.068344267   2.152485e-03\n[79,] 0.08060684 0.09195402 0.0003573967 -0.600223372   5.483574e-01\n[80,] 0.11191592 0.09195402 0.0003637301  1.046676007   2.952490e-01\n[81,] 0.06473996 0.09195402 0.0003633737 -1.427632954   1.533975e-01\n[82,] 0.08896972 0.09195402 0.0003643008 -0.156355526   8.757528e-01\n[83,] 0.11452640 0.09195402 0.0003680752  1.176546366   2.393766e-01\n[84,] 0.15719339 0.09195402 0.0003065349  3.726230897   1.943644e-04\n[85,] 0.08568420 0.09195402 0.0003659344 -0.327758027   7.430946e-01\n[86,] 0.14892272 0.09195402 0.0003672891  2.972571047   2.953169e-03\n[87,] 0.07271488 0.09195402 0.0003635650 -1.009008013   3.129708e-01\n[88,] 0.07310269 0.09195402 0.0003630331 -0.989393051   3.224709e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = knn_lw, return_internals = TRUE)\nattr(,\"class\")\n[1] \"localG\"\n\nhunan.gi = cbind(hunan, as.matrix(gi.adaptive)) %>% #pipe\n            rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\nWe plot the map and the gimap side by side for analysis\n\nGimap_adaptive = tm_shape(hunan.gi) +\n          tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap_adaptive, asp=1, ncol=2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\ntmap_arrange(Gimap_fixed, Gimap_adaptive, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\nAnalysis\nThe G Statistics using fixed weight is simply the spatial lag, while the G* statistics using adaptive weights is the weighted average of neighbour value at region i\nThis allow us to find how much weight one need to give the location relative to its neighbours.\nWith the G* statistics, we could tell that the hotspot has shrunk and became more intense, as relative weights were assigned, this method is more robust as compared to the G statistics which uses a consistent weight across its analysis.\nFrom the result, we can infer that the GDPPC of the hot spot regions has high GDPPC, while the cold spot regions has low GDPPC.\nBased on this exercise, the Local Moran Statistics, LISA Map and G Statistical test has gave consistent results with regards to Cluster A. Thus, we can draw the conclusion that Cluster A is likely to be an urban area with higher degree of economic activity than the rest of Hunan, which leads to a higher GDPPC."
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on Ex3.html#reference",
    "href": "Hands-on_Ex3/Hands-on Ex3.html#reference",
    "title": "Hands On Exercise 2.1 - Global and Local Measures of Spatial Autocorrelation",
    "section": "Reference",
    "text": "Reference\nAnselin L. (2020) Local Spatial Autocorrelation (1) LISA and Local Moran https://geodacenter.github.io/workbook/6a_local_auto/lab6a.html#local-moran\nArcGIS Pro 3.0, How Spatial Autocorrelation (Global Moran’s I) works\nhttps://pro.arcgis.com/en/pro-app/latest/tool-reference/spatial-statistics/h-how-spatial-autocorrelation-moran-s-i-spatial-st.htm\nGomez, Cristina & White, Joanne & Wulder, Michael. (2011). Characterizing the state and processes of change in a dynamic forest environment using hierarchical spatio-temporal segmentation. Remote Sensing of Environment. 115. 1665-1679. 10.1016/j.rse.2011.02.025.\nLong, A (n.d.), Local Moran\nhttp://ceadserv1.nku.edu/longa//geomed/stats/localmoran/localmoran.html"
  },
  {
    "objectID": "Hands-on_Ex4/Hands-on_Ex4.html",
    "href": "Hands-on_Ex4/Hands-on_Ex4.html",
    "title": "Hands On Exercise 3.1 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "In this hands-on exercise, we are interested to delineate Shan State, Myanmar into homogeneous regions by using multiple Information and Communication technology (ICT) measures, namely: Radio, Television, Land line phone, Mobile phone, Computer, and Internet at home."
  },
  {
    "objectID": "Hands-on_Ex4/Hands-on_Ex4.html#getting-started",
    "href": "Hands-on_Ex4/Hands-on_Ex4.html#getting-started",
    "title": "Hands On Exercise 3.1 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Getting Started",
    "text": "Getting Started\nFirstly, we load the required packages in R\n\nSpatial data handling\n\nsf, rgdal and spdep\n\nAttribute data handling\n\nknitr, tidyverse, funModeling especially readr, ggplot2 and dplyr\n\nChoropleth mapping\n\ntmap\n\nMultivariate data visualization and analysis\n\ncoorplot, ggpubr, and heatmaply\n\nCluster analysis\n\ncluster\nClustGeo\n\n\n\npacman::p_load(knitr, rgdal, spdep, tmap, sf, \n               ggpubr, cluster, funModeling,\n               factoextra, NbClust, #factoextra factor analysis, access clustering results\n               heatmaply, corrplot, psych, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex4/Hands-on_Ex4.html#importing-preparing-the-data",
    "href": "Hands-on_Ex4/Hands-on_Ex4.html#importing-preparing-the-data",
    "title": "Hands On Exercise 3.1 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Importing & preparing the data",
    "text": "Importing & preparing the data\n\nGeospatial Data\nIn this section, we will import Myanmar Township Boundary GIS data and its associated attrbiute table into the R environment.\nThe Myanmar Township Boundary GIS data is in ESRI shapefile format. It will be imported into R environment by using the st_read() function of sf.\nAs we are only interested in Shan State, we will filter only values that represents the Shan State.\n\nshan_sf = st_read(dsn=\"data/geospatial\", layer=\"myanmar_township_boundaries\") %>%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\"))\n\nReading layer `myanmar_township_boundaries' from data source \n  `D:\\Allanckw\\ISSS624\\Hands-on_Ex4\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\nshan_sf\n\nSimple feature collection with 55 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.1699 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   OBJECTID           ST ST_PCODE       DT   DT_PCODE        TS  TS_PCODE\n1       163 Shan (North)   MMR015  Mongmit MMR015D008   Mongmit MMR015017\n2       203 Shan (South)   MMR014 Taunggyi MMR014D001   Pindaya MMR014006\n3       240 Shan (South)   MMR014 Taunggyi MMR014D001   Ywangan MMR014007\n4       106 Shan (South)   MMR014 Taunggyi MMR014D001  Pinlaung MMR014009\n5        72 Shan (North)   MMR015  Mongmit MMR015D008    Mabein MMR015018\n6        40 Shan (South)   MMR014 Taunggyi MMR014D001     Kalaw MMR014005\n7       194 Shan (South)   MMR014 Taunggyi MMR014D001     Pekon MMR014010\n8       159 Shan (South)   MMR014 Taunggyi MMR014D001  Lawksawk MMR014008\n9        61 Shan (North)   MMR015  Kyaukme MMR015D003 Nawnghkio MMR015013\n10      124 Shan (North)   MMR015  Kyaukme MMR015D003   Kyaukme MMR015012\n                 ST_2            LABEL2 SELF_ADMIN ST_RG T_NAME_WIN T_NAME_M3\n1  Shan State (North)    Mongmit\\n61072       <NA> State   rdk;rdwf      မိုးမိတ်\n2  Shan State (South)    Pindaya\\n77769       Danu State     yif;w,     ပင်းတယ\n3  Shan State (South)    Ywangan\\n76933       Danu State      &GmiH       ရွာငံ\n4  Shan State (South)  Pinlaung\\n162537       Pa-O State  yifavmif;   ပင်လောင်း\n5  Shan State (North)     Mabein\\n35718       <NA> State     rbdrf;      မဘိမ်း\n6  Shan State (South)     Kalaw\\n163138       <NA> State       uavm      ကလော\n7  Shan State (South)      Pekon\\n94226       <NA> State     z,fcHk       ဖယ်ခုံ\n8  Shan State (South)          Lawksawk       <NA> State   &yfapmuf    ရပ်စောက်\n9  Shan State (North) Nawnghkio\\n128357       <NA> State  aemifcsdK    နောင်ချို\n10 Shan State (North)   Kyaukme\\n172874       <NA> State   ausmufrJ    ကျောက်မဲ\n       AREA                       geometry\n1  2703.611 MULTIPOLYGON (((96.96001 23...\n2   629.025 MULTIPOLYGON (((96.7731 21....\n3  2984.377 MULTIPOLYGON (((96.78483 21...\n4  3396.963 MULTIPOLYGON (((96.49518 20...\n5  5034.413 MULTIPOLYGON (((96.66306 24...\n6  1456.624 MULTIPOLYGON (((96.49518 20...\n7  2073.513 MULTIPOLYGON (((97.14738 19...\n8  5145.659 MULTIPOLYGON (((96.94981 22...\n9  3271.537 MULTIPOLYGON (((96.75648 22...\n10 3920.869 MULTIPOLYGON (((96.95498 22...\n\n\nWe can then use glimpse() to verify each field’s data type & available values.\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 15\n$ OBJECTID   <dbl> 163, 203, 240, 106, 72, 40, 194, 159, 61, 124, 71, 155, 101…\n$ ST         <chr> \"Shan (North)\", \"Shan (South)\", \"Shan (South)\", \"Shan (Sout…\n$ ST_PCODE   <chr> \"MMR015\", \"MMR014\", \"MMR014\", \"MMR014\", \"MMR015\", \"MMR014\",…\n$ DT         <chr> \"Mongmit\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Mongmit\", \"…\n$ DT_PCODE   <chr> \"MMR015D008\", \"MMR014D001\", \"MMR014D001\", \"MMR014D001\", \"MM…\n$ TS         <chr> \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabein\", \"Kal…\n$ TS_PCODE   <chr> \"MMR015017\", \"MMR014006\", \"MMR014007\", \"MMR014009\", \"MMR015…\n$ ST_2       <chr> \"Shan State (North)\", \"Shan State (South)\", \"Shan State (So…\n$ LABEL2     <chr> \"Mongmit\\n61072\", \"Pindaya\\n77769\", \"Ywangan\\n76933\", \"Pinl…\n$ SELF_ADMIN <chr> NA, \"Danu\", \"Danu\", \"Pa-O\", NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ST_RG      <chr> \"State\", \"State\", \"State\", \"State\", \"State\", \"State\", \"Stat…\n$ T_NAME_WIN <chr> \"rdk;rdwf\", \"yif;w,\", \"&GmiH\", \"yifavmif;\", \"rbdrf;\", \"uavm…\n$ T_NAME_M3  <chr> \"မိုးမိတ်\", \"ပင်းတယ\", \"ရွာငံ\", \"ပင်လောင်း\", \"မဘိမ်း\", \"ကလော\", \"ဖယ်ခုံ\", \"…\n$ AREA       <dbl> 2703.611, 629.025, 2984.377, 3396.963, 5034.413, 1456.624, …\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((96.96001 23..., MULTIPOLYGON (…\n\n\n\n\nAspatial Data\n\nLoading the Data\nTo load the raw data file, we use the read_csv function The imported InfoComm variables are extracted from The 2014 Myanmar Population and Housing Census Myanmar. The attribute data set is called ict. It is saved in R’s * tibble data.frame* format.\nWe can view the summary statistics with summary()\n\nict = read_csv(\"data/aspatial/Shan-ICT.csv\") \nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\nThere are a total of 11 fields and 55 observation in the tibble data.frame.\n\n\nDerive new variables with dplyr package\nThe number of households is used as the measurement unit for the values. The underlying total number of households will influence the results when these statistics are used directly. Typically, the townships with a larger proportion of total households will also have a larger proportion of homes with radio, TV, etc.\nWe shall calculate the penetration rate of each ICT variable to address this issue by dividing it by the total number of households and multiply by 1000 and adding it to the data frame by using mutate() of dplyr package and renaming the column using rename_with()\n\nnew_col_names = c('DT_PCODE', 'DT', 'TS_PCODE', 'TS', 'TT_HOUSEHOLDS', 'RADIO', 'TV', 'LLPHONE', 'MPHONE', 'COMPUTER',  'INTERNET')\n\nold_col_names = c('District Pcode', 'District Name', 'Township Pcode', 'Township Name', 'Total households', 'Radio', 'Television', 'Land line phone', 'Mobile phone', 'Computer', 'Internet at home')\n\nict_derived = ict %>%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>% #per thousand household\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%\n  rename_with(~ new_col_names, all_of(old_col_names)) \n\nReviewing the summary statistics of the newly derived penetration rates\n\nsummary(ict_derived)\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985"
  },
  {
    "objectID": "Hands-on_Ex4/Hands-on_Ex4.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex4/Hands-on_Ex4.html#exploratory-data-analysis-eda",
    "title": "Hands On Exercise 3.1 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\n\nEDA using statistical graphics\nWe can plot the distribution of the variables (i.e. Number of households with radio) by using appropriate Exploratory Data Analysis (EDA) methods by using functions in ggplot2. We will also place the mean and median lines with geom_vline\nA Histogram is useful to identify the overall distribution of the data values (i.e. left skew, right skew or normal distribution)\n\n#{r, fig.width=4, fig.height=4\nggplot(data = ict_derived, aes(x=`RADIO`)) + \n      geom_histogram(bins=30, color=\"black\", fill=\"light blue\") +\n      \n  labs(x = \"Radio\", y = \"Frequency\") +\n\n  geom_vline(aes(xintercept = mean(ict_derived$RADIO)),   \n               color=\"red\", linetype=\"dashed\", linewidth=1) +\n  \n  geom_vline(aes(xintercept=median(ict_derived$RADIO)),   \n               color=\"brown\", linetype=\"dashed\", linewidth=1)\n\n\n\n\nWe can also use box plot to detect outliers\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\nFrom the boxplot, we can infer that there are 3 outliers, we can find the outliers and display them using kable() below from the code below\n\nict_derived_outliers_radio = ict_derived %>%\n  filter(RADIO > 12000)\nict_derived_outliers_radio %>% select ('DT_PCODE', 'DT', 'TS_PCODE', 'TS', 'TT_HOUSEHOLDS', 'RADIO') %>%\n  kable()\n\n\n\n\nDT_PCODE\nDT\nTS_PCODE\nTS\nTT_HOUSEHOLDS\nRADIO\n\n\n\n\nMMR014D001\nTaunggyi\nMMR014001\nTaunggyi\n82604\n30176\n\n\nMMR014D001\nTaunggyi\nMMR014002\nNyaungshwe\n42634\n13801\n\n\nMMR015D001\nLashio\nMMR015001\nLashio\n64932\n15307\n\n\n\n\n\nNext, we will plot the histogram of the newly derived variables (i.e. Radio penetration rate) by using the code below. We will also place the mean and median lines with geom_vline\n\nggplot(data = ict_derived, aes(x=`RADIO_PR`)) + \n      geom_histogram(bins=30, color=\"black\", fill=\"light blue\") +\n      \n  labs(x = \"Radio\", y = \"Frequency\") +\n\n  geom_vline(aes(xintercept = mean(ict_derived$RADIO_PR)),   \n               color=\"red\", linetype=\"dashed\", linewidth=1) +\n  \n  geom_vline(aes(xintercept=median(ict_derived$RADIO_PR)),   \n               color=\"brown\", linetype=\"dashed\", linewidth=1)\n\n\n\n\nFrom the histogram, we can tell it is positively skewed, with an outliers after the 450 mark.\nWe can also use boxplot to detect outliers\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\nFrom the box plot, we can infer that there are 1 outlier, we can find the outlier and display it using kable() below from the code below\n\nict_derived_outliers_radio = ict_derived %>%\n  filter(RADIO_PR > 450)\nict_derived_outliers_radio %>% select ('DT_PCODE', 'DT', 'TS_PCODE', 'TS', 'TT_HOUSEHOLDS', 'RADIO_PR') %>%\n  kable()\n\n\n\n\nDT_PCODE\nDT\nTS_PCODE\nTS\nTT_HOUSEHOLDS\nRADIO_PR\n\n\n\n\nMMR014D001\nTaunggyi\nMMR014007\nYwangan\n18348\n484.5215\n\n\n\n\n\nIn the figure below, multiple histograms are plotted to reveal the distribution of the selected variables in the ict_derived data.frame. First, We do this by creating all the histograms assigned to individual variables.\n\nradio = ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(x = \"Radio\", y = \"Frequency\") +\n  geom_vline(aes(xintercept = mean(ict_derived$RADIO_PR)),   \n               color=\"red\", linetype=\"dashed\", linewidth=1) +\n  geom_vline(aes(xintercept=median(ict_derived$RADIO_PR)),   \n               color=\"brown\", linetype=\"dashed\", linewidth=1)\n\n\ntv = ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(x = \"TV\", y = \"Frequency\") +\n  geom_vline(aes(xintercept = mean(ict_derived$TV_PR)),   \n               color=\"red\", linetype=\"dashed\", linewidth=1) +\n  geom_vline(aes(xintercept=median(ict_derived$TV_PR)),   \n               color=\"brown\", linetype=\"dashed\", linewidth=1)\n\nllphone = ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(x = \"Land line phone\", y = \"Frequency\") +\n  geom_vline(aes(xintercept = mean(ict_derived$LLPHONE_PR)),   \n               color=\"red\", linetype=\"dashed\", linewidth=1) +\n  geom_vline(aes(xintercept=median(ict_derived$LLPHONE_PR)),   \n               color=\"brown\", linetype=\"dashed\", linewidth=1)\n\nmphone = ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")  +\n  labs(x = \"Mobile phone\", y = \"Frequency\") +\n  geom_vline(aes(xintercept = mean(ict_derived$MPHONE_PR)),   \n               color=\"red\", linetype=\"dashed\", linewidth=1) +\n  geom_vline(aes(xintercept=median(ict_derived$MPHONE_PR)),   \n               color=\"brown\", linetype=\"dashed\", linewidth=1)\n\ncomputer = ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")  +\n  labs(x = \"Computer\", y = \"Frequency\") +\n  geom_vline(aes(xintercept = mean(ict_derived$COMPUTER_PR)),   \n               color=\"red\", linetype=\"dashed\", linewidth=1) +\n  geom_vline(aes(xintercept=median(ict_derived$COMPUTER_PR)),   \n               color=\"brown\", linetype=\"dashed\", linewidth=1)\n\ninternet = ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")  +\n  labs(x = \"internet\", y = \"Frequency\") +\n  geom_vline(aes(xintercept = mean(ict_derived$INTERNET_PR)),   \n               color=\"red\", linetype=\"dashed\", linewidth=1) +\n  geom_vline(aes(xintercept=median(ict_derived$INTERNET_PR)),   \n               color=\"brown\", linetype=\"dashed\", linewidth=1)\n\nNext, ggarange() of ggpubr package is used to group these histograms together.\n\nggarrange(radio, tv, llphone, mphone, computer, internet, \n          ncol = 2, \n          nrow = 3)\n\n\n\n\nFrom the chart, we can tell\n\nRadio penetration rate is positively skewed\nTV penetration rate is negatively skewed\nLand line phone is penetration rate positively skewed\nMobile phone penetration rate is positively skewed\nComputer penetration rate is positively skewed with a really long tail\nSimilarly, Internet penetration rate is positively skewed with a really long tail, the pattern of computer and internet follows the same pattern. It may be the case that people with computers will likely also have internet\n\n\n\nEDA using choropleth map\n\nJoining geospatial data with aspatial data\nWe must first integrate the geographical data object (shan_sf) and aspatial data (ict_derived) before we can create the choropleth map. object into a single frame.\nTo do this, the dplyr package’s left_join function will be used. We will use TS_PCode as the common variable to join the 2 tables\n\nshan_sf = left_join(shan_sf, ict_derived, #geospatial file first\n                     by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n\nA choropleth map will be created so we can quickly see how the radio penetration rate is distributed across Shan State at the township level.\nThe choropleth is prepared by utilizing the functions of the tmap package\n\nttm()\ntm_shape(shan_sf) +\n          tm_fill(col = \"RADIO_PR\", \n          style = \"pretty\",\n          palette=\"PuRd\",\n          title = \"RADIO_PR\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nBy creating two choropleth maps—one for the total number of households (i.e. TT HOUSEHOLDS.map) and one for the total number of households with radios—we can show that the distribution depicted in the choropleth map above is biased to the underlying total number of households at the townships (RADIO.map) with functions of the tmap package. The jenks style is used as it locates clusters of related values and emphasizes the distinctions between categories.\n\nTT_HOUSEHOLDS.map = tm_shape(shan_sf) + \n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5) \n\nRADIO.map = tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,\n             asp=NA, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom the result, we can see from the choropleth maps above that townships with a higher proportion of households also have a higher proportion of radio owners, the summary statistics below shows that it the number is in fact in the 75th percentile\n\nsummary(ict_derived$RADIO)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    115    1260    2497    4487    6192   30176 \n\n\nWe will now plot the choropleth maps illustrating the distribution of the total number of households and the radio penetration rate.\n\nRADIO_PR.map = tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO_PR\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio PR\") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO_PR.map,\n             asp=NA, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsummary(ict_derived$RADIO_PR)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21.05  138.95  210.95  215.68  268.07  484.52 \n\n\nThe penetration rate is 235.7 radios per 1000 which is only between the 50th and 75th percentile of the sample."
  },
  {
    "objectID": "Hands-on_Ex4/Hands-on_Ex4.html#correlation-analysis",
    "href": "Hands-on_Ex4/Hands-on_Ex4.html#correlation-analysis",
    "title": "Hands On Exercise 3.1 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Correlation Analysis",
    "text": "Correlation Analysis\nIt is crucial that we ensure the cluster variables are not highly correlated before we conduct cluster analysis.\nWe will discover how to see and analyze the correlation of the input variables using the corrplot.mixed() (ref) function of the corrplot package. However we need to find the correlation matrix first with cor() and only use the variables we are interested in, which are in column 12 to 17.\n\ncluster_vars.cor = cor(ict_derived[,12:17]) #convert to correlation matrix [,cols]\n\ncorrplot.mixed(cluster_vars.cor, \n               lower = \"ellipse\", \n               upper = \"number\", \n               tl.pos = \"lt\", \n               diag=\"l\", \n               tl.col=\"black\")\n\n\n\n\nThe correlation graphic above demonstrates the strong correlation between COMPUTER_PR and INTERNET_PR. This suggests that only one of them, rather than both, should be included in the cluster analysis."
  },
  {
    "objectID": "Hands-on_Ex4/Hands-on_Ex4.html#hierarchy-cluster-analysis",
    "href": "Hands-on_Ex4/Hands-on_Ex4.html#hierarchy-cluster-analysis",
    "title": "Hands On Exercise 3.1 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Hierarchy Cluster Analysis",
    "text": "Hierarchy Cluster Analysis\nThere are 4 steps to hierarchical cluster analysis\n\nUsing a specific distance metric, determine the proximity matrix.\nEach data point has a cluster allocated to it.\nCombine the clusters based on a metric for cluster similarity.\nUpdate the distance matrix\n\n\nUsing a specific distance metric, determine the proximity matrix.\n\nExtracting clustering variables\nFirst we need to extract the clustering variables from the shan_sf simple feature object into data.frame. We do not include the variable INTERNET_PR as it has a strong correlation with the variable COMPUTER_PR\n\ncluster_vars = shan_sf %>%\n          st_set_geometry(NULL) %>% #drop geometric column as we it is not one of our clustering variables\n            select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars, 10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nThe following step is to replace row number with township name in the rows and delete the TS.x field by selecting only the required columns (2 to 6) by using rows.names\nThe columns names must only be our clustering variables\n\nrow.names(cluster_vars) = cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\nshan_ict = select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit   286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya   417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan   484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung  231.6499 541.7189   28.54454  249.4903    13.76255\nMabein    449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw     280.7624 611.6204   42.06478  408.7951    29.63160\nPekon     318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk  387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme   210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\n\nData Standardization\nIn most cases, cluster analysis will make use of many variables. Their differing value ranges are not uncommon. It is helpful to standardize the input variables before performing cluster analysis in order to prevent the cluster analysis result from being based on clustering variables with bias values.\n\nMin-Max standardization\nThe code below uses the heatmaply package’s normalize() function to standardize the clustering variables using the Min-Max approach. he summary() function is used to show the summary statistics for the standardized clustering variables.\n\nshan_ict.std_minmax = normalize(shan_ict)\nsummary(shan_ict.std_minmax)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\nThe values range of the Min-max standardized clustering variables are between 0 and 1 now.\n\n\nZ-score standardization\nThe Base R function scale() (ref) makes standardizing Z-scores simple. The Z-score approach will be used to standardize the clustering variables below. We use the describe() function of the psych package here because we want to look at the standard deviation of the variable\n\nshan_ict.std_z = scale(shan_ict)\ndescribe(shan_ict.std_minmax)\n\n            vars  n mean   sd median trimmed  mad min max range  skew kurtosis\nRADIO_PR       1 55 0.42 0.23   0.41    0.41 0.21   0   1     1  0.48    -0.27\nTV_PR          2 55 0.54 0.22   0.55    0.55 0.17   0   1     1 -0.38    -0.23\nLLPHONE_PR     3 55 0.27 0.23   0.19    0.24 0.15   0   1     1  1.37     1.49\nMPHONE_PR      4 55 0.40 0.25   0.38    0.38 0.25   0   1     1  0.48    -0.34\nCOMPUTER_PR    5 55 0.24 0.23   0.18    0.20 0.15   0   1     1  1.80     2.96\n              se\nRADIO_PR    0.03\nTV_PR       0.03\nLLPHONE_PR  0.03\nMPHONE_PR   0.03\nCOMPUTER_PR 0.03\n\n\n\nNote: Z-score standardization method should only be used if we would assume all variables come from some normal distribution.\n\n\n\n\nVisualising the standardize clustering variables\nIt is a good idea to visualize the distribution graphical of the standardized clustering variables in addition to evaluating the summary statistics of those variables.\n\nr = ggplot(data=ict_derived, aes(x=`RADIO_PR`)) + \n    geom_histogram(bins=20, color=\"black\", fill=\"light blue\") +\n      \n  labs(x = \"Radio\", y = \"Frequency\") +\n\n  geom_vline(aes(xintercept = mean(ict_derived$RADIO_PR)),   \n               color=\"red\", linetype=\"dashed\", linewidth=1) +\n  \n  geom_vline(aes(xintercept=median(ict_derived$RADIO_PR)),   \n               color=\"brown\", linetype=\"dashed\", linewidth=1)\n\nshan_ict_s_df = as.data.frame(shan_ict.std_minmax)\n\ns = ggplot(data=shan_ict_s_df, aes(x=`RADIO_PR`)) + \n    geom_histogram(bins=20, color=\"black\", fill=\"light blue\") +\n      \n  labs(x = \"Radio\", y = \"Frequency\") +\n\n  geom_vline(aes(xintercept = mean(shan_ict_s_df$RADIO_PR)),   \n               color=\"red\", linetype=\"dashed\", linewidth=1) +\n  \n  geom_vline(aes(xintercept=median(shan_ict_s_df$RADIO_PR)),   \n               color=\"brown\", linetype=\"dashed\", linewidth=1) + ggtitle(\"Min-Max Standardization\")\n\n\nshan_ict_z_df = as.data.frame(shan_ict.std_z)\n\nz = ggplot(data=shan_ict_z_df, aes(x=`RADIO_PR`)) + \n    geom_histogram(bins=20, color=\"black\", fill=\"light blue\") +\n      \n  labs(x = \"Radio\", y = \"Frequency\") +\n\n  geom_vline(aes(xintercept = mean(shan_ict_z_df$RADIO_PR)),   \n               color=\"red\", linetype=\"dashed\", linewidth=1) +\n  \n  geom_vline(aes(xintercept=median(shan_ict_z_df$RADIO_PR)),   \n               color=\"brown\", linetype=\"dashed\", linewidth=1) + ggtitle(\"Z-score Standardization\")\n\nggarrange(r, s, z,\n          ncol = 2,\n          nrow = 2)\n\n\n\n\nKeep in mind that following data standardization, the clustering variables’ general distribution will change. Therefore, it is advised against performing data standardization if the clustering variables’ range of values is not particularly wide.\n\n\nDetermine the proximity matrix.\nNumerous packages in R offer routines to compute distance matrices. With R’s dist() function, we shall compute the proximity matrix.\nThe six distance proximity calculations that are supported by dist() are the euclidean, maximum, manhattan, canberra, binary, and minkowski methods. Euclidean proximity matrix is the default.\n\nproxmat = dist(shan_ict, method=\"euclidean\")\nproxmat \n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    171.86828                                                  \nYwangan    381.88259 257.31610                                        \nPinlaung    57.46286 208.63519 400.05492                              \nMabein     263.37099 313.45776 529.14689 312.66966                    \nKalaw      160.05997 302.51785 499.53297 181.96406 198.14085          \nPekon       59.61977 117.91580 336.50410  94.61225 282.26877 211.91531\nLawksawk   140.11550 204.32952 432.16535 192.57320 130.36525 140.01101\nNawnghkio   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787\nKyaukme    144.02475 311.01487 505.89191 139.67966 264.88283  79.42225\nMuse       563.01629 704.11252 899.44137 571.58335 453.27410 412.46033\nLaihka     141.87227 298.61288 491.83321 101.10150 345.00222 197.34633\nMongnai    115.86190 258.49346 422.71934  64.52387 358.86053 200.34668\nMawkmai    434.92968 437.99577 397.03752 398.11227 693.24602 562.59200\nKutkai      97.61092 212.81775 360.11861  78.07733 340.55064 204.93018\nMongton    192.67961 283.35574 361.23257 163.42143 425.16902 267.87522\nMongyai    256.72744 287.41816 333.12853 220.56339 516.40426 386.74701\nMongkaing  503.61965 481.71125 364.98429 476.29056 747.17454 625.24500\nLashio     251.29457 398.98167 602.17475 262.51735 231.28227 106.69059\nMongpan    193.32063 335.72896 483.68125 192.78316 301.52942 114.69105\nMatman     401.25041 354.39039 255.22031 382.40610 637.53975 537.63884\nTachileik  529.63213 635.51774 807.44220 555.01039 365.32538 373.64459\nNarphan    406.15714 474.50209 452.95769 371.26895 630.34312 463.53759\nMongkhet   349.45980 391.74783 408.97731 305.86058 610.30557 465.52013\nHsipaw     118.18050 245.98884 388.63147  76.55260 366.42787 212.36711\nMonghsat   214.20854 314.71506 432.98028 160.44703 470.48135 317.96188\nMongmao    242.54541 402.21719 542.85957 217.58854 384.91867 195.18913\nNansang    104.91839 275.44246 472.77637  85.49572 287.92364 124.30500\nLaukkaing  568.27732 726.85355 908.82520 563.81750 520.67373 427.77791\nPangsang   272.67383 428.24958 556.82263 244.47146 418.54016 224.03998\nNamtu      179.62251 225.40822 444.66868 170.04533 366.16094 307.27427\nMonghpyak  177.76325 221.30579 367.44835 222.20020 212.69450 167.08436\nKonkyan    403.39082 500.86933 528.12533 365.44693 613.51206 444.75859\nMongping   265.12574 310.64850 337.94020 229.75261 518.16310 375.64739\nHopong     136.93111 223.06050 352.85844  98.14855 398.00917 264.16294\nNyaungshwe  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782\nHsihseng   131.49728 172.00796 342.91035 111.61846 381.20187 287.11074\nMongla     384.30076 549.42389 728.16301 372.59678 406.09124 260.26411\nHseni      189.37188 337.98982 534.44679 204.47572 213.61240  38.52842\nKunlong    224.12169 355.47066 531.63089 194.76257 396.61508 273.01375\nHopang     281.05362 443.26362 596.19312 265.96924 368.55167 185.14704\nNamhkan    386.02794 543.81859 714.43173 382.78835 379.56035 246.39577\nKengtung   246.45691 385.68322 573.23173 263.48638 219.47071  88.29335\nLangkho    164.26299 323.28133 507.78892 168.44228 253.84371  67.19580\nMonghsu    109.15790 198.35391 340.42789  80.86834 367.19820 237.34578\nTaunggyi   399.84278 503.75471 697.98323 429.54386 226.24011 252.26066\nPangwaun   381.51246 512.13162 580.13146 356.37963 523.44632 338.35194\nKyethi     202.92551 175.54012 287.29358 189.47065 442.07679 360.17247\nLoilen     145.48666 293.61143 469.51621  91.56527 375.06406 217.19877\nManton     430.64070 402.42888 306.16379 405.83081 674.01120 560.16577\nMongyang   309.51302 475.93982 630.71590 286.03834 411.88352 233.56349\nKunhing    173.50424 318.23811 449.67218 141.58836 375.82140 197.63683\nMongyawng  214.21738 332.92193 570.56521 235.55497 193.49994 173.43078\nTangyan    195.92520 208.43740 324.77002 169.50567 448.59948 348.06617\nNamhsan    237.78494 228.41073 286.16305 214.33352 488.33873 385.88676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   157.51129                                                  \nNawnghkio  113.15370  90.82891                                        \nKyaukme    202.12206 186.29066 157.04230                              \nMuse       614.56144 510.13288 533.68806 434.75768                    \nLaihka     182.23667 246.74469 211.88187 128.24979 526.65211          \nMongnai    151.60031 241.71260 182.21245 142.45669 571.97975 100.53457\nMawkmai    416.00669 567.52693 495.15047 512.02846 926.93007 429.96554\nKutkai     114.98048 224.64646 147.44053 170.93318 592.90743 144.67198\nMongton    208.14888 311.07742 225.81118 229.28509 634.71074 212.07320\nMongyai    242.52301 391.26989 319.57938 339.27780 763.91399 264.13364\nMongkaing  480.23965 625.18712 546.69447 586.05094 995.66496 522.96309\nLashio     303.80011 220.75270 230.55346 129.95255 313.15288 238.64533\nMongpan    243.30037 228.54223 172.84425 110.37831 447.49969 210.76951\nMatman     368.25761 515.39711 444.05061 505.52285 929.11283 443.25453\nTachileik  573.39528 441.82621 470.45533 429.15493 221.19950 549.08985\nNarphan    416.84901 523.69580 435.59661 420.30003 770.40234 392.32592\nMongkhet   342.08722 487.41102 414.10280 409.03553 816.44931 324.97428\nHsipaw     145.37542 249.35081 176.09570 163.95741 591.03355 128.42987\nMonghsat   225.64279 352.31496 289.83220 253.25370 663.76026 158.93517\nMongmao    293.70625 314.64777 257.76465 146.09228 451.82530 185.99082\nNansang    160.37607 188.78869 151.13185  60.32773 489.35308  78.78999\nLaukkaing  624.82399 548.83928 552.65554 428.74978 149.26996 507.39700\nPangsang   321.81214 345.91486 287.10769 175.35273 460.24292 214.19291\nNamtu      165.02707 260.95300 257.52713 270.87277 659.16927 185.86794\nMonghpyak  190.93173 142.31691  93.03711 217.64419 539.43485 293.22640\nKonkyan    421.48797 520.31264 439.34272 393.79911 704.86973 351.75354\nMongping   259.68288 396.47081 316.14719 330.28984 744.44948 272.82761\nHopong     138.86577 274.91604 204.88286 218.84211 648.68011 157.48857\nNyaungshwe 139.31874 104.17830  43.26545 126.50414 505.88581 201.71653\nHsihseng   105.30573 257.11202 209.88026 250.27059 677.66886 175.89761\nMongla     441.20998 393.18472 381.40808 241.58966 256.80556 315.93218\nHseni      243.98001 171.50398 164.05304  81.20593 381.30567 204.49010\nKunlong    249.36301 318.30406 285.04608 215.63037 547.24297 122.68682\nHopang     336.38582 321.16462 279.84188 154.91633 377.44407 230.78652\nNamhkan    442.77120 379.41126 367.33575 247.81990 238.67060 342.43665\nKengtung   297.67761 209.38215 208.29647 136.23356 330.08211 258.23950\nLangkho    219.21623 190.30257 156.51662  51.67279 413.64173 160.94435\nMonghsu    113.84636 242.04063 170.09168 200.77712 633.21624 163.28926\nTaunggyi   440.66133 304.96838 344.79200 312.60547 250.81471 425.36916\nPangwaun   423.81347 453.02765 381.67478 308.31407 541.97887 351.78203\nKyethi     162.43575 317.74604 267.21607 328.14177 757.16745 255.83275\nLoilen     181.94596 265.29318 219.26405 146.92675 560.43400  59.69478\nManton     403.82131 551.13000 475.77296 522.86003 941.49778 458.30232\nMongyang   363.58788 363.37684 323.32123 188.59489 389.59919 229.71502\nKunhing    213.46379 278.68953 206.15773 145.00266 533.00162 142.03682\nMongyawng  248.43910 179.07229 220.61209 181.55295 422.37358 211.99976\nTangyan    167.79937 323.14701 269.07880 306.78359 736.93741 224.29176\nNamhsan    207.16559 362.84062 299.74967 347.85944 778.52971 273.79672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    374.50873                                                  \nKutkai      91.15307 364.95519                                        \nMongton    131.67061 313.35220 107.06341                              \nMongyai    203.23607 178.70499 188.94166 159.79790                    \nMongkaing  456.00842 133.29995 428.96133 365.50032 262.84016          \nLashio     270.86983 638.60773 289.82513 347.11584 466.36472 708.65819\nMongpan    178.09554 509.99632 185.18173 200.31803 346.39710 563.56780\nMatman     376.33870 147.83545 340.86349 303.04574 186.95158 135.51424\nTachileik  563.95232 919.38755 568.99109 608.76740 750.29555 967.14087\nNarphan    329.31700 273.75350 314.27683 215.97925 248.82845 285.65085\nMongkhet   275.76855 115.58388 273.91673 223.22828 104.98924 222.60577\nHsipaw      52.68195 351.34601  51.46282  90.69766 177.33790 423.77868\nMonghsat   125.25968 275.09705 154.32012 150.98053 127.35225 375.60376\nMongmao    188.29603 485.52853 204.69232 206.57001 335.61300 552.31959\nNansang     92.79567 462.41938 130.04549 199.58124 288.55962 542.16609\nLaukkaing  551.56800 882.51110 580.38112 604.66190 732.68347 954.11795\nPangsang   204.25746 484.14757 228.33583 210.77938 343.30638 548.40662\nNamtu      209.35473 427.95451 225.28268 308.71751 278.02761 525.04057\nMonghpyak  253.26470 536.71695 206.61627 258.04282 370.01575 568.21089\nKonkyan    328.82831 339.01411 310.60810 248.25265 287.87384 380.92091\nMongping   202.99615 194.31049 182.75266 119.86993  65.38727 257.18572\nHopong      91.53795 302.84362  73.45899 106.21031 124.62791 379.37916\nNyaungshwe 169.63695 502.99026 152.15482 219.72196 327.13541 557.32112\nHsihseng   142.36728 329.29477 128.21054 194.64317 162.27126 411.59788\nMongla     354.10985 686.88950 388.40984 411.06668 535.28615 761.48327\nHseni      216.81639 582.53670 229.37894 286.75945 408.23212 648.04408\nKunlong    202.92529 446.53763 204.54010 270.02165 299.36066 539.91284\nHopang     243.00945 561.24281 263.31986 273.50305 408.73288 626.17673\nNamhkan    370.05669 706.47792 392.48568 414.53594 550.62819 771.39688\nKengtung   272.28711 632.54638 279.19573 329.38387 460.39706 692.74693\nLangkho    174.67678 531.08019 180.51419 236.70878 358.95672 597.42714\nMonghsu     84.11238 332.07962  62.60859 107.04894 154.86049 400.71816\nTaunggyi   448.55282 810.74692 450.33382 508.40925 635.94105 866.21117\nPangwaun   312.13429 500.68857 321.80465 257.50434 394.07696 536.95736\nKyethi     210.50453 278.85535 184.23422 222.52947 137.79420 352.06533\nLoilen      58.41263 388.73386 131.56529 176.16001 224.79239 482.18190\nManton     391.54062 109.08779 361.82684 310.20581 195.59882  81.75337\nMongyang   260.39387 558.83162 285.33223 295.60023 414.31237 631.91325\nKunhing    110.55197 398.43973 108.84990 114.03609 238.99570 465.03971\nMongyawng  275.77546 620.04321 281.03383 375.22688 445.78964 700.98284\nTangyan    180.37471 262.66006 166.61820 198.88460 109.08506 348.56123\nNamhsan    218.10003 215.19289 191.32762 196.76188  77.35900 288.66231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    172.33279                                                  \nMatman     628.11049 494.81014                                        \nTachileik  311.95286 411.03849 890.12935                              \nNarphan    525.63854 371.13393 312.05193 760.29566                    \nMongkhet   534.44463 412.17123 203.02855 820.50164 217.28718          \nHsipaw     290.86435 179.52054 344.45451 576.18780 295.40170 253.80950\nMonghsat   377.86793 283.30992 313.59911 677.09508 278.21548 167.98445\nMongmao    214.23677 131.59966 501.59903 472.95568 331.42618 375.35820\nNansang    184.47950 144.77393 458.06573 486.77266 398.13308 360.99219\nLaukkaing  334.65738 435.58047 903.72094 325.06329 708.82887 769.06406\nPangsang   236.72516 140.23910 506.29940 481.31907 316.30314 375.58139\nNamtu      365.88437 352.91394 416.65397 659.56458 494.36143 355.99713\nMonghpyak  262.09281 187.85699 470.46845 444.04411 448.40651 462.63265\nKonkyan    485.51312 365.87588 392.40306 730.92980 158.82353 254.24424\nMongping   454.52548 318.47482 201.65224 727.08969 188.64567 113.80917\nHopong     345.31042 239.43845 291.84351 632.45718 294.40441 212.99485\nNyaungshwe 201.58191 137.29734 460.91883 445.81335 427.94086 417.08639\nHsihseng   369.00833 295.87811 304.02806 658.87060 377.52977 256.70338\nMongla     179.95877 253.20001 708.17595 347.33155 531.46949 574.40292\nHseni       79.41836 120.66550 564.64051 354.90063 474.12297 481.88406\nKunlong    295.23103 288.03320 468.27436 595.70536 413.07823 341.68641\nHopang     170.63913 135.62913 573.55355 403.82035 397.85908 451.51070\nNamhkan    173.27153 240.34131 715.42102 295.91660 536.85519 596.19944\nKengtung    59.85893 142.21554 613.01033 295.90429 505.40025 531.35998\nLangkho    115.18145  94.98486 518.86151 402.33622 420.65204 428.08061\nMonghsu    325.71557 216.25326 308.13805 605.02113 311.92379 247.73318\nTaunggyi   195.14541 319.81385 778.45810 150.84117 684.20905 712.80752\nPangwaun   362.45608 232.52209 523.43600 540.60474 264.64997 407.02947\nKyethi     447.10266 358.89620 233.83079 728.87329 374.90376 233.25039\nLoilen     268.92310 207.25000 406.56282 573.75476 354.79137 284.76895\nManton     646.66493 507.96808  59.52318 910.23039 280.26395 181.33894\nMongyang   209.33700 194.93467 585.61776 448.79027 401.39475 445.40621\nKunhing    255.10832 137.85278 403.66587 532.26397 281.62645 292.49814\nMongyawng  172.70139 275.15989 601.80824 432.10118 572.76394 522.91815\nTangyan    429.84475 340.39128 242.78233 719.84066 348.84991 201.49393\nNamhsan    472.04024 364.77086 180.09747 754.03913 316.54695 170.90848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   121.78922                                                  \nMongmao    185.99483 247.17708                                        \nNansang    120.24428 201.92690 164.99494                              \nLaukkaing  569.06099 626.44910 404.00848 480.60074                    \nPangsang   205.04337 256.37933  57.60801 193.36162 408.04016          \nNamtu      229.44658 231.78673 365.03882 217.61884 664.06286 392.97391\nMonghpyak  237.67919 356.84917 291.88846 227.52638 565.84279 315.11651\nKonkyan    296.74316 268.25060 281.87425 374.70456 635.92043 274.81900\nMongping   168.92101 140.95392 305.57166 287.36626 708.13447 308.33123\nHopong      62.86179 100.45714 244.16253 167.66291 628.48557 261.51075\nNyaungshwe 169.92664 286.37238 230.45003 131.18943 520.24345 257.77823\nHsihseng   136.54610 153.49551 311.98001 193.53779 670.74564 335.52974\nMongla     373.47509 429.00536 216.24705 289.45119 202.55831 217.88123\nHseni      231.48538 331.22632 184.67099 136.45492 391.74585 214.66375\nKunlong    205.10051 202.31862 224.43391 183.01388 521.88657 258.49342\nHopang     248.72536 317.64824  78.29342 196.47091 331.67199  92.57672\nNamhkan    382.79302 455.10875 223.32205 302.89487 196.46063 231.38484\nKengtung   284.08582 383.72138 207.58055 193.67980 351.48520 229.85484\nLangkho    183.05109 279.52329 134.50170  99.39859 410.41270 167.65920\nMonghsu     58.55724 137.24737 242.43599 153.59962 619.01766 260.52971\nTaunggyi   462.31183 562.88102 387.33906 365.04897 345.98041 405.59730\nPangwaun   298.12447 343.53898 187.40057 326.12960 470.63605 157.48757\nKyethi     195.17677 190.50609 377.89657 273.02385 749.99415 396.89963\nLoilen      98.04789 118.65144 190.26490  94.23028 535.57527 207.94433\nManton     359.60008 317.15603 503.79786 476.55544 907.38406 504.75214\nMongyang   267.10497 312.64797  91.06281 218.49285 326.19219 108.37735\nKunhing     90.77517 165.38834 103.91040 128.20940 500.41640 123.18870\nMongyawng  294.70967 364.40429 296.40789 191.11990 454.80044 336.16703\nTangyan    167.69794 144.59626 347.14183 249.70235 722.40954 364.76893\nNamhsan    194.47928 169.56962 371.71448 294.16284 760.45960 385.65526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  346.57799                                                   \nKonkyan    478.37690 463.39594                                         \nMongping   321.66441 354.76537 242.02901                               \nHopong     206.82668 267.95563 304.49287 134.00139                     \nNyaungshwe 271.41464 103.97300 432.35040 319.32583 209.32532           \nHsihseng   131.89940 285.37627 383.49700 199.64389  91.65458  225.80242\nMongla     483.49434 408.03397 468.09747 512.61580 432.31105  347.60273\nHseni      327.41448 200.26876 448.84563 395.58453 286.41193  130.86310\nKunlong    233.60474 357.44661 329.11433 309.05385 219.06817  285.13095\nHopang     408.24516 304.26577 348.18522 379.27212 309.77356  247.19891\nNamhkan    506.32466 379.50202 481.59596 523.74815 444.13246  333.32428\nKengtung   385.33554 221.47613 474.82621 442.80821 340.47382  177.75714\nLangkho    305.03473 200.27496 386.95022 343.96455 239.63685  128.26577\nMonghsu    209.64684 232.17823 331.72187 158.90478  43.40665  173.82799\nTaunggyi   518.72748 334.17439 650.56905 621.53039 513.76415  325.09619\nPangwaun   517.03554 381.95144 263.97576 340.37881 346.00673  352.92324\nKyethi     186.90932 328.16234 400.10989 187.43974 136.49038  288.06872\nLoilen     194.24075 296.99681 334.19820 231.99959 124.74445  206.40432\nManton     448.58230 502.20840 366.66876 200.48082 310.58885  488.79874\nMongyang   413.26052 358.17599 329.39338 387.80686 323.35704  294.29500\nKunhing    296.43996 250.74435 253.74202 212.59619 145.15617  189.97131\nMongyawng  262.24331 285.56475 522.38580 455.59190 326.59925  218.12104\nTangyan    178.69483 335.26416 367.46064 161.67411 106.82328  284.14692\nNamhsan    240.95555 352.70492 352.20115 130.23777 132.70541  315.91750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     478.66210                                                  \nHseni      312.74375 226.82048                                        \nKunlong    231.85967 346.46200 276.19175                              \nHopang     370.01334 147.02444 162.80878 271.34451                    \nNamhkan    492.09476  77.21355 212.11323 375.73885 146.18632          \nKengtung   370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\nLangkho    276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\nMonghsu     97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\nTaunggyi   528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\nPangwaun   433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\nKyethi      84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\nLoilen     158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\nManton     334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\nMongyang   382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\nKunhing    220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\nMongyawng  309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\nTangyan     70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\nNamhsan    125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    107.16213                                                  \nMonghsu    316.91914 221.84918                                        \nTaunggyi   186.28225 288.27478 486.91951                              \nPangwaun   337.48335 295.38434 343.38498 497.61245                    \nKyethi     444.26274 350.91512 146.61572 599.57407 476.62610          \nLoilen     282.22935 184.10672 131.55208 455.91617 331.69981 232.32965\nManton     631.99123 535.95620 330.76503 803.08034 510.79265 272.03299\nMongyang   217.08047 175.35413 323.95988 374.58247 225.25026 453.86726\nKunhing    245.95083 146.38284 146.78891 429.98509 229.09986 278.95182\nMongyawng  203.87199 186.11584 312.85089 287.73864 475.33116 387.71518\nTangyan    429.95076 332.02048 127.42203 592.65262 447.05580  47.79331\nNamhsan    466.20497 368.20978 153.22576 631.49232 448.58030  68.67929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     419.06087                                                  \nMongyang   246.76592 585.70558                                        \nKunhing    130.39336 410.49230 188.89405                              \nMongyawng  261.75211 629.43339 304.21734 295.35984                    \nTangyan    196.60826 271.82672 421.06366 249.74161 377.52279          \nNamhsan    242.15271 210.48485 450.97869 270.79121 430.02019  63.67613\n\n\n\n\n\nComputing hierarchical clustering\nNumerous R packages include the hierarchical clustering function. The R stats function hclust() will be used in this practical exercise.\nThe cluster was computed using the agglomeration approach by hclust(). There are 8 clustering methods that can be used: ward.D, ward. D2, single, complete, mcquitty (WPGMA), centroid (WPGMC), and average (UPGMA) (UPGMC).\nThe code below uses the ward.D method to do a hierarchical cluster analysis. An object of class hclust, which describes the tree generated by the clustering process, is where the hierarchical clustering output is stored. We can then plot the tree using plot() of R graphics\n\nhclust_ward_d = hclust(proxmat, method=\"ward.D\")\nplot(hclust_ward_d, cex=0.6) #scale down plot to 0.6x in order to see township name\n\n\n\n\n\nSelecting the optimal clustering algorithm\nFinding stronger clustering structures is a challenge when performing hierarchical clustering. Using the agnes() function of the cluster package will address the issue.\nIt performs similar operations to hclus(), but agnes() also provides the agglomerative coefficient, which gauges the degree of clustering structure present\n\nvalues closer to 1 suggest strong clustering structure\n\nAll hierarchical clustering algorithms’ agglomerative coefficients will be calculated using the code below.\n\nm = c(\"average\", \"single\", \"complete\", \"ward\")\nnames(m) = c(\"average\", \"single\", \"complete\", \"ward\")\n\nac = function(y) {\n  agnes(shan_ict, method=y)$ac\n}\n\nmap_dbl(m,ac)\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\nAccording to the results shown above, Ward’s approach offers the greatest clustering structure out of the four examined methods. Consequently, only Ward’s technique will be applied in the analysis that follows.\n\n\n\nDetermining Optimal Clusters\nThe choice of the best clusters to keep is a technical problem for data analysts when undertaking clustering analysis.\nTo identify the ideal clusters, there are 3 widely utilized techniques:\n\nElbow Method\nAverage Silhouette Method\nGap Statistic Method\n\nThe gap statistic contrasts the overall intra-cluster variation for various values of k with the values that would be predicted under a null reference distribution for the data. The value that maximizes the gap statistic will be used to estimate the best clusters (i.e., that yields the largest gap statistic). In other words, the clustering structure is very different from a randomly distributed, uniform distribution of points.\nTo compute the gap statistic, clusGap() of cluster package will be used\n\nset.seed(12345)\ngap_stat = clusGap(shan_ict, FUN=hcut, nstart=25, K.max = 10, B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --> Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\nAlso note that the hcut function used is from factoextra package.\nNext, we can visualise the plot by using fviz_gap_stat() of factoextra package.\n\nfviz_gap_stat(gap_stat)\n\n\n\n\nAccording to the gap statistic graph above, keeping 1 cluster is the optimal quantity. However, keeping only one cluster is illogical. The 6-cluster, which is the largest gap statistic according to the gap statistic graph, should be the next-best cluster to choose.\nIn addition to these widely-used methods, the NbClust package, published by Charrad et al. in 2014, offers 30 indices for figuring out the appropriate number of clusters and suggests to users the best clustering scheme based on the various outcomes obtained by varying different combinations of the number of clusters, distance measures, and clustering methods.\n\nInterpreting the dendrograms\nEach leaf on the dendrogram shown above represents a single observation. As we climb the tree, comparable observations join together to form branches, which are then fused at a higher level.\nThe vertical axis’s display of the height of the fusion shows how similar or unlike two observations are.\nLess similarity exists between the observations as the height of the fusion increases. Be aware that only the height at which the branches comprising the two observations are initially fused can be utilized to determine how close two observations are to one another.\nTwo observations cannot be compared for resemblance based on how close they are to one another along the horizontal axis.\nUsing R stats’ rect.hclust() function, the dendrogram can alternatively be shown with a border around the chosen clusters. The rectangles’ borders can be colored using the option border.\n\nplot(hclust_ward_d, cex=0.6)\nrect.hclust(hclust_ward_d, k = 6, border = 2:5)\n\n\n\n\n\n\n\nVisually-driven hierarchical clustering analysis\nIn this section, we will learn how to perform visually-driven hiearchical clustering analysis by using heatmaply package. With heatmaply, we are able to build both highly interactive cluster heatmap or static cluster heatmap.\n\nTransforming the data frame into a matrix\nAlthough the data was imported into a data frame, a data matrix is required to create a heatmap. The shan_ict data frame will be converted into a data matrix using the code below.\n\nshan_ict_mat = data.matrix(shan_ict)\n\n\n\nPlotting interactive cluster heatmap using heatmaply()\n\nheatmaply(normalize(shan_ict_mat), \n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors=PuRd,\n          k_row = 6,\n          margins= c(NA, 200, 60, NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main = \"Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Township of Shan State'\"\n          \n          )\n\n\n\n\n\n\n\n\nMapping the clusters formed\nFollowing a thorough analysis of the dendragram shown above, we chose to keep six groups. The code below will use R Base’s cutree() function to create a 6-cluster model.\n\ngroups = as.factor(cutree(hclust_ward_d, k=6))\n\nGroups are the output. It is a list object.\nThe groups object needs to be added to the shan_sf simple feature object in order to visualize the clusters.\nThe following code snippet forms the join in 3 steps:\n\nThe object representing the groups list will be transformed into a matrix;\nshan_sf is appended with the groups matrix using cbind() to create the simple feature object shan_sf cluster;\nThe as.matrix.groups column is renamed to CLUSTER using the dplyr package’s rename() function.\n\n\nshan_sf_cluster = cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\nNext we use the tmap functions to plot the cloropleth map showing the clusters\n\n tm_shape(shan_sf_cluster) + \n  tm_polygons(\"CLUSTER\") +\n  tm_borders(alpha = 0.5) \n\n\n\n\n\n\nThe clusters are quite fractured, as shown by the choropleth map above. When non-spatial clustering algorithms like the hierarchical cluster analysis method are used, this is one of the main limitations."
  },
  {
    "objectID": "Hands-on_Ex4/Hands-on_Ex4.html#spatially-constrained-clustering---skater-approach",
    "href": "Hands-on_Ex4/Hands-on_Ex4.html#spatially-constrained-clustering---skater-approach",
    "title": "Hands On Exercise 3.1 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Spatially Constrained Clustering - SKATER approach",
    "text": "Spatially Constrained Clustering - SKATER approach\nWe will discover how to use the skater() method of the spdep package to derive a geographically limited cluster in this section.\n\nConverting into SpatialPolygonsDataFrame\nWe must first transform shan_sf into a spatial polygons data frame. Because only SP objects (SpatialPolygonDataFrame) are supported by the SKATER function, this is.\nThe code below turns shan_sf into a SpatialPolygonDataFrame named shan_sf by using the as_Spatial() function of the sf package.\n\nshan_sp = as_Spatial(shan_sf)\n\n\n\nComputing Neighbour List\nThe neighbours list from the polygon list will then be computed using the poly2nb() function of the spdep package.\n\nshan.nb = poly2nb(shan_sp)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\nWith the help of the code below, we can plot the neighbors list on shan_sp. \nWe plot this graph on top of the map now that we can also plot the community area boundaries. The bounds are given in the first plot command. \nThe plot of the neighbor list object is then displayed, using coordinates to extract the polygon centroids from the original SpatialPolygonDataFrame (Shan state township boundaries). \nThese serve as the nodes in the representation of the graph. In order to plot the network on top of the limits, we additionally specify add=TRUE and set the color to blue.\n\nplot(shan_sp, border=grey(0.6))\n\nplot(shan.nb, coordinates(shan_sp), col=\"blue\", add=TRUE)\n\n\n\n\n\nBe aware that some of the areas will be trimmed if you we plot the network first and then the borders. This is so because the first plot’s attributes determine the plotting area. In this instance, we plot the border map first because it is larger than the graph.\n\n\n\nComputing minimum spanning tree\n\nCalculating edge costs\nThe cost of each edge is determined using nbcosts() from the spdep package. Its nodes are separated by this distance. This function uses a data.frame with observations vectors in each node to calculate the distance.\n\nlcosts = nbcosts(shan.nb, shan_ict)\n\nThis calculates the pairwise dissimilarity between each observation’s values for the five variables and those for its neighboring observation (from the neighbour list). In essence, this is the idea of a generalized weight for a matrix of spatial weights.\nNext, in a manner similar to how we calculated the inverse of distance weights, we will include these costs into a weights object. In other words, we specify the recently computed lcosts as the weights in order to transform the neighbour list into a list weights object.\nThe code below demonstrates how to accomplish this using the nb2listw() function of the spdep package. To ensure that the cost values are not row-standardized, note that we have specified the style as B to use binary weights.\n\nshan.w = nb2listw(shan.nb, lcosts, style=\"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n\n\n\n\nComputing minimum spanning tree\nThe minimum spanning tree is computed by using mstree() of spdep package as shown in the code below. We can check its class and dimensions by using class() and dim()\n\nshan.mst = mstree(shan.w)\nclass(shan.mst)\n\n[1] \"mst\"    \"matrix\"\n\ndim(shan.mst)\n\n[1] 54  3\n\n\nNote that the dimension is 54 and not 55. This is because the minimum spanning tree consists on n-1 edges (links) in order to traverse all nodes.\nWe can display the content of shan.mst by using head()\n\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   31   25 229.44658\n[2,]   25   10 163.95741\n[3,]   10    1 144.02475\n[4,]   10    9 157.04230\n[5,]    9    8  90.82891\n[6,]    8    6 140.01101\n\n\nThe MST plot method includes a mechanism to display the nodes’ observation numbers in addition to the edge. We once again plot these along with the township lines. We can see how the initial neighbor list is condensed to a single edge that passes through every node while linking each one.\n\nplot(shan_sp, border=gray(0.6))\nplot.mst(shan.mst, coordinates(shan_sp), col=\"blue\", \n         cex.lab=0.7, cex.circles=0.05, add=TRUE)\n\n\n\n\n\n\nComputing spatially constrained clusters using SKATER method\nWe can compute the spatially constrained cluster using skater() of the spdep package.\n\nclust6 = skater(edge=shan.mst[,1:2], #1st 2 col of MST\n                data = shan_ict, #data matrix\n                method = \"euclidean\",\n                ncuts = 5 #number of cuts\n                )\n\nRequired inputs for the skater() function. \n\nData matrix (to update the costs while units are being grouped),\nthe number of cuts\nthe first two columns of the MST matrix\n\n\nNote: It is configured to be one less than the total number of clusters.\nAs a result, the value supplied is actually one less than the number of clusters, or the number of cuts in the graph\n\nWe can display the content of the result using str()\n\nstr(clust6)\n\nList of 8\n $ groups      : num [1:55] 3 3 6 3 3 3 3 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 13 48 54 55 45 37 34 16 25 31 ...\n  .. ..$ edge: num [1:21, 1:3] 48 55 54 37 34 16 45 31 13 13 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 47 27 53 38 42 15 41 51 43 32 ...\n  .. ..$ edge: num [1:17, 1:3] 53 15 42 38 41 51 15 27 15 43 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 2 6 8 1 36 4 10 9 46 5 ...\n  .. ..$ edge: num [1:10, 1:3] 6 1 8 36 4 6 8 10 10 9 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 44 20\n  .. ..$ edge: num [1, 1:3] 44 20 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 23\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 3\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\nThe groups vector, which contains the labels of the cluster to which each observation belongs, is the most interesting part of this list structure (as before, the label itself is arbitary). \nThe summary for each of the clusters in the edges.groups list is then provided. To show the impact of each cut on the overall criterion, sum of squares measurements are given as ssto for the total and ssw for each cut individually.\nWe can check the cluster assignment by using the conde chunk below.\n\nccs6 = clust6$groups\nccs6\n\n [1] 3 3 6 3 3 3 3 3 3 3 2 1 1 1 2 1 1 1 2 4 1 2 5 1 1 1 2 1 2 2 1 2 2 1 1 3 1 2\n[39] 2 2 2 2 2 4 1 3 2 1 1 1 2 1 2 1 1\n\n\nUsing the table command, we can determine how many observations are contained in each cluster. Additionally, we can observe that each vector in the lists found in edges.groups has this dimension. For instance, the first list has a node with a dimension of 22, which corresponds to the first cluster’s observation count.\n\ntable(ccs6)\n\nccs6\n 1  2  3  4  5  6 \n22 18 11  2  1  1 \n\n\nFinally, we can also plot the pruned tree that shows the five clusters on top of the townshop area.\n\nplot(shan_sp, border=gray(.5))\nplot(clust6,\n     coordinates(shan_sp),\n     cex.lab=0.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"purple\"),\n     cex.circles=0.005, \n     add=TRUE\n     )\n\n\n\n\n\n\nVisualizing the clusters in choropleth map\nThe code below is used to plot the newly derived clusters by using the SKATER method\n\ngroups_mat = as.matrix(clust6$groups)\nshan_sf_spatialcluster = cbind(shan_sf_cluster, as.factor(groups_mat)) %>% \n  rename(`SP_CLUSTER` = `as.factor.groups_mat.`)\n\ntm_shape(shan_sf_spatialcluster) + \n  tm_fill(\"SP_CLUSTER\") +\n  tm_borders(alpha = 0.5) \n\n\n\n\n\n\nFor easy comparison, it will be better to place both the hierarchical clustering and spatially constrained hierarchical clustering maps next to each other.\n\nhclust.map.df = shan_sf_spatialcluster\nshclust.map.df = shan_sf_spatialcluster\n\nhclust.map = tm_shape(hclust.map.df) + \n  tm_fill(\"CLUSTER\", palette = \"Pastel1\") +\n  tm_borders(alpha = 0.5) \n  \nshclust.map = tm_shape(shclust.map.df) + \n  tm_fill(\"SP_CLUSTER\", palette = \"Pastel1\") +\n  tm_borders(alpha = 0.5) \n  \ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\nhclust.map + shclust.map"
  },
  {
    "objectID": "In-Class_Ex1/In-class_Ex1.html",
    "href": "In-Class_Ex1/In-class_Ex1.html",
    "title": "In Class Exercise 1 - Chp 3 Applications of Spatial Weights",
    "section": "",
    "text": "In Class Exercise 1 - Applications of Spatial Weights, this page describes how to apply spatial weights for geospatial analysis"
  },
  {
    "objectID": "In-Class_Ex1/In-class_Ex1.html#getting-started",
    "href": "In-Class_Ex1/In-class_Ex1.html#getting-started",
    "title": "In Class Exercise 1 - Chp 3 Applications of Spatial Weights",
    "section": "Getting Started",
    "text": "Getting Started\nThe code chunk below install & load knitr, sf, spdep, tmap & tidyverse packages into the R env\n\npacman::p_load(knitr, sf,tidyverse,spdep, tmap)\n\n\nImporting Hunan Geospatial sf\n\nhunan_sf = st_read(dsn=\"data/geospatial\", layer=\"Hunan\")\n\nReading layer `Hunan' from data source \n  `D:\\Allanckw\\ISSS624\\In-Class_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nLoading Hunan 2012 Aspatial File in CSV\n\nhunan_GDP = read_csv(\"data/aspatial/hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "In-Class_Ex1/In-class_Ex1.html#joining-attribute-data-to-the-simple-feature-files",
    "href": "In-Class_Ex1/In-class_Ex1.html#joining-attribute-data-to-the-simple-feature-files",
    "title": "In Class Exercise 1 - Chp 3 Applications of Spatial Weights",
    "section": "Joining attribute data to the simple feature files",
    "text": "Joining attribute data to the simple feature files\nNext, left_join() of dplyr is used to join the geographical data and attribute table\n\nhunan = left_join(hunan_sf, hunan_GDP)\n\nJoining, by = \"County\""
  },
  {
    "objectID": "In-Class_Ex1/In-class_Ex1.html#visualizing-regional-development-indicator",
    "href": "In-Class_Ex1/In-class_Ex1.html#visualizing-regional-development-indicator",
    "title": "In Class Exercise 1 - Chp 3 Applications of Spatial Weights",
    "section": "Visualizing Regional Development Indicator",
    "text": "Visualizing Regional Development Indicator\nUsing the tmap package, we can visualize the distribution of GDPPC 2012\n\nbasemap = tm_shape(hunan) + \n          tm_polygons()\n\ngdppc = tm_shape(hunan) +\n        tm_polygons(\"GDPPC\")\n\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "In-Class_Ex1/In-class_Ex1.html#computing-contiguity-spatial-weights",
    "href": "In-Class_Ex1/In-class_Ex1.html#computing-contiguity-spatial-weights",
    "title": "In Class Exercise 1 - Chp 3 Applications of Spatial Weights",
    "section": "Computing Contiguity Spatial Weights",
    "text": "Computing Contiguity Spatial Weights\nIn this section, the poly2nb() function of the spdep package is used to compute contiguity weight matrices for the study area\n\nThe function builds a neighbour list based on regions with contiguous boundaries, the default of the algorithm uses Queens case, unless explicitly set to false\n\n\nwm_q = poly2nb(hunan)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\nwm_r = poly2nb(hunan, queen = FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nFrom the results, there are 88 regions in Hunan,\nUsing the Queen’s method, 85 of them has 11 neighbours, while only 2 of them has 1 neighbour\nUsing the Rook’s method 85 of them has 10 neighbours, while only 2 of them has 1 neighbour\nTo see neighbours for polygons in the objects, we could reference them like the below for the first polygon:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nFrom the result, we know Polygon 1 has 5 neighbours, the numbers represents the polygon IDs of the respective neighbours stored in the hunan SpatialPolygonsDataFrame class\nWe can retrieve the county name of polygon ID 1 by using\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nTo reveal the names of the 5 neighbours, we can use\n\nhunan$County[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nTo reveal the GDPPC of these 5 counties, we can use\n\nnb1 = wm_q[[1]] \nnb1 = hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe result displays the 5 nearest neighbours based on Queen’s method\nThe complete weight matrix can be displayed by using the str() function\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE"
  },
  {
    "objectID": "In-Class_Ex1/In-class_Ex1.html#visualizing-contiguity-weights",
    "href": "In-Class_Ex1/In-class_Ex1.html#visualizing-contiguity-weights",
    "title": "In Class Exercise 1 - Chp 3 Applications of Spatial Weights",
    "section": "Visualizing contiguity weights",
    "text": "Visualizing contiguity weights\nIn a connectivity graph, each point’s neighbouring points are represented by a line. As the exercise is focused on  polygons, points needs to be created before we can build connectivity graphs. Polygon centroids will be the mechanism used for this purpose. \n\nGetting Latitude and Longitude of Polygon Centroids\nBefore we can create the connectivity graph, we must assign points to each polygon.  For this to function, we need the coordinates in a separate data frame. We’ll utilize a mapping function to accomplish this. The mapping function creates a vector of identical length by applying a specified function to each element of a vector. We will use the geometry column of us.bound as our input vector. \nst_centroid from the sf package & map_dblfrom the purrr package will be used to accomplish this. We can map the st_centroid function over the geometry column us.bounds to obtain our required values.\n\nThe longitude is the first variable in each centroid, this enables us to obtain only the longitude.\nThe latitude is the second variable in each centroid, this enables us to obtain only the latitude\nUsing the double bracket notation [[]] and the index, we can access the latitude & longitude values.\n\nlongitude = map_dbl(hunan$geometry, ~st_centroid(.x)[[1]]) #longitude index 1\nlatitude = map_dbl(hunan$geometry, ~st_centroid(.x)[[2]]) #latitude index 2\n\nAfter getting the longitude and latitudes, we can form the coordinates object named coord using cbind\nUsing the head function, we can inspect the elements of coord to verify if they are correctly formatted\n\ncoord = cbind(longitude, latitude)\nhead(coord)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n\n\nPlotting Queen contiguity based neighbours map\nWe can now plot the contiguity graph with our coord object\n\nUsing Queen’s method with wm_q\n\nplot(hunan$geometry, border=\"lightblue\")\nplot(wm_q, coord, pch = 19, cex = 0.6, add = TRUE, col= \"black\")\n\n\n\n\n\n\nUsing Rook’s Method with wm_r\n\nplot(hunan$geometry, border=\"lightblue\")\nplot(wm_r, coord, pch = 19, cex = 0.6, add = TRUE, col= \"black\")\n\n\n\n\n\n\nPlotting both Rook’s & Queen’s method\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightblue\")\nplot(wm_r, coord, pch = 19, cex = 0.6, add = TRUE, col= \"black\")\nplot(hunan$geometry, border=\"lightblue\")\nplot(wm_q, coord, pch = 19, cex = 0.6, add = TRUE, col= \"black\")"
  },
  {
    "objectID": "In-Class_Ex1/In-class_Ex1.html#computing-distance-based-neighbours",
    "href": "In-Class_Ex1/In-class_Ex1.html#computing-distance-based-neighbours",
    "title": "In Class Exercise 1 - Chp 3 Applications of Spatial Weights",
    "section": "Computing distance based neighbours",
    "text": "Computing distance based neighbours\nWith the use of Neighbourhood contiguity by distance - dnearneigh() of spdep package, we can determine the distance based weight matrix.\nThe function looks for neighbours of regions points by Euclidean distance between the lower (>=) and upper (<=) bound or with the parameter longlat = True by great circle distance in km\n\nFind the lower and upper bounds\n\nUsing the k nearest neighbour (knn) algorithm, we can return a matrix with indices of points that belongs to the set of k nearest neighbours of each others by using knearneigh() of spdep\nConvert the knn objects into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb()\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the return objects by using unlist()\n\n\nk1 = knn2nb(knearneigh(coord)) #returns a list of nb objects from the result of k nearest neighbours matrix, Step 1 & 2\nk1dist = unlist(nbdists(k1, coord, longlat = TRUE)) #return the length of neighbour relationship edges and remove the list structures, Step 3 & 4\nsummary(k1dist)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nFrom the result, the largest first nearest neighbour is 61.79km, hence by using this as the upper bound, we can be certain that all units will have at least 1 neighbour\n\n\nFinding the fixed distanced weight matrix\ndnearneigh will be used to compute the distance weight matrix\n\nwm_d62 = dnearneigh(coord, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nThe average number of links denotes the number of non zero links divided by the number of regions. In this case, a region has about on average between 3-4 neighbours\nNext, we will use str() to display the content of wm_d62 weight matrix.\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coord, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAnother way to display the structure of the weight matrix is to combine table() and card() of spdep.\n\nThe card() function counts the neighboring regions in the neighbours list.\ntable() creates a contingency table of the counts for each combination of factor levels using cross-classifying factors.\n\n\ncardinality = card(wm_d62)\ntable(hunan$County, cardinality) \n\n               cardinality\n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\nn.comp.nb() finds the number of disjoint connected subgraphs in the graph depicted by nb.obj - a spatial neighbours list object using depth first search\n\nn_comp = n.comp.nb(wm_d62)\n\nIt returns\n\nnc: number of disjoint connected subgraphs\ncomp.id: vector with the indices of the disjoint connected subgraphs that the nodes in nb.obj belong to, in this case the distance weight matrix\n\n\nn_comp$nc\n\n[1] 1\n\n#n_comp$comp.id\ntable(n_comp$comp.id)\n\n\n 1 \n88"
  },
  {
    "objectID": "In-Class_Ex1/In-class_Ex1.html#plotting-fixed-distance-weight-matrix",
    "href": "In-Class_Ex1/In-class_Ex1.html#plotting-fixed-distance-weight-matrix",
    "title": "In Class Exercise 1 - Chp 3 Applications of Spatial Weights",
    "section": "Plotting fixed distance weight matrix",
    "text": "Plotting fixed distance weight matrix\nWe can plot the distance weight matrix by using the code below.\n\nplot(hunan$geometry, border=\"lightblue\")\nplot(wm_d62, coord, add=TRUE)\nplot(k1, coord, add=TRUE, col=\"red\", length = 0.1)\n\n\n\n\n\nThe black lines show the links of neighbours within the cut-off distance of 62km.\nThe red lines show the links of 1st nearest neighbours\n\nAlternatively, we can plot both of them next to each other with the code below.\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightblue\")\nplot(wm_d62, coord, add=TRUE)\nplot(hunan$geometry, border=\"lightblue\")\nplot(k1, coord, add=TRUE, col=\"red\", length = 0.1)"
  },
  {
    "objectID": "In-Class_Ex1/In-class_Ex1.html#computing-adaptive-distance-weight-matrix",
    "href": "In-Class_Ex1/In-class_Ex1.html#computing-adaptive-distance-weight-matrix",
    "title": "In Class Exercise 1 - Chp 3 Applications of Spatial Weights",
    "section": "Computing adaptive distance weight matrix",
    "text": "Computing adaptive distance weight matrix\nThe fixed distance weight matrix has the property that locations with higher densities of habitation (often urban areas) tend to have more neighbours, whereas areas with lower densities (typically rural areas) tend to have fewer neighbours.\nBy enforcing symmetry or accepting asymmetric neighbours, as shown in the code below, it is possible to control the number of neighbours of each region using the knn algorithm.\n\nknn6 = knn2nb(knearneigh(coord, k=6))\n\nSimilarly, we can display the content of the matrix by using str()\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coord, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\n\nPlotting distance based neighbours\n\nplot(hunan$geometry, border=\"lightblue\")\nplot(knn6, coord, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "In-Class_Ex1/In-class_Ex1.html#weights-based-on-inverse-distance-methods",
    "href": "In-Class_Ex1/In-class_Ex1.html#weights-based-on-inverse-distance-methods",
    "title": "In Class Exercise 1 - Chp 3 Applications of Spatial Weights",
    "section": "Weights based on Inverse distance methods",
    "text": "Weights based on Inverse distance methods\nWe will need to compute the distances between areas using nbdists() of spdep package\n\ndist = nbdists(wm_q, coord, longlat=TRUE)\nids = lapply(dist, function(x) 1/ (x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\nRow standardize Weight Matrix\nThe nb2listw function adds spatial weights for the selected coding scheme to a neighbours list. It’s possible to determine whether a spatial weights object is similar to symmetric and can be transformed in this way to produce real eigenvalues or for Cholesky decomposition.\nThere are a number of Styles to choose from (Bivand, n.d)\n\nB is the basic binary coding,\nW is row standardised (sums over all links to n),\nC is globally standardised (sums over all links to n),\nU is equal to C divided by the number of neighbours (sums over all links to unity),\nS is the variance-stabilizing coding scheme\n\nFor this example, we’ll stick with the style=“W” option for simplicity’s but note that other more robust options are available, notably style=“B”, basic binary coding.\n\nrswm_q = nb2listw(wm_q, style=\"W\", zero.policy=TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nLists of non-neighbours are possible with the zero.policy=TRUE option.\nA zero.policy of FALSE would return an error, however this should be used carefully as the user might not be aware of missing neighbors in their dataset.\nTo view the weight of the first polygon’s 10 neighbour types, we can use the code below\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nEach neighbor is assigned a 0.125 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.125 before being tallied.\nUsing the same method, we can also derive a row standardized distance weight matrix by using the code below.\n\nrswm_ids <- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "In-Class_Ex1/In-class_Ex1.html#application-of-spatial-weight-matrix",
    "href": "In-Class_Ex1/In-class_Ex1.html#application-of-spatial-weight-matrix",
    "title": "In Class Exercise 1 - Chp 3 Applications of Spatial Weights",
    "section": "Application of Spatial Weight Matrix",
    "text": "Application of Spatial Weight Matrix\nIn this section, 4 different spatial lagged variables are discussed, they are:\n\nspatial lag with row-standardized weights,\nspatial lag as a sum of neighbouring values,\nspatial window average,\nspatial window sum.\n\n\n1. Spatial lag with row-standardized weights\nFirst, Compute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values. We use lag.listw to compute the Spatial lag of a numeric vector\n\ngdppc.lag = lag.listw(rswm_q, hunan$GDPPC)\ngdppc.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nUsing the code below, we can append the spatially lag GDPPC values to the Hunan sf data frame.\n\nlag.list = list(hunan$County, gdppc.lag) #lag.listw(rswm_q, hunan$GDPPC)\nlag.res = as.data.frame(lag.list)\ncolnames(lag.res) = c(\"County\", \"lag GDPPC\")\nhunan = left_join(hunan, lag.res)\n\nJoining, by = \"County\"\n\nhead(hunan)\n\nSimple feature collection with 6 features and 36 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County    City\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang Changde\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou Changde\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi Changde\n4 Changde 21102      Li      County   3.474325 0.18908121      Li Changde\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli Changde\n6 Changde 21104  Shimen      County   4.171918 0.37194707  Shimen Changde\n  avg_wage deposite     FAI Gov_Rev Gov_Exp     GDP GDPPC     GIO   Loan  NIPCR\n1    31935   5517.2  3541.0  243.64  1779.5 12482.0 23667  5108.9 2806.9 7693.7\n2    32265   7979.0  8665.0  386.13  2062.4 15788.0 20981 13491.0 4550.0 8269.9\n3    28692   4581.7  4777.0  373.31  1148.4  8706.9 34592 10935.0 2242.0 8169.9\n4    32541  13487.0 16066.0  709.61  2459.5 20322.0 24473 18402.0 6748.0 8377.0\n5    32667    564.1  7781.2  336.86  1538.7 10355.0 25554  8214.0  358.0 8143.1\n6    33261   8334.4 10531.0  548.33  2178.8 16293.0 27137 17795.0 6026.5 6156.0\n   Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household Household_R NOIP Pop_R\n1 1931 336.39 270.5 205.9  19.584  17.819     148.1       135.4   53 346.0\n2 2560 456.78 388.8 246.7  42.097  33.029     240.2       208.7   95 553.2\n3  848 122.78  82.1  61.7   8.723   7.592      81.9        43.7   77  92.4\n4 2038 513.44 426.8 227.1  38.975  33.938     268.5       256.0   96 539.7\n5 1440 307.36 272.2 100.8  23.286  18.943     129.1       157.2   99 246.6\n6 2502 392.05 329.6 193.8  29.245  26.104     190.6       184.7  122 399.2\n    RSCG Pop_T    Agri Service Disp_Inc      RORP    ROREmp lag GDPPC\n1 3957.9 528.3 4524.41   14100    16610 0.6549309 0.8041262  24847.20\n2 4460.5 804.6 6545.35   17727    18925 0.6875466 0.8511756  22724.80\n3 3683.0 251.8 2562.46    7525    19498 0.3669579 0.6686757  24143.25\n4 7110.2 832.5 7562.34   53160    18985 0.6482883 0.8312558  27737.50\n5 3604.9 409.3 3583.91    7031    18604 0.6024921 0.8856065  27270.25\n6 6490.7 600.5 5266.51    6981    19275 0.6647794 0.8407091  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nWe can plot the GDPPC and spatial lag GDPPC for comparison using the code below\n\nlag_gdppc = tm_shape(hunan) +\n        tm_polygons(\"lag GDPPC\")\n\ntmap_arrange(gdppc, lag_gdppc)\n\n\n\n\n\n\n2 Spatial lag as a sum of neighboring values\nAnother way to compute spatial lag as a sum of neigbouring values is by assigning binary weights.\nGoing back to the neighbours list wm_q, we can apply a function that will assign binary weights by using lapply, and use nb2listw to assign the weights, using the glist parameter to explicitly assign these wieghts\n\nb_weights = lapply(wm_q, function(x) 0*x + 1)\nb_weights2 = nb2listw(wm_q, glist = b_weights, style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nAfter the weight have been assigned, we can use lag.listw to calculate the lag variable from our weights and GDPPC\n\nlag_sum = list(hunan$County, lag.listw(b_weights2, hunan$GDPPC))\nlag.res = as.data.frame(lag_sum)\ncolnames(lag.res) = c(\"County\", \"lag_sum GDPPC\")\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nExamining the result of the lag_sum, the first value of lag_sum is 124236, comparing it with the value in gdppc.lag discussed in Spatial lag with row-standardized weights, the first value was 24847.20.\nIt can be observed that a weight of 5 has been multiplied. In our earlier discussion, we know that Anxiang has 5 neighbours. Hence, we can conclude that the spatial lag sum method will multiply the result of Spatial lag with row-standardized weights by the number of neighbours in a region.\nUsing the code below, we can append the spatial lag sum GDPPC values to the Hunan sf data frame.\n\nhunan = left_join(hunan, lag.res)\n\nJoining, by = \"County\"\n\n\nWe can plot the GDPPC and spatial lag GDPPC for comparison using the code below\n\nlag_sum_gdppc = tm_shape(hunan) +\n        tm_polygons(\"lag_sum GDPPC\")\n\ntmap_arrange(gdppc, lag_sum_gdppc)\n\n\n\n\n\n\n3 Spatial window average\nThe diagonal component is included in the spatial window average, which uses weights that are standardized by row.\nBefore allocating weights in R, we must return to the neighbours structure and add the diagonal element, the include.self() method from spdep package is used to accomplish that\n\nwm_q_w_diagonal = wm_q\nwm_q_w_diagonal = include.self(wm_q_w_diagonal)\nwm_q_w_diagonal[[1]]\n\n[1]  1  2  3  4 57 85\n\n\nWe will then use nb2listw() to create the weight variable and lag.listw() create the lag variable from the weight structure and GDPPC variable\n\nwm_q_w_diagonal = nb2listw(wm_q_w_diagonal) #compute the weights\nlag_w_avg_gdppc = lag.listw(wm_q_w_diagonal, hunan$GDPPC)\nlag_w_avg_gdppc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame()\n\nlag.list.winavg = list(hunan$County, lag.listw(wm_q_w_diagonal, hunan$GDPPC))\nlag.list.winavg.res = as.data.frame(lag.list.winavg)\ncolnames(lag.list.winavg.res) = c(\"County\", \"lag_window_avg GDPPC\")\n\nUsing the code below, we can append the spatial window average GDPPC values to the Hunan sf data frame.\n\nhunan = left_join(hunan, lag.list.winavg.res)\n\nJoining, by = \"County\"\n\n\nWe can plot the GDPPC and window average GDPPC for comparison using the code below\n\nwin_avg_gdppc = tm_shape(hunan) +\n        tm_polygons(\"lag_window_avg GDPPC\")\n\ntmap_arrange(gdppc, win_avg_gdppc)\n\n\n\n\nTo compare the values of lag GDPPC and spatial window average kable() of the Knitr package is used\n\nhunan %>% select (\"County\", \"lag GDPPC\", \"lag_window_avg GDPPC\") %>%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\n\n\n4 Spatial window sum\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\nTo do this we assign binary weights to the neighbour structure that includes the diagonal element, similar to the one done in Spatial lag as a sum of neighboring values\n\nwm_q_w_diagonal = wm_q\nwm_q_w_diagonal = include.self(wm_q_w_diagonal)\nb_weights_winsum = lapply(wm_q_w_diagonal, function(x) 0*x + 1)\nb_weights_winsum[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nSimilar to the one done in Spatial lag as a sum of neighboring values, we use nb2listw() and glist parameter to explicitly assign weight values.\n\nb_weights_winsum2 = nb2listw(wm_q_w_diagonal, glist=b_weights_winsum, style=\"B\")\nb_weights_winsum2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nWith the new weight structure, the new lag variable can be derived by using lag.listw()\n\nw_sum_gdppc = list(hunan$County, lag.listw(b_weights_winsum2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame()\n\nw_sum_gdppc.res = as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) = c(\"County\", \"w_sum GDPPC\")\n\nUsing the code below, we can append the spatial window sum GDPPC values to the Hunan sf data frame.\n\nhunan = left_join(hunan, w_sum_gdppc.res)\n\nJoining, by = \"County\"\n\n\nTo compare the values of lag GDPPC and spatial window average kable() of the Knitr package is used\n\nhunan %>% select (\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %>%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nWe can plot the GDPPC and window sum GDPPC for comparison using the code below\n\nwin_sum_gdppc = tm_shape(hunan) +\n        tm_polygons(\"w_sum GDPPC\")\n\ntmap_arrange(gdppc, win_sum_gdppc)"
  },
  {
    "objectID": "In-Class_Ex1/In-class_Ex1.html#reference",
    "href": "In-Class_Ex1/In-class_Ex1.html#reference",
    "title": "In Class Exercise 1 - Chp 3 Applications of Spatial Weights",
    "section": "Reference",
    "text": "Reference\nKam T.S (2022), R for Geospatial Data Science and Analytics, Chapter 3 Spatial Weights and Applications\nhttps://r4gdsa.netlify.app/chap03.html\nBivand R (n.d) Spatial weights for neighbours lists\nhttps://r-spatial.github.io/spdep/reference/nb2listw.html"
  },
  {
    "objectID": "In-Class_Ex2/In-class_Ex2.html",
    "href": "In-Class_Ex2/In-class_Ex2.html",
    "title": "In class Exercise 1 - Do functionally similar water points positively co-occur in Nigeria?",
    "section": "",
    "text": "For humanity, water is a valuable resource. To maintain good health, people need access to clean water. It guarantees peace and security, creates a healthy environment, and supports a sustainable economy. However, there is insufficient clean water for more than 40% of the world’s population. UN-Water predicts that by 2025, 1.8 billion people would reside in areas with a complete water shortage. Food security is one of the many areas that are seriously threatened by the water crisis. About 70% of the freshwater that is available on Earth is used for agriculture.\nWater scarcities and poor water quality are worst in developing nations. Inadequate water and sanitation systems are a contributing factor in up to 80% of diseases in impoverished countries.\nDespite technological advancements, supplying clean water to rural communities remains a significant development challenge in many nations worldwide, particularly in those of the continent of Africa.\nIn this study, appropriate global and local measures of spatial Association techniques will be employed to reveal the spatial patterns of Non Functional water points. In this assignment, we will investigate Nigeria’s Local Government Area (LGA)"
  },
  {
    "objectID": "In-Class_Ex2/In-class_Ex2.html#getting-started",
    "href": "In-Class_Ex2/In-class_Ex2.html#getting-started",
    "title": "In class Exercise 1 - Do functionally similar water points positively co-occur in Nigeria?",
    "section": "Getting Started",
    "text": "Getting Started\nFirst, the required packages are loaded into the R environment . The required packages are sf, tidyverse, spdep, tmap, & funModeling\nwith the code below:\n\npacman::p_load(sf, tidyverse, spdep, tmap, funModeling)\n\n\nSpatial Data\nThe spatial dataset used in this assignment is the Nigeria Level-2 Administrative Boundary spatial dataset downloaded from Center for Humanitarian Data - Nigeria - Subnational Administrative Boundaries\nWe will load the spatial features by using st_read() from the sf package\nAs the data we want is in WSG-84 format, we set crs to 4326.\nTo perform the intersect function later to combine the water points data, we will not use st_transform() as it may produce outputs with missing points post transformation, which will distort our analysis.\n\nnga = st_read(dsn = \"data/geospatial\",\n               layer = \"nga_admbnda_adm2_osgof_20190417\",\n               crs = 4326)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `D:\\Allanckw\\ISSS624\\In-Class_Ex2\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n#nigeria_lga_sf = st_transform(nigeria_lga_sf, crs=4326) cause missing points\n\nWe could use st_crs()to verify the coordinate system from the object.\n\nst_crs(nga)\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\nAt the end, we can examine how the base map looks like by using the tmap package\n\ntm_shape(nga) + \n  \n  tm_borders(alpha=0.5) + \n  tm_compass(type=\"8star\", size=2) +\n  tm_scale_bar() +\n  tm_grid (alpha=0.2) +\n  tm_layout(main.title=\"Map of Nigeria LGA\", \n            main.title.position=\"center\", \n            main.title.size=1.2, \n            legend.height = 0.35, \n            legend.width = 0.35, \n            frame = TRUE) \n\n\n\n\nAs the map is really big with close to 800 polygons involved, we will change the tmap mode to interactive viewing by calling ttm() in tmap package, otherwise, it will too small for any form of analysis\n\nttm()\n\n\n\nAspatial Data\n\nCleaning the Data\nThe aspatial dataset used in this assignment is the water point data exchange dataset found in WPdx Global Data Repositories. Data is filtered on the web portal to only keep Nigeria and the file is saved as NigeriaWaterPoints_Raw.csv\nAs we are only interested in the functionality of the water point, it is important to capture fields that may affect the functionality\n\nLGA: The area we are interested in\nState: The state of the LGA of Nigeria\nFunctional: Whether it is functional or not\nmanagement: who manages it?\nQuality: what is the quality?\nWater Source Category: where the water came from?\nWater Tech Category: What technology is used?\nlatitude\nlongitude\n\nTo load the raw data file, we use the read_csv function\n\nwpdx_raw = read_csv(\"data/aspatial/NigeriaWaterPoints_Raw.csv\") \n\nMost of the columns are irrelevant, so we will perform the following:\n\nkeep the columns we want to clean it up by specifying the columns with one to retain with subset\nrenaming the columns using rename_with\nReplace all the NA with unknown for columns with NA value present\n\n\nretain_cols = c('#clean_adm2', '#clean_adm1', '#status_clean', '#management_clean', '#subjective_quality', '#fecal_coliform_presence', '#water_source_category', '#water_tech_category', '#lat_deg', '#lon_deg' )\n\nnew_col_names = c('LGA', 'State', 'Functional', 'Management', 'Quality', 'presence_of_fecal_coliform', 'Water_Source_Category', 'Water_Tech_Category', 'latitude', 'longitude')\n\nwpdx_clean = subset(wpdx_raw, select = (names(wpdx_raw) %in% retain_cols)) %>%  rename_with(~ new_col_names, all_of(retain_cols)) %>% \nreplace_na(list(Functional = \"Unknown\", Management = \"Unknown\", Quality = \"Unknown\", Water_Source_Category = \"Unknown\", Water_Tech_Category = \"Unknown\"))\n\nWe save the clean file with saveRDS(), the file will be reduced to 1.6MB from the 144MB raw file that we downloaded.\n\nsaveRDS(wpdx_clean, \"data/aspatial/wpdx_clean.rds\")\n\nWe can then delete the raw file from the project and retrieve the saved RDS file using readRDS()\n\nwpdx_clean = readRDS(\"data/aspatial/wpdx_clean.rds\")\n\n\n\nConverting csv data into spatial features\nWe can use st_as_sfto create a dataframe from the longitude (x) and latitude (y) values. The EPSG 4326 code is used as the dataset is referencing WGS84 geographic coordinate system. We could use st_crs()to verify the coordinate system from the object.\n\nwpdx_clean_sf = st_as_sf(wpdx_clean, coords = c(\"longitude\", \"latitude\"), crs=4326)\nst_crs(wpdx_clean_sf)\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\nWe can then use glimpse() to verify each field’s data type & available values.\nThe results shows that the longitude and latitude values have been converted to a geometry object consisting of the longitude and latitude values as points, with both columns now dropped.\n\nglimpse(wpdx_clean_sf)\n\nRows: 95,008\nColumns: 8\n$ Water_Source_Category <chr> \"Unknown\", \"Well\", \"Well\", \"Well\", \"Well\", \"Well…\n$ Water_Tech_Category   <chr> \"Tapstand\", \"Mechanized Pump\", \"Hand Pump\", \"Unk…\n$ State                 <chr> \"Ekiti\", \"Ogun\", \"Ebonyi\", \"Enugu\", \"Enugu\", \"Be…\n$ LGA                   <chr> \"Moba\", \"Obafemi-Owode\", \"Ohaukwu\", \"Isi-Uzo\", \"…\n$ Management            <chr> \"Unknown\", \"Other\", \"Unknown\", \"Unknown\", \"Unkno…\n$ Functional            <chr> \"Unknown\", \"Functional\", \"Unknown\", \"Unknown\", \"…\n$ Quality               <chr> \"Unknown\", \"Acceptable quality\", \"Unknown\", \"Unk…\n$ geometry              <POINT [°]> POINT (5.12 7.98), POINT (3.597668 6.96453…\n\n\n\n\nAggregate the Data\nThe code below uses freq() of the funModeling package to display the distribution of functional field in wpdx_clean_sf\n\nfreq(data=wpdx_clean_sf, input = 'Functional')\n\n\n\n\n                        Functional frequency percentage cumulative_perc\n1                       Functional     45883      48.29           48.29\n2                   Non-Functional     29385      30.93           79.22\n3                          Unknown     10656      11.22           90.44\n4      Functional but needs repair      4579       4.82           95.26\n5 Non-Functional due to dry season      2403       2.53           97.79\n6        Functional but not in use      1686       1.77           99.56\n7         Abandoned/Decommissioned       234       0.25           99.81\n8                        Abandoned       175       0.18           99.99\n9 Non functional due to dry season         7       0.01          100.00\n\n\nAfter finding its classification, we will need to aggregate them into functional, non functional and unknown. We will create new data frames to store them by using the filter function\n\nfunc_list = c(\"Functional\", \"Functional but needs repair\", \"Functional but not in use\")\nwpt_functional = wpdx_clean_sf %>%\n  filter(Functional %in% func_list)\n\nwpt_non_functional = wpdx_clean_sf %>%\n  filter(!Functional %in% c(func_list, \"Unknown\"))\n\nwpt_unknown = wpdx_clean_sf %>%\n  filter(Functional %in% \"Unknown\")\n\nWe can use st_intersects() to find common data points between geographical datasets. In our case we need to find the common points in the Nigeria’s LGA spatial dataset and the water point aspatial dataset\nThe below code does 4 things\n\nIt intersects the Nigeria LGA dataset (nga dataframe) with the water point dataset (wpdx_clean_sf dataframe) and produce a new column to denote the total number of water points in the area (Total wpt).\nThe result of 1 is piped to add 3 columns to denote the number of functional, non functional and unknown water points in the area to produce wpt functional, wpt non functional and wpt unknown respectively\nWe will also add 2 new columns to find the percentage of functional and non functional water points\nSelect appropriate columns required which are the LGA area and LGA code (Column 3 & 4), Administration Level 1 Area and Administration Level 1 Code (Column 9 & 10), the columns that were added as explained in steps 2 & 3 and the geometry multipolygon objects (Column 18 to 23).\n\n\nnga_wp = nga %>% \n  #combine nga with water point sf\n  mutate(`total wpt` = lengths(\n    st_intersects(nga, wpdx_clean_sf))) %>%\n  #add columns to produce no. of functional, non functional and unknown points\n  mutate(`wpt functional` = lengths(\n    st_intersects(nga, wpt_functional))) %>%\n  mutate(`wpt non functional` = lengths(\n    st_intersects(nga, wpt_non_functional))) %>%\n  mutate(`wpt unknown` = lengths(\n    st_intersects(nga, wpt_unknown))) %>%\n  #add columns to compute %\n  mutate(pct_functional = `wpt functional`/`total wpt`) %>%\n  mutate(`pct_non-functional` = `wpt non functional`/`total wpt`) %>%\n  select(3:4, 9:10, 18:23)"
  },
  {
    "objectID": "In-Class_Ex2/In-class_Ex2.html#visualizing-the-spatial-distribution-of-water-points",
    "href": "In-Class_Ex2/In-class_Ex2.html#visualizing-the-spatial-distribution-of-water-points",
    "title": "In class Exercise 1 - Do functionally similar water points positively co-occur in Nigeria?",
    "section": "Visualizing the spatial distribution of water points",
    "text": "Visualizing the spatial distribution of water points\nWe can find breaks of the respective distributions by using the summary statistics using percentiles, this is to help us find out the distribution of water points in each quantile.\n\nsummary(nga_wp$`total wpt`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    0.0    45.0    96.0   122.7   168.8   894.0 \n\nsummary(nga_wp$`wpt functional`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00   17.00   45.50   67.36   87.75  752.00 \n\nsummary(nga_wp$`wpt non functional`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00   12.25   34.00   41.60   60.75  278.00 \n\nsummary(nga_wp$`wpt unknown`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    0.00   13.76   17.75  219.00 \n\n\nFunctions from the tmap packages is used to produce the map\n\nwp_total = tm_shape(nga_wp) + \n  tm_fill(\"total wpt\", \n          palette =\"Reds\", breaks = c(0, 45, 96, 168, 894)) + \n  tm_borders(alpha=0.5) + \n  #tm_compass(type=\"8star\", size=2) +\n  #tm_scale_bar() +\n  tm_grid (alpha=0.2) +\n  tm_layout(main.title=\"Total WP\", \n            main.title.position=\"center\", \n            main.title.size=1.2, \n            legend.height = 0.35, \n            legend.width = 0.35, \n            frame = TRUE) \n\nwp_functional = tm_shape(nga_wp) + \n  tm_fill(\"wpt functional\", \n          palette =\"Reds\", breaks = c(0, 17, 46, 88, 752)) + \n  tm_borders(alpha=0.5) + \n  #tm_compass(type=\"8star\", size=2) +\n  #tm_scale_bar() +\n  tm_grid (alpha=0.2) +\n  tm_layout(main.title=\"functional WP\", \n            main.title.position=\"center\", \n            main.title.size=1.2, \n            legend.height = 0.35, \n            legend.width = 0.35, \n            frame = TRUE) \n\nwp_nonfunctional = tm_shape(nga_wp) + \n  tm_fill(\"wpt non functional\", \n          palette =\"Reds\", breaks = c(0, 13, 34, 42, 61, 278)) + \n  tm_borders(alpha=0.5) + \n  #tm_compass(type=\"8star\", size=2) +\n  #tm_scale_bar() +\n  tm_grid (alpha=0.2) +\n  tm_layout(main.title=\"non functional WP\", \n            main.title.position=\"center\", \n            main.title.size=1.2, \n            legend.height = 0.35, \n            legend.width = 0.35, \n            frame = TRUE) \n\nwp_Unknown = tm_shape(nga_wp) + \n  tm_fill(\"wpt unknown\", \n          palette =\"Reds\", breaks = c(0, 14, 18, 219)) + \n  tm_borders(alpha=0.5) + \n  #tm_compass(type=\"8star\", size=2) +\n  #tm_scale_bar() +\n  tm_grid (alpha=0.2) +\n  tm_layout(main.title=\"unknown status\", \n            main.title.position=\"center\", \n            main.title.size=1.2, \n            legend.height = 0.35, \n            legend.width = 0.35, \n            frame = TRUE) \n\nFinally, we will use the tmap_arrange() method to create a 2x2 matrix to display the maps\n\ntmap_arrange(wp_functional, wp_nonfunctional, wp_Unknown, wp_total, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\nIn order to make observations, lets first divide the map into 6 sectors for easy reference\nSector 1 will be from (2, 10) to (4, 12), Sector 2 will be from (6, 10) to (8, 12),\nSector 3 will be from (10, 10) to (14, 12), Sector 4 will be from (2, 4) to (4, 10),\nSector 5 will be from (6, 4) to (8,10) and lastly sector 6 from (10, 4) to (14, 8)\n\n\n\nFigure 1: Sectoral Division of Map Of Nigeria LGA\n\n\nThe following observations can be made:\n\nFrom the wp_functional map, it can be seen that the number of functional water points that is in the upper quantile tend to congregate in Sector 2 and the parts of sector 4 between (5, 8) and (6, 10)\nFrom the wp_nonfunctional map, it can be seen that the most of the non functional water points in the upper quantile tend to congregate the following areas: In Sector 4 in (4, 8), Sector 5 in (8, 6) and Sector 6 between (10, 6) and (10, 8), and stretching to sector 3 all the way to (10, 10)\nFrom the wp_Unknown map, it can be seen that the most of the water points with unknown status in the upper quantile congregate in Sector 4 between (2, 6) and (4, 6), in Sector 5 between (6, 4) and (8, 4) and in (8, 8) and in sector 6 between (10, 6) and (10, 8).\nFrom the wp_total map, it can be seen that most of the water points regardless of status, its upper quantile congregate in sector 5 between (8, 4) and (8,6) and in sector 6 between (10, 6) and (10, 8)\nFrom the wp_total map, it can also be seen that in the areas (8, 12), (10, 12) and (12, 12), there are sometimes no water point at all or very few of them."
  },
  {
    "objectID": "In-Class_Ex3/In-Class_Ex3.html",
    "href": "In-Class_Ex3/In-Class_Ex3.html",
    "title": "Hands On Exercise 3.1 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "In this hands-on exercise, we are interested to delineate Shan State, Myanmar into homogeneous regions by using multiple Information and Communication technology (ICT) measures, namely: Radio, Television, Land line phone, Mobile phone, Computer, and Internet at home.\nThis is a continuation from Hands On Exercise 4: Skip to"
  },
  {
    "objectID": "In-Class_Ex3/In-Class_Ex3.html#getting-started",
    "href": "In-Class_Ex3/In-Class_Ex3.html#getting-started",
    "title": "Hands On Exercise 3.1 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Getting Started",
    "text": "Getting Started\nFirstly, we load the required packages in R\n\nSpatial data handling\n\nsf, rgdal and spdep\n\nAttribute data handling\n\nknitr, tidyverse, funModeling especially readr, ggplot2 and dplyr\n\nChoropleth mapping\n\ntmap\n\nMultivariate data visualization and analysis\n\ncoorplot, ggpubr, and heatmaply\n\nCluster analysis\n\ncluster\nClustGeo\n\n\n\npacman::p_load(knitr, rgdal, spdep, tmap, sf, \n               ggpubr, cluster, funModeling,\n               factoextra, NbClust, #factoextra factor analysis, access clustering results\n               heatmaply, corrplot, psych, tidyverse)"
  },
  {
    "objectID": "In-Class_Ex3/In-Class_Ex3.html#importing-preparing-the-data",
    "href": "In-Class_Ex3/In-Class_Ex3.html#importing-preparing-the-data",
    "title": "Hands On Exercise 3.1 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Importing & preparing the data",
    "text": "Importing & preparing the data\n\nGeospatial Data\nIn this section, we will import Myanmar Township Boundary GIS data and its associated attrbiute table into the R environment.\nThe Myanmar Township Boundary GIS data is in ESRI shapefile format. It will be imported into R environment by using the st_read() function of sf.\nAs we are only interested in Shan State, we will filter only values that represents the Shan State.\n\nshan_sf = st_read(dsn=\"data/geospatial\", layer=\"myanmar_township_boundaries\") %>%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\"))\n\nReading layer `myanmar_township_boundaries' from data source \n  `D:\\Allanckw\\ISSS624\\In-Class_Ex3\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\nshan_sf\n\nSimple feature collection with 55 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.1699 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   OBJECTID           ST ST_PCODE       DT   DT_PCODE        TS  TS_PCODE\n1       163 Shan (North)   MMR015  Mongmit MMR015D008   Mongmit MMR015017\n2       203 Shan (South)   MMR014 Taunggyi MMR014D001   Pindaya MMR014006\n3       240 Shan (South)   MMR014 Taunggyi MMR014D001   Ywangan MMR014007\n4       106 Shan (South)   MMR014 Taunggyi MMR014D001  Pinlaung MMR014009\n5        72 Shan (North)   MMR015  Mongmit MMR015D008    Mabein MMR015018\n6        40 Shan (South)   MMR014 Taunggyi MMR014D001     Kalaw MMR014005\n7       194 Shan (South)   MMR014 Taunggyi MMR014D001     Pekon MMR014010\n8       159 Shan (South)   MMR014 Taunggyi MMR014D001  Lawksawk MMR014008\n9        61 Shan (North)   MMR015  Kyaukme MMR015D003 Nawnghkio MMR015013\n10      124 Shan (North)   MMR015  Kyaukme MMR015D003   Kyaukme MMR015012\n                 ST_2            LABEL2 SELF_ADMIN ST_RG T_NAME_WIN T_NAME_M3\n1  Shan State (North)    Mongmit\\n61072       <NA> State   rdk;rdwf      မိုးမိတ်\n2  Shan State (South)    Pindaya\\n77769       Danu State     yif;w,     ပင်းတယ\n3  Shan State (South)    Ywangan\\n76933       Danu State      &GmiH       ရွာငံ\n4  Shan State (South)  Pinlaung\\n162537       Pa-O State  yifavmif;   ပင်လောင်း\n5  Shan State (North)     Mabein\\n35718       <NA> State     rbdrf;      မဘိမ်း\n6  Shan State (South)     Kalaw\\n163138       <NA> State       uavm      ကလော\n7  Shan State (South)      Pekon\\n94226       <NA> State     z,fcHk       ဖယ်ခုံ\n8  Shan State (South)          Lawksawk       <NA> State   &yfapmuf    ရပ်စောက်\n9  Shan State (North) Nawnghkio\\n128357       <NA> State  aemifcsdK    နောင်ချို\n10 Shan State (North)   Kyaukme\\n172874       <NA> State   ausmufrJ    ကျောက်မဲ\n       AREA                       geometry\n1  2703.611 MULTIPOLYGON (((96.96001 23...\n2   629.025 MULTIPOLYGON (((96.7731 21....\n3  2984.377 MULTIPOLYGON (((96.78483 21...\n4  3396.963 MULTIPOLYGON (((96.49518 20...\n5  5034.413 MULTIPOLYGON (((96.66306 24...\n6  1456.624 MULTIPOLYGON (((96.49518 20...\n7  2073.513 MULTIPOLYGON (((97.14738 19...\n8  5145.659 MULTIPOLYGON (((96.94981 22...\n9  3271.537 MULTIPOLYGON (((96.75648 22...\n10 3920.869 MULTIPOLYGON (((96.95498 22...\n\n\nWe can then use glimpse() to verify each field’s data type & available values.\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 15\n$ OBJECTID   <dbl> 163, 203, 240, 106, 72, 40, 194, 159, 61, 124, 71, 155, 101…\n$ ST         <chr> \"Shan (North)\", \"Shan (South)\", \"Shan (South)\", \"Shan (Sout…\n$ ST_PCODE   <chr> \"MMR015\", \"MMR014\", \"MMR014\", \"MMR014\", \"MMR015\", \"MMR014\",…\n$ DT         <chr> \"Mongmit\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Mongmit\", \"…\n$ DT_PCODE   <chr> \"MMR015D008\", \"MMR014D001\", \"MMR014D001\", \"MMR014D001\", \"MM…\n$ TS         <chr> \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabein\", \"Kal…\n$ TS_PCODE   <chr> \"MMR015017\", \"MMR014006\", \"MMR014007\", \"MMR014009\", \"MMR015…\n$ ST_2       <chr> \"Shan State (North)\", \"Shan State (South)\", \"Shan State (So…\n$ LABEL2     <chr> \"Mongmit\\n61072\", \"Pindaya\\n77769\", \"Ywangan\\n76933\", \"Pinl…\n$ SELF_ADMIN <chr> NA, \"Danu\", \"Danu\", \"Pa-O\", NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ST_RG      <chr> \"State\", \"State\", \"State\", \"State\", \"State\", \"State\", \"Stat…\n$ T_NAME_WIN <chr> \"rdk;rdwf\", \"yif;w,\", \"&GmiH\", \"yifavmif;\", \"rbdrf;\", \"uavm…\n$ T_NAME_M3  <chr> \"မိုးမိတ်\", \"ပင်းတယ\", \"ရွာငံ\", \"ပင်လောင်း\", \"မဘိမ်း\", \"ကလော\", \"ဖယ်ခုံ\", \"…\n$ AREA       <dbl> 2703.611, 629.025, 2984.377, 3396.963, 5034.413, 1456.624, …\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((96.96001 23..., MULTIPOLYGON (…\n\n\n\n\nAspatial Data\n\nLoading the Data\nTo load the raw data file, we use the read_csv function The imported InfoComm variables are extracted from The 2014 Myanmar Population and Housing Census Myanmar. The attribute data set is called ict. It is saved in R’s * tibble data.frame* format.\nWe can view the summary statistics with summary()\n\nict = read_csv(\"data/aspatial/Shan-ICT.csv\") \nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\nThere are a total of 11 fields and 55 observation in the tibble data.frame.\n\n\nDerive new variables with dplyr package\nThe number of households is used as the measurement unit for the values. The underlying total number of households will influence the results when these statistics are used directly. Typically, the townships with a larger proportion of total households will also have a larger proportion of homes with radio, TV, etc.\nWe shall calculate the penetration rate of each ICT variable to address this issue by dividing it by the total number of households and multiply by 1000 and adding it to the data frame by using mutate() of dplyr package and renaming the column using rename_with()\n\nnew_col_names = c('DT_PCODE', 'DT', 'TS_PCODE', 'TS', 'TT_HOUSEHOLDS', 'RADIO', 'TV', 'LLPHONE', 'MPHONE', 'COMPUTER',  'INTERNET')\n\nold_col_names = c('District Pcode', 'District Name', 'Township Pcode', 'Township Name', 'Total households', 'Radio', 'Television', 'Land line phone', 'Mobile phone', 'Computer', 'Internet at home')\n\nict_derived = ict %>%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>% #per thousand household\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%\n  rename_with(~ new_col_names, all_of(old_col_names)) \n\nReviewing the summary statistics of the newly derived penetration rates\n\nsummary(ict_derived)\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985"
  },
  {
    "objectID": "In-Class_Ex3/In-Class_Ex3.html#exploratory-data-analysis-eda",
    "href": "In-Class_Ex3/In-Class_Ex3.html#exploratory-data-analysis-eda",
    "title": "Hands On Exercise 3.1 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\n\nEDA using statistical graphics\nWe can plot the distribution of the variables (i.e. Number of households with radio) by using appropriate Exploratory Data Analysis (EDA) methods by using functions in ggplot2. We will also place the mean and median lines with geom_vline\nA Histogram is useful to identify the overall distribution of the data values (i.e. left skew, right skew or normal distribution)\n\n#{r, fig.width=4, fig.height=4\nggplot(data = ict_derived, aes(x=`RADIO`)) + \n      geom_histogram(bins=30, color=\"black\", fill=\"light blue\") +\n      \n  labs(x = \"Radio\", y = \"Frequency\") +\n\n  geom_vline(aes(xintercept = mean(ict_derived$RADIO)),   \n               color=\"red\", linetype=\"dashed\", linewidth=1) +\n  \n  geom_vline(aes(xintercept=median(ict_derived$RADIO)),   \n               color=\"brown\", linetype=\"dashed\", linewidth=1)\n\n\n\n\nWe can also use box plot to detect outliers\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\nFrom the boxplot, we can infer that there are 3 outliers, we can find the outliers and display them using kable() below from the code below\n\nict_derived_outliers_radio = ict_derived %>%\n  filter(RADIO > 12000)\nict_derived_outliers_radio %>% select ('DT_PCODE', 'DT', 'TS_PCODE', 'TS', 'TT_HOUSEHOLDS', 'RADIO') %>%\n  kable()\n\n\n\n\nDT_PCODE\nDT\nTS_PCODE\nTS\nTT_HOUSEHOLDS\nRADIO\n\n\n\n\nMMR014D001\nTaunggyi\nMMR014001\nTaunggyi\n82604\n30176\n\n\nMMR014D001\nTaunggyi\nMMR014002\nNyaungshwe\n42634\n13801\n\n\nMMR015D001\nLashio\nMMR015001\nLashio\n64932\n15307\n\n\n\n\n\nNext, we will plot the histogram of the newly derived variables (i.e. Radio penetration rate) by using the code below. We will also place the mean and median lines with geom_vline\n\nggplot(data = ict_derived, aes(x=`RADIO_PR`)) + \n      geom_histogram(bins=30, color=\"black\", fill=\"light blue\") +\n      \n  labs(x = \"Radio\", y = \"Frequency\") +\n\n  geom_vline(aes(xintercept = mean(ict_derived$RADIO_PR)),   \n               color=\"red\", linetype=\"dashed\", linewidth=1) +\n  \n  geom_vline(aes(xintercept=median(ict_derived$RADIO_PR)),   \n               color=\"brown\", linetype=\"dashed\", linewidth=1)\n\n\n\n\nFrom the histogram, we can tell it is positively skewed, with an outliers after the 450 mark.\nWe can also use boxplot to detect outliers\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\nFrom the box plot, we can infer that there are 1 outlier, we can find the outlier and display it using kable() below from the code below\n\nict_derived_outliers_radio = ict_derived %>%\n  filter(RADIO_PR > 450)\nict_derived_outliers_radio %>% select ('DT_PCODE', 'DT', 'TS_PCODE', 'TS', 'TT_HOUSEHOLDS', 'RADIO_PR') %>%\n  kable()\n\n\n\n\nDT_PCODE\nDT\nTS_PCODE\nTS\nTT_HOUSEHOLDS\nRADIO_PR\n\n\n\n\nMMR014D001\nTaunggyi\nMMR014007\nYwangan\n18348\n484.5215\n\n\n\n\n\nIn the figure below, multiple histograms are plotted to reveal the distribution of the selected variables in the ict_derived data.frame. First, We do this by creating all the histograms assigned to individual variables.\n\nradio = ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(x = \"Radio\", y = \"Frequency\") +\n  geom_vline(aes(xintercept = mean(ict_derived$RADIO_PR)),   \n               color=\"red\", linetype=\"dashed\", linewidth=1) +\n  geom_vline(aes(xintercept=median(ict_derived$RADIO_PR)),   \n               color=\"brown\", linetype=\"dashed\", linewidth=1)\n\n\ntv = ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(x = \"TV\", y = \"Frequency\") +\n  geom_vline(aes(xintercept = mean(ict_derived$TV_PR)),   \n               color=\"red\", linetype=\"dashed\", linewidth=1) +\n  geom_vline(aes(xintercept=median(ict_derived$TV_PR)),   \n               color=\"brown\", linetype=\"dashed\", linewidth=1)\n\nllphone = ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(x = \"Land line phone\", y = \"Frequency\") +\n  geom_vline(aes(xintercept = mean(ict_derived$LLPHONE_PR)),   \n               color=\"red\", linetype=\"dashed\", linewidth=1) +\n  geom_vline(aes(xintercept=median(ict_derived$LLPHONE_PR)),   \n               color=\"brown\", linetype=\"dashed\", linewidth=1)\n\nmphone = ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")  +\n  labs(x = \"Mobile phone\", y = \"Frequency\") +\n  geom_vline(aes(xintercept = mean(ict_derived$MPHONE_PR)),   \n               color=\"red\", linetype=\"dashed\", linewidth=1) +\n  geom_vline(aes(xintercept=median(ict_derived$MPHONE_PR)),   \n               color=\"brown\", linetype=\"dashed\", linewidth=1)\n\ncomputer = ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")  +\n  labs(x = \"Computer\", y = \"Frequency\") +\n  geom_vline(aes(xintercept = mean(ict_derived$COMPUTER_PR)),   \n               color=\"red\", linetype=\"dashed\", linewidth=1) +\n  geom_vline(aes(xintercept=median(ict_derived$COMPUTER_PR)),   \n               color=\"brown\", linetype=\"dashed\", linewidth=1)\n\ninternet = ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")  +\n  labs(x = \"internet\", y = \"Frequency\") +\n  geom_vline(aes(xintercept = mean(ict_derived$INTERNET_PR)),   \n               color=\"red\", linetype=\"dashed\", linewidth=1) +\n  geom_vline(aes(xintercept=median(ict_derived$INTERNET_PR)),   \n               color=\"brown\", linetype=\"dashed\", linewidth=1)\n\nNext, ggarange() of ggpubr package is used to group these histograms together.\n\nggarrange(radio, tv, llphone, mphone, computer, internet, \n          ncol = 2, \n          nrow = 3)\n\n\n\n\nFrom the chart, we can tell\n\nRadio penetration rate is positively skewed\nTV penetration rate is negatively skewed\nLand line phone is penetration rate positively skewed\nMobile phone penetration rate is positively skewed\nComputer penetration rate is positively skewed with a really long tail\nSimilarly, Internet penetration rate is positively skewed with a really long tail, the pattern of computer and internet follows the same pattern. It may be the case that people with computers will likely also have internet\n\n\n\nEDA using choropleth map\n\nJoining geospatial data with aspatial data\nWe must first integrate the geographical data object (shan_sf) and aspatial data (ict_derived) before we can create the choropleth map. object into a single frame.\nTo do this, the dplyr package’s left_join function will be used. We will use TS_PCode as the common variable to join the 2 tables\n\nshan_sf = left_join(shan_sf, ict_derived, #geospatial file first\n                     by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n\nA choropleth map will be created so we can quickly see how the radio penetration rate is distributed across Shan State at the township level.\nThe choropleth is prepared by utilizing the functions of the tmap package\n\nttm()\ntm_shape(shan_sf) +\n          tm_fill(col = \"RADIO_PR\", \n          style = \"pretty\",\n          palette=\"PuRd\",\n          title = \"RADIO_PR\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nBy creating two choropleth maps—one for the total number of households (i.e. TT HOUSEHOLDS.map) and one for the total number of households with radios—we can show that the distribution depicted in the choropleth map above is biased to the underlying total number of households at the townships (RADIO.map) with functions of the tmap package. The jenks style is used as it locates clusters of related values and emphasizes the distinctions between categories.\n\nTT_HOUSEHOLDS.map = tm_shape(shan_sf) + \n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5) \n\nRADIO.map = tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,\n             asp=NA, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom the result, we can see from the choropleth maps above that townships with a higher proportion of households also have a higher proportion of radio owners, the summary statistics below shows that it the number is in fact in the 75th percentile\n\nsummary(ict_derived$RADIO)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    115    1260    2497    4487    6192   30176 \n\n\nWe will now plot the choropleth maps illustrating the distribution of the total number of households and the radio penetration rate.\n\nRADIO_PR.map = tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO_PR\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio PR\") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO_PR.map,\n             asp=NA, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsummary(ict_derived$RADIO_PR)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21.05  138.95  210.95  215.68  268.07  484.52 \n\n\nThe penetration rate is 235.7 radios per 1000 which is only between the 50th and 75th percentile of the sample."
  },
  {
    "objectID": "In-Class_Ex3/In-Class_Ex3.html#correlation-analysis",
    "href": "In-Class_Ex3/In-Class_Ex3.html#correlation-analysis",
    "title": "Hands On Exercise 3.1 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Correlation Analysis",
    "text": "Correlation Analysis\nIt is crucial that we ensure the cluster variables are not highly correlated before we conduct cluster analysis.\nWe will discover how to see and analyze the correlation of the input variables using the corrplot.mixed() (ref) function of the corrplot package. However we need to find the correlation matrix first with cor() and only use the variables we are interested in, which are in column 12 to 17.\n\ncluster_vars.cor = cor(ict_derived[,12:17]) #convert to correlation matrix [,cols]\n\ncorrplot.mixed(cluster_vars.cor, \n               lower = \"ellipse\", \n               upper = \"number\", \n               tl.pos = \"lt\", \n               diag=\"l\", \n               tl.col=\"black\")\n\n\n\n\nThe correlation graphic above demonstrates the strong correlation between COMPUTER_PR and INTERNET_PR. This suggests that only one of them, rather than both, should be included in the cluster analysis."
  },
  {
    "objectID": "In-Class_Ex3/In-Class_Ex3.html#hierarchy-cluster-analysis",
    "href": "In-Class_Ex3/In-Class_Ex3.html#hierarchy-cluster-analysis",
    "title": "Hands On Exercise 3.1 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Hierarchy Cluster Analysis",
    "text": "Hierarchy Cluster Analysis\nThere are 4 steps to hierarchical cluster analysis\n\nUsing a specific distance metric, determine the proximity matrix.\nEach data point has a cluster allocated to it.\nCombine the clusters based on a metric for cluster similarity.\nUpdate the distance matrix\n\n\nUsing a specific distance metric, determine the proximity matrix.\n\nExtracting clustering variables\nFirst we need to extract the clustering variables from the shan_sf simple feature object into data.frame. We do not include the variable INTERNET_PR as it has a strong correlation with the variable COMPUTER_PR\n\ncluster_vars = shan_sf %>%\n          st_set_geometry(NULL) %>% #drop geometric column as we it is not one of our clustering variables\n            select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars, 10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nThe following step is to replace row number with township name in the rows and delete the TS.x field by selecting only the required columns (2 to 6) by using rows.names\nThe columns names must only be our clustering variables\n\nrow.names(cluster_vars) = cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\nshan_ict = select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit   286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya   417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan   484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung  231.6499 541.7189   28.54454  249.4903    13.76255\nMabein    449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw     280.7624 611.6204   42.06478  408.7951    29.63160\nPekon     318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk  387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme   210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\n\nData Standardization\nIn most cases, cluster analysis will make use of many variables. Their differing value ranges are not uncommon. It is helpful to standardize the input variables before performing cluster analysis in order to prevent the cluster analysis result from being based on clustering variables with bias values.\n\nMin-Max standardization\nThe code below uses the heatmaply package’s normalize() function to standardize the clustering variables using the Min-Max approach. he summary() function is used to show the summary statistics for the standardized clustering variables.\n\nshan_ict.std_minmax = normalize(shan_ict)\nsummary(shan_ict.std_minmax)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\nThe values range of the Min-max standardized clustering variables are between 0 and 1 now.\n\n\nZ-score standardization\nThe Base R function scale() (ref) makes standardizing Z-scores simple. The Z-score approach will be used to standardize the clustering variables below. We use the describe() function of the psych package here because we want to look at the standard deviation of the variable\n\nshan_ict.std_z = scale(shan_ict)\ndescribe(shan_ict.std_minmax)\n\n            vars  n mean   sd median trimmed  mad min max range  skew kurtosis\nRADIO_PR       1 55 0.42 0.23   0.41    0.41 0.21   0   1     1  0.48    -0.27\nTV_PR          2 55 0.54 0.22   0.55    0.55 0.17   0   1     1 -0.38    -0.23\nLLPHONE_PR     3 55 0.27 0.23   0.19    0.24 0.15   0   1     1  1.37     1.49\nMPHONE_PR      4 55 0.40 0.25   0.38    0.38 0.25   0   1     1  0.48    -0.34\nCOMPUTER_PR    5 55 0.24 0.23   0.18    0.20 0.15   0   1     1  1.80     2.96\n              se\nRADIO_PR    0.03\nTV_PR       0.03\nLLPHONE_PR  0.03\nMPHONE_PR   0.03\nCOMPUTER_PR 0.03\n\n\n\nNote: Z-score standardization method should only be used if we would assume all variables come from some normal distribution.\n\n\n\n\nVisualising the standardize clustering variables\nIt is a good idea to visualize the distribution graphical of the standardized clustering variables in addition to evaluating the summary statistics of those variables.\n\nr = ggplot(data=ict_derived, aes(x=`RADIO_PR`)) + \n    geom_histogram(bins=20, color=\"black\", fill=\"light blue\") +\n      \n  labs(x = \"Radio\", y = \"Frequency\") +\n\n  geom_vline(aes(xintercept = mean(ict_derived$RADIO_PR)),   \n               color=\"red\", linetype=\"dashed\", linewidth=1) +\n  \n  geom_vline(aes(xintercept=median(ict_derived$RADIO_PR)),   \n               color=\"brown\", linetype=\"dashed\", linewidth=1)\n\nshan_ict_s_df = as.data.frame(shan_ict.std_minmax)\n\ns = ggplot(data=shan_ict_s_df, aes(x=`RADIO_PR`)) + \n    geom_histogram(bins=20, color=\"black\", fill=\"light blue\") +\n      \n  labs(x = \"Radio\", y = \"Frequency\") +\n\n  geom_vline(aes(xintercept = mean(shan_ict_s_df$RADIO_PR)),   \n               color=\"red\", linetype=\"dashed\", linewidth=1) +\n  \n  geom_vline(aes(xintercept=median(shan_ict_s_df$RADIO_PR)),   \n               color=\"brown\", linetype=\"dashed\", linewidth=1) + ggtitle(\"Min-Max Standardization\")\n\n\nshan_ict_z_df = as.data.frame(shan_ict.std_z)\n\nz = ggplot(data=shan_ict_z_df, aes(x=`RADIO_PR`)) + \n    geom_histogram(bins=20, color=\"black\", fill=\"light blue\") +\n      \n  labs(x = \"Radio\", y = \"Frequency\") +\n\n  geom_vline(aes(xintercept = mean(shan_ict_z_df$RADIO_PR)),   \n               color=\"red\", linetype=\"dashed\", linewidth=1) +\n  \n  geom_vline(aes(xintercept=median(shan_ict_z_df$RADIO_PR)),   \n               color=\"brown\", linetype=\"dashed\", linewidth=1) + ggtitle(\"Z-score Standardization\")\n\nggarrange(r, s, z,\n          ncol = 2,\n          nrow = 2)\n\n\n\n\nKeep in mind that following data standardization, the clustering variables’ general distribution will change. Therefore, it is advised against performing data standardization if the clustering variables’ range of values is not particularly wide.\n\n\nDetermine the proximity matrix.\nNumerous packages in R offer routines to compute distance matrices. With R’s dist() function, we shall compute the proximity matrix.\nThe six distance proximity calculations that are supported by dist() are the euclidean, maximum, manhattan, canberra, binary, and minkowski methods. Euclidean proximity matrix is the default.\n\nproxmat = dist(shan_ict, method=\"euclidean\")\nproxmat \n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    171.86828                                                  \nYwangan    381.88259 257.31610                                        \nPinlaung    57.46286 208.63519 400.05492                              \nMabein     263.37099 313.45776 529.14689 312.66966                    \nKalaw      160.05997 302.51785 499.53297 181.96406 198.14085          \nPekon       59.61977 117.91580 336.50410  94.61225 282.26877 211.91531\nLawksawk   140.11550 204.32952 432.16535 192.57320 130.36525 140.01101\nNawnghkio   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787\nKyaukme    144.02475 311.01487 505.89191 139.67966 264.88283  79.42225\nMuse       563.01629 704.11252 899.44137 571.58335 453.27410 412.46033\nLaihka     141.87227 298.61288 491.83321 101.10150 345.00222 197.34633\nMongnai    115.86190 258.49346 422.71934  64.52387 358.86053 200.34668\nMawkmai    434.92968 437.99577 397.03752 398.11227 693.24602 562.59200\nKutkai      97.61092 212.81775 360.11861  78.07733 340.55064 204.93018\nMongton    192.67961 283.35574 361.23257 163.42143 425.16902 267.87522\nMongyai    256.72744 287.41816 333.12853 220.56339 516.40426 386.74701\nMongkaing  503.61965 481.71125 364.98429 476.29056 747.17454 625.24500\nLashio     251.29457 398.98167 602.17475 262.51735 231.28227 106.69059\nMongpan    193.32063 335.72896 483.68125 192.78316 301.52942 114.69105\nMatman     401.25041 354.39039 255.22031 382.40610 637.53975 537.63884\nTachileik  529.63213 635.51774 807.44220 555.01039 365.32538 373.64459\nNarphan    406.15714 474.50209 452.95769 371.26895 630.34312 463.53759\nMongkhet   349.45980 391.74783 408.97731 305.86058 610.30557 465.52013\nHsipaw     118.18050 245.98884 388.63147  76.55260 366.42787 212.36711\nMonghsat   214.20854 314.71506 432.98028 160.44703 470.48135 317.96188\nMongmao    242.54541 402.21719 542.85957 217.58854 384.91867 195.18913\nNansang    104.91839 275.44246 472.77637  85.49572 287.92364 124.30500\nLaukkaing  568.27732 726.85355 908.82520 563.81750 520.67373 427.77791\nPangsang   272.67383 428.24958 556.82263 244.47146 418.54016 224.03998\nNamtu      179.62251 225.40822 444.66868 170.04533 366.16094 307.27427\nMonghpyak  177.76325 221.30579 367.44835 222.20020 212.69450 167.08436\nKonkyan    403.39082 500.86933 528.12533 365.44693 613.51206 444.75859\nMongping   265.12574 310.64850 337.94020 229.75261 518.16310 375.64739\nHopong     136.93111 223.06050 352.85844  98.14855 398.00917 264.16294\nNyaungshwe  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782\nHsihseng   131.49728 172.00796 342.91035 111.61846 381.20187 287.11074\nMongla     384.30076 549.42389 728.16301 372.59678 406.09124 260.26411\nHseni      189.37188 337.98982 534.44679 204.47572 213.61240  38.52842\nKunlong    224.12169 355.47066 531.63089 194.76257 396.61508 273.01375\nHopang     281.05362 443.26362 596.19312 265.96924 368.55167 185.14704\nNamhkan    386.02794 543.81859 714.43173 382.78835 379.56035 246.39577\nKengtung   246.45691 385.68322 573.23173 263.48638 219.47071  88.29335\nLangkho    164.26299 323.28133 507.78892 168.44228 253.84371  67.19580\nMonghsu    109.15790 198.35391 340.42789  80.86834 367.19820 237.34578\nTaunggyi   399.84278 503.75471 697.98323 429.54386 226.24011 252.26066\nPangwaun   381.51246 512.13162 580.13146 356.37963 523.44632 338.35194\nKyethi     202.92551 175.54012 287.29358 189.47065 442.07679 360.17247\nLoilen     145.48666 293.61143 469.51621  91.56527 375.06406 217.19877\nManton     430.64070 402.42888 306.16379 405.83081 674.01120 560.16577\nMongyang   309.51302 475.93982 630.71590 286.03834 411.88352 233.56349\nKunhing    173.50424 318.23811 449.67218 141.58836 375.82140 197.63683\nMongyawng  214.21738 332.92193 570.56521 235.55497 193.49994 173.43078\nTangyan    195.92520 208.43740 324.77002 169.50567 448.59948 348.06617\nNamhsan    237.78494 228.41073 286.16305 214.33352 488.33873 385.88676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   157.51129                                                  \nNawnghkio  113.15370  90.82891                                        \nKyaukme    202.12206 186.29066 157.04230                              \nMuse       614.56144 510.13288 533.68806 434.75768                    \nLaihka     182.23667 246.74469 211.88187 128.24979 526.65211          \nMongnai    151.60031 241.71260 182.21245 142.45669 571.97975 100.53457\nMawkmai    416.00669 567.52693 495.15047 512.02846 926.93007 429.96554\nKutkai     114.98048 224.64646 147.44053 170.93318 592.90743 144.67198\nMongton    208.14888 311.07742 225.81118 229.28509 634.71074 212.07320\nMongyai    242.52301 391.26989 319.57938 339.27780 763.91399 264.13364\nMongkaing  480.23965 625.18712 546.69447 586.05094 995.66496 522.96309\nLashio     303.80011 220.75270 230.55346 129.95255 313.15288 238.64533\nMongpan    243.30037 228.54223 172.84425 110.37831 447.49969 210.76951\nMatman     368.25761 515.39711 444.05061 505.52285 929.11283 443.25453\nTachileik  573.39528 441.82621 470.45533 429.15493 221.19950 549.08985\nNarphan    416.84901 523.69580 435.59661 420.30003 770.40234 392.32592\nMongkhet   342.08722 487.41102 414.10280 409.03553 816.44931 324.97428\nHsipaw     145.37542 249.35081 176.09570 163.95741 591.03355 128.42987\nMonghsat   225.64279 352.31496 289.83220 253.25370 663.76026 158.93517\nMongmao    293.70625 314.64777 257.76465 146.09228 451.82530 185.99082\nNansang    160.37607 188.78869 151.13185  60.32773 489.35308  78.78999\nLaukkaing  624.82399 548.83928 552.65554 428.74978 149.26996 507.39700\nPangsang   321.81214 345.91486 287.10769 175.35273 460.24292 214.19291\nNamtu      165.02707 260.95300 257.52713 270.87277 659.16927 185.86794\nMonghpyak  190.93173 142.31691  93.03711 217.64419 539.43485 293.22640\nKonkyan    421.48797 520.31264 439.34272 393.79911 704.86973 351.75354\nMongping   259.68288 396.47081 316.14719 330.28984 744.44948 272.82761\nHopong     138.86577 274.91604 204.88286 218.84211 648.68011 157.48857\nNyaungshwe 139.31874 104.17830  43.26545 126.50414 505.88581 201.71653\nHsihseng   105.30573 257.11202 209.88026 250.27059 677.66886 175.89761\nMongla     441.20998 393.18472 381.40808 241.58966 256.80556 315.93218\nHseni      243.98001 171.50398 164.05304  81.20593 381.30567 204.49010\nKunlong    249.36301 318.30406 285.04608 215.63037 547.24297 122.68682\nHopang     336.38582 321.16462 279.84188 154.91633 377.44407 230.78652\nNamhkan    442.77120 379.41126 367.33575 247.81990 238.67060 342.43665\nKengtung   297.67761 209.38215 208.29647 136.23356 330.08211 258.23950\nLangkho    219.21623 190.30257 156.51662  51.67279 413.64173 160.94435\nMonghsu    113.84636 242.04063 170.09168 200.77712 633.21624 163.28926\nTaunggyi   440.66133 304.96838 344.79200 312.60547 250.81471 425.36916\nPangwaun   423.81347 453.02765 381.67478 308.31407 541.97887 351.78203\nKyethi     162.43575 317.74604 267.21607 328.14177 757.16745 255.83275\nLoilen     181.94596 265.29318 219.26405 146.92675 560.43400  59.69478\nManton     403.82131 551.13000 475.77296 522.86003 941.49778 458.30232\nMongyang   363.58788 363.37684 323.32123 188.59489 389.59919 229.71502\nKunhing    213.46379 278.68953 206.15773 145.00266 533.00162 142.03682\nMongyawng  248.43910 179.07229 220.61209 181.55295 422.37358 211.99976\nTangyan    167.79937 323.14701 269.07880 306.78359 736.93741 224.29176\nNamhsan    207.16559 362.84062 299.74967 347.85944 778.52971 273.79672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    374.50873                                                  \nKutkai      91.15307 364.95519                                        \nMongton    131.67061 313.35220 107.06341                              \nMongyai    203.23607 178.70499 188.94166 159.79790                    \nMongkaing  456.00842 133.29995 428.96133 365.50032 262.84016          \nLashio     270.86983 638.60773 289.82513 347.11584 466.36472 708.65819\nMongpan    178.09554 509.99632 185.18173 200.31803 346.39710 563.56780\nMatman     376.33870 147.83545 340.86349 303.04574 186.95158 135.51424\nTachileik  563.95232 919.38755 568.99109 608.76740 750.29555 967.14087\nNarphan    329.31700 273.75350 314.27683 215.97925 248.82845 285.65085\nMongkhet   275.76855 115.58388 273.91673 223.22828 104.98924 222.60577\nHsipaw      52.68195 351.34601  51.46282  90.69766 177.33790 423.77868\nMonghsat   125.25968 275.09705 154.32012 150.98053 127.35225 375.60376\nMongmao    188.29603 485.52853 204.69232 206.57001 335.61300 552.31959\nNansang     92.79567 462.41938 130.04549 199.58124 288.55962 542.16609\nLaukkaing  551.56800 882.51110 580.38112 604.66190 732.68347 954.11795\nPangsang   204.25746 484.14757 228.33583 210.77938 343.30638 548.40662\nNamtu      209.35473 427.95451 225.28268 308.71751 278.02761 525.04057\nMonghpyak  253.26470 536.71695 206.61627 258.04282 370.01575 568.21089\nKonkyan    328.82831 339.01411 310.60810 248.25265 287.87384 380.92091\nMongping   202.99615 194.31049 182.75266 119.86993  65.38727 257.18572\nHopong      91.53795 302.84362  73.45899 106.21031 124.62791 379.37916\nNyaungshwe 169.63695 502.99026 152.15482 219.72196 327.13541 557.32112\nHsihseng   142.36728 329.29477 128.21054 194.64317 162.27126 411.59788\nMongla     354.10985 686.88950 388.40984 411.06668 535.28615 761.48327\nHseni      216.81639 582.53670 229.37894 286.75945 408.23212 648.04408\nKunlong    202.92529 446.53763 204.54010 270.02165 299.36066 539.91284\nHopang     243.00945 561.24281 263.31986 273.50305 408.73288 626.17673\nNamhkan    370.05669 706.47792 392.48568 414.53594 550.62819 771.39688\nKengtung   272.28711 632.54638 279.19573 329.38387 460.39706 692.74693\nLangkho    174.67678 531.08019 180.51419 236.70878 358.95672 597.42714\nMonghsu     84.11238 332.07962  62.60859 107.04894 154.86049 400.71816\nTaunggyi   448.55282 810.74692 450.33382 508.40925 635.94105 866.21117\nPangwaun   312.13429 500.68857 321.80465 257.50434 394.07696 536.95736\nKyethi     210.50453 278.85535 184.23422 222.52947 137.79420 352.06533\nLoilen      58.41263 388.73386 131.56529 176.16001 224.79239 482.18190\nManton     391.54062 109.08779 361.82684 310.20581 195.59882  81.75337\nMongyang   260.39387 558.83162 285.33223 295.60023 414.31237 631.91325\nKunhing    110.55197 398.43973 108.84990 114.03609 238.99570 465.03971\nMongyawng  275.77546 620.04321 281.03383 375.22688 445.78964 700.98284\nTangyan    180.37471 262.66006 166.61820 198.88460 109.08506 348.56123\nNamhsan    218.10003 215.19289 191.32762 196.76188  77.35900 288.66231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    172.33279                                                  \nMatman     628.11049 494.81014                                        \nTachileik  311.95286 411.03849 890.12935                              \nNarphan    525.63854 371.13393 312.05193 760.29566                    \nMongkhet   534.44463 412.17123 203.02855 820.50164 217.28718          \nHsipaw     290.86435 179.52054 344.45451 576.18780 295.40170 253.80950\nMonghsat   377.86793 283.30992 313.59911 677.09508 278.21548 167.98445\nMongmao    214.23677 131.59966 501.59903 472.95568 331.42618 375.35820\nNansang    184.47950 144.77393 458.06573 486.77266 398.13308 360.99219\nLaukkaing  334.65738 435.58047 903.72094 325.06329 708.82887 769.06406\nPangsang   236.72516 140.23910 506.29940 481.31907 316.30314 375.58139\nNamtu      365.88437 352.91394 416.65397 659.56458 494.36143 355.99713\nMonghpyak  262.09281 187.85699 470.46845 444.04411 448.40651 462.63265\nKonkyan    485.51312 365.87588 392.40306 730.92980 158.82353 254.24424\nMongping   454.52548 318.47482 201.65224 727.08969 188.64567 113.80917\nHopong     345.31042 239.43845 291.84351 632.45718 294.40441 212.99485\nNyaungshwe 201.58191 137.29734 460.91883 445.81335 427.94086 417.08639\nHsihseng   369.00833 295.87811 304.02806 658.87060 377.52977 256.70338\nMongla     179.95877 253.20001 708.17595 347.33155 531.46949 574.40292\nHseni       79.41836 120.66550 564.64051 354.90063 474.12297 481.88406\nKunlong    295.23103 288.03320 468.27436 595.70536 413.07823 341.68641\nHopang     170.63913 135.62913 573.55355 403.82035 397.85908 451.51070\nNamhkan    173.27153 240.34131 715.42102 295.91660 536.85519 596.19944\nKengtung    59.85893 142.21554 613.01033 295.90429 505.40025 531.35998\nLangkho    115.18145  94.98486 518.86151 402.33622 420.65204 428.08061\nMonghsu    325.71557 216.25326 308.13805 605.02113 311.92379 247.73318\nTaunggyi   195.14541 319.81385 778.45810 150.84117 684.20905 712.80752\nPangwaun   362.45608 232.52209 523.43600 540.60474 264.64997 407.02947\nKyethi     447.10266 358.89620 233.83079 728.87329 374.90376 233.25039\nLoilen     268.92310 207.25000 406.56282 573.75476 354.79137 284.76895\nManton     646.66493 507.96808  59.52318 910.23039 280.26395 181.33894\nMongyang   209.33700 194.93467 585.61776 448.79027 401.39475 445.40621\nKunhing    255.10832 137.85278 403.66587 532.26397 281.62645 292.49814\nMongyawng  172.70139 275.15989 601.80824 432.10118 572.76394 522.91815\nTangyan    429.84475 340.39128 242.78233 719.84066 348.84991 201.49393\nNamhsan    472.04024 364.77086 180.09747 754.03913 316.54695 170.90848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   121.78922                                                  \nMongmao    185.99483 247.17708                                        \nNansang    120.24428 201.92690 164.99494                              \nLaukkaing  569.06099 626.44910 404.00848 480.60074                    \nPangsang   205.04337 256.37933  57.60801 193.36162 408.04016          \nNamtu      229.44658 231.78673 365.03882 217.61884 664.06286 392.97391\nMonghpyak  237.67919 356.84917 291.88846 227.52638 565.84279 315.11651\nKonkyan    296.74316 268.25060 281.87425 374.70456 635.92043 274.81900\nMongping   168.92101 140.95392 305.57166 287.36626 708.13447 308.33123\nHopong      62.86179 100.45714 244.16253 167.66291 628.48557 261.51075\nNyaungshwe 169.92664 286.37238 230.45003 131.18943 520.24345 257.77823\nHsihseng   136.54610 153.49551 311.98001 193.53779 670.74564 335.52974\nMongla     373.47509 429.00536 216.24705 289.45119 202.55831 217.88123\nHseni      231.48538 331.22632 184.67099 136.45492 391.74585 214.66375\nKunlong    205.10051 202.31862 224.43391 183.01388 521.88657 258.49342\nHopang     248.72536 317.64824  78.29342 196.47091 331.67199  92.57672\nNamhkan    382.79302 455.10875 223.32205 302.89487 196.46063 231.38484\nKengtung   284.08582 383.72138 207.58055 193.67980 351.48520 229.85484\nLangkho    183.05109 279.52329 134.50170  99.39859 410.41270 167.65920\nMonghsu     58.55724 137.24737 242.43599 153.59962 619.01766 260.52971\nTaunggyi   462.31183 562.88102 387.33906 365.04897 345.98041 405.59730\nPangwaun   298.12447 343.53898 187.40057 326.12960 470.63605 157.48757\nKyethi     195.17677 190.50609 377.89657 273.02385 749.99415 396.89963\nLoilen      98.04789 118.65144 190.26490  94.23028 535.57527 207.94433\nManton     359.60008 317.15603 503.79786 476.55544 907.38406 504.75214\nMongyang   267.10497 312.64797  91.06281 218.49285 326.19219 108.37735\nKunhing     90.77517 165.38834 103.91040 128.20940 500.41640 123.18870\nMongyawng  294.70967 364.40429 296.40789 191.11990 454.80044 336.16703\nTangyan    167.69794 144.59626 347.14183 249.70235 722.40954 364.76893\nNamhsan    194.47928 169.56962 371.71448 294.16284 760.45960 385.65526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  346.57799                                                   \nKonkyan    478.37690 463.39594                                         \nMongping   321.66441 354.76537 242.02901                               \nHopong     206.82668 267.95563 304.49287 134.00139                     \nNyaungshwe 271.41464 103.97300 432.35040 319.32583 209.32532           \nHsihseng   131.89940 285.37627 383.49700 199.64389  91.65458  225.80242\nMongla     483.49434 408.03397 468.09747 512.61580 432.31105  347.60273\nHseni      327.41448 200.26876 448.84563 395.58453 286.41193  130.86310\nKunlong    233.60474 357.44661 329.11433 309.05385 219.06817  285.13095\nHopang     408.24516 304.26577 348.18522 379.27212 309.77356  247.19891\nNamhkan    506.32466 379.50202 481.59596 523.74815 444.13246  333.32428\nKengtung   385.33554 221.47613 474.82621 442.80821 340.47382  177.75714\nLangkho    305.03473 200.27496 386.95022 343.96455 239.63685  128.26577\nMonghsu    209.64684 232.17823 331.72187 158.90478  43.40665  173.82799\nTaunggyi   518.72748 334.17439 650.56905 621.53039 513.76415  325.09619\nPangwaun   517.03554 381.95144 263.97576 340.37881 346.00673  352.92324\nKyethi     186.90932 328.16234 400.10989 187.43974 136.49038  288.06872\nLoilen     194.24075 296.99681 334.19820 231.99959 124.74445  206.40432\nManton     448.58230 502.20840 366.66876 200.48082 310.58885  488.79874\nMongyang   413.26052 358.17599 329.39338 387.80686 323.35704  294.29500\nKunhing    296.43996 250.74435 253.74202 212.59619 145.15617  189.97131\nMongyawng  262.24331 285.56475 522.38580 455.59190 326.59925  218.12104\nTangyan    178.69483 335.26416 367.46064 161.67411 106.82328  284.14692\nNamhsan    240.95555 352.70492 352.20115 130.23777 132.70541  315.91750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     478.66210                                                  \nHseni      312.74375 226.82048                                        \nKunlong    231.85967 346.46200 276.19175                              \nHopang     370.01334 147.02444 162.80878 271.34451                    \nNamhkan    492.09476  77.21355 212.11323 375.73885 146.18632          \nKengtung   370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\nLangkho    276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\nMonghsu     97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\nTaunggyi   528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\nPangwaun   433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\nKyethi      84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\nLoilen     158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\nManton     334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\nMongyang   382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\nKunhing    220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\nMongyawng  309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\nTangyan     70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\nNamhsan    125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    107.16213                                                  \nMonghsu    316.91914 221.84918                                        \nTaunggyi   186.28225 288.27478 486.91951                              \nPangwaun   337.48335 295.38434 343.38498 497.61245                    \nKyethi     444.26274 350.91512 146.61572 599.57407 476.62610          \nLoilen     282.22935 184.10672 131.55208 455.91617 331.69981 232.32965\nManton     631.99123 535.95620 330.76503 803.08034 510.79265 272.03299\nMongyang   217.08047 175.35413 323.95988 374.58247 225.25026 453.86726\nKunhing    245.95083 146.38284 146.78891 429.98509 229.09986 278.95182\nMongyawng  203.87199 186.11584 312.85089 287.73864 475.33116 387.71518\nTangyan    429.95076 332.02048 127.42203 592.65262 447.05580  47.79331\nNamhsan    466.20497 368.20978 153.22576 631.49232 448.58030  68.67929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     419.06087                                                  \nMongyang   246.76592 585.70558                                        \nKunhing    130.39336 410.49230 188.89405                              \nMongyawng  261.75211 629.43339 304.21734 295.35984                    \nTangyan    196.60826 271.82672 421.06366 249.74161 377.52279          \nNamhsan    242.15271 210.48485 450.97869 270.79121 430.02019  63.67613\n\n\n\n\n\nComputing hierarchical clustering\nNumerous R packages include the hierarchical clustering function. The R stats function hclust() will be used in this practical exercise.\nThe cluster was computed using the agglomeration approach by hclust(). There are 8 clustering methods that can be used: ward.D, ward. D2, single, complete, mcquitty (WPGMA), centroid (WPGMC), and average (UPGMA) (UPGMC).\nThe code below uses the ward.D method to do a hierarchical cluster analysis. An object of class hclust, which describes the tree generated by the clustering process, is where the hierarchical clustering output is stored. We can then plot the tree using plot() of R graphics\n\nhclust_ward_d = hclust(proxmat, method=\"ward.D\")\nplot(hclust_ward_d, cex=0.6) #scale down plot to 0.6x in order to see township name\n\n\n\n\n\nSelecting the optimal clustering algorithm\nFinding stronger clustering structures is a challenge when performing hierarchical clustering. Using the agnes() function of the cluster package will address the issue.\nIt performs similar operations to hclus(), but agnes() also provides the agglomerative coefficient, which gauges the degree of clustering structure present\n\nvalues closer to 1 suggest strong clustering structure\n\nAll hierarchical clustering algorithms’ agglomerative coefficients will be calculated using the code below.\n\nm = c(\"average\", \"single\", \"complete\", \"ward\")\nnames(m) = c(\"average\", \"single\", \"complete\", \"ward\")\n\nac = function(y) {\n  agnes(shan_ict, method=y)$ac\n}\n\nmap_dbl(m,ac)\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\nAccording to the results shown above, Ward’s approach offers the greatest clustering structure out of the four examined methods. Consequently, only Ward’s technique will be applied in the analysis that follows.\n\n\n\nDetermining Optimal Clusters\nThe choice of the best clusters to keep is a technical problem for data analysts when undertaking clustering analysis.\nTo identify the ideal clusters, there are 3 widely utilized techniques:\n\nElbow Method\nAverage Silhouette Method\nGap Statistic Method\n\nThe gap statistic contrasts the overall intra-cluster variation for various values of k with the values that would be predicted under a null reference distribution for the data. The value that maximizes the gap statistic will be used to estimate the best clusters (i.e., that yields the largest gap statistic). In other words, the clustering structure is very different from a randomly distributed, uniform distribution of points.\nTo compute the gap statistic, clusGap() of cluster package will be used\n\nset.seed(12345)\ngap_stat = clusGap(shan_ict, FUN=hcut, nstart=25, K.max = 10, B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --> Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\nAlso note that the hcut function used is from factoextra package.\nNext, we can visualise the plot by using fviz_gap_stat() of factoextra package.\n\nfviz_gap_stat(gap_stat)\n\n\n\n\nAccording to the gap statistic graph above, keeping 1 cluster is the optimal quantity. However, keeping only one cluster is illogical. The 6-cluster, which is the largest gap statistic according to the gap statistic graph, should be the next-best cluster to choose.\nIn addition to these widely-used methods, the NbClust package, published by Charrad et al. in 2014, offers 30 indices for figuring out the appropriate number of clusters and suggests to users the best clustering scheme based on the various outcomes obtained by varying different combinations of the number of clusters, distance measures, and clustering methods.\n\nInterpreting the dendrograms\nEach leaf on the dendrogram shown above represents a single observation. As we climb the tree, comparable observations join together to form branches, which are then fused at a higher level.\nThe vertical axis’s display of the height of the fusion shows how similar or unlike two observations are.\nLess similarity exists between the observations as the height of the fusion increases. Be aware that only the height at which the branches comprising the two observations are initially fused can be utilized to determine how close two observations are to one another.\nTwo observations cannot be compared for resemblance based on how close they are to one another along the horizontal axis.\nUsing R stats’ rect.hclust() function, the dendrogram can alternatively be shown with a border around the chosen clusters. The rectangles’ borders can be colored using the option border.\n\nplot(hclust_ward_d, cex=0.6)\nrect.hclust(hclust_ward_d, k = 6, border = 2:5)\n\n\n\n\n\n\n\nVisually-driven hierarchical clustering analysis\nIn this section, we will learn how to perform visually-driven hiearchical clustering analysis by using heatmaply package. With heatmaply, we are able to build both highly interactive cluster heatmap or static cluster heatmap.\n\nTransforming the data frame into a matrix\nAlthough the data was imported into a data frame, a data matrix is required to create a heatmap. The shan_ict data frame will be converted into a data matrix using the code below.\n\nshan_ict_mat = data.matrix(shan_ict)\n\n\n\nPlotting interactive cluster heatmap using heatmaply()\n\nheatmaply(normalize(shan_ict_mat), \n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors=PuRd,\n          k_row = 6,\n          margins= c(NA, 200, 60, NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main = \"Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Township of Shan State'\"\n          \n          )\n\n\n\n\n\n\n\n\nMapping the clusters formed\nFollowing a thorough analysis of the dendragram shown above, we chose to keep six groups. The code below will use R Base’s cutree() function to create a 6-cluster model.\n\ngroups = as.factor(cutree(hclust_ward_d, k=6))\n\nGroups are the output. It is a list object.\nThe groups object needs to be added to the shan_sf simple feature object in order to visualize the clusters.\nThe following code snippet forms the join in 3 steps:\n\nThe object representing the groups list will be transformed into a matrix;\nshan_sf is appended with the groups matrix using cbind() to create the simple feature object shan_sf cluster;\nThe as.matrix.groups column is renamed to CLUSTER using the dplyr package’s rename() function.\n\n\nshan_sf_cluster = cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\nNext we use the tmap functions to plot the cloropleth map showing the clusters\n\n tm_shape(shan_sf_cluster) + \n  tm_polygons(\"CLUSTER\") +\n  tm_borders(alpha = 0.5) \n\n\n\n\n\n\nThe clusters are quite fractured, as shown by the choropleth map above. When non-spatial clustering algorithms like the hierarchical cluster analysis method are used, this is one of the main limitations."
  },
  {
    "objectID": "In-Class_Ex3/In-Class_Ex3.html#spatially-constrained-clustering---skater-approach",
    "href": "In-Class_Ex3/In-Class_Ex3.html#spatially-constrained-clustering---skater-approach",
    "title": "Hands On Exercise 3.1 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Spatially Constrained Clustering - SKATER approach",
    "text": "Spatially Constrained Clustering - SKATER approach\nWe will discover how to use the skater() method of the spdep package to derive a geographically limited cluster in this section.\n\nConverting into SpatialPolygonsDataFrame\nWe must first transform shan_sf into a spatial polygons data frame. Because only SP objects (SpatialPolygonDataFrame) are supported by the SKATER function, this is.\nThe code below turns shan_sf into a SpatialPolygonDataFrame named shan_sf by using the as_Spatial() function of the sf package.\n\nshan_sp = as_Spatial(shan_sf)\n\n\n\nComputing Neighbour List\nThe neighbours list from the polygon list will then be computed using the poly2nb() function of the spdep package.\n\nshan.nb = poly2nb(shan_sp)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\nWith the help of the code below, we can plot the neighbors list on shan_sp. \nWe plot this graph on top of the map now that we can also plot the community area boundaries. The bounds are given in the first plot command. \nThe plot of the neighbor list object is then displayed, using coordinates to extract the polygon centroids from the original SpatialPolygonDataFrame (Shan state township boundaries). \nThese serve as the nodes in the representation of the graph. In order to plot the network on top of the limits, we additionally specify add=TRUE and set the color to blue.\n\nplot(shan_sp, border=grey(0.6))\n\nplot(shan.nb, coordinates(shan_sp), col=\"blue\", add=TRUE)\n\n\n\n\n\nBe aware that some of the areas will be trimmed if you we plot the network first and then the borders. This is so because the first plot’s attributes determine the plotting area. In this instance, we plot the border map first because it is larger than the graph.\n\n\n\nComputing minimum spanning tree\n\nCalculating edge costs\nThe cost of each edge is determined using nbcosts() from the spdep package. Its nodes are separated by this distance. This function uses a data.frame with observations vectors in each node to calculate the distance.\n\nlcosts = nbcosts(shan.nb, shan_ict)\n\nThis calculates the pairwise dissimilarity between each observation’s values for the five variables and those for its neighboring observation (from the neighbour list). In essence, this is the idea of a generalized weight for a matrix of spatial weights.\nNext, in a manner similar to how we calculated the inverse of distance weights, we will include these costs into a weights object. In other words, we specify the recently computed lcosts as the weights in order to transform the neighbour list into a list weights object.\nThe code below demonstrates how to accomplish this using the nb2listw() function of the spdep package. To ensure that the cost values are not row-standardized, note that we have specified the style as B to use binary weights.\n\nshan.w = nb2listw(shan.nb, lcosts, style=\"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n\n\n\n\nComputing minimum spanning tree\nThe minimum spanning tree is computed by using mstree() of spdep package as shown in the code below. We can check its class and dimensions by using class() and dim()\n\nshan.mst = mstree(shan.w)\nclass(shan.mst)\n\n[1] \"mst\"    \"matrix\"\n\ndim(shan.mst)\n\n[1] 54  3\n\n\nNote that the dimension is 54 and not 55. This is because the minimum spanning tree consists on n-1 edges (links) in order to traverse all nodes.\nWe can display the content of shan.mst by using head()\n\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   31   25 229.44658\n[2,]   25   10 163.95741\n[3,]   10    1 144.02475\n[4,]   10    9 157.04230\n[5,]    9    8  90.82891\n[6,]    8    6 140.01101\n\n\nThe MST plot method includes a mechanism to display the nodes’ observation numbers in addition to the edge. We once again plot these along with the township lines. We can see how the initial neighbor list is condensed to a single edge that passes through every node while linking each one.\n\nplot(shan_sp, border=gray(0.6))\nplot.mst(shan.mst, coordinates(shan_sp), col=\"blue\", \n         cex.lab=0.7, cex.circles=0.05, add=TRUE)\n\n\n\n\n\n\nComputing spatially constrained clusters using SKATER method\nWe can compute the spatially constrained cluster using skater() of the spdep package.\n\nclust6 = skater(edge=shan.mst[,1:2], #1st 2 col of MST\n                data = shan_ict, #data matrix\n                method = \"euclidean\",\n                ncuts = 5 #number of cuts\n                )\n\nRequired inputs for the skater() function. \n\nData matrix (to update the costs while units are being grouped),\nthe number of cuts\nthe first two columns of the MST matrix\n\n\nNote: It is configured to be one less than the total number of clusters.\nAs a result, the value supplied is actually one less than the number of clusters, or the number of cuts in the graph\n\nWe can display the content of the result using str()\n\nstr(clust6)\n\nList of 8\n $ groups      : num [1:55] 3 3 6 3 3 3 3 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 13 48 54 55 45 37 34 16 25 31 ...\n  .. ..$ edge: num [1:21, 1:3] 48 55 54 37 34 16 45 31 13 13 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 47 27 53 38 42 15 41 51 43 32 ...\n  .. ..$ edge: num [1:17, 1:3] 53 15 42 38 41 51 15 27 15 43 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 2 6 8 1 36 4 10 9 46 5 ...\n  .. ..$ edge: num [1:10, 1:3] 6 1 8 36 4 6 8 10 10 9 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 44 20\n  .. ..$ edge: num [1, 1:3] 44 20 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 23\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 3\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\nThe groups vector, which contains the labels of the cluster to which each observation belongs, is the most interesting part of this list structure (as before, the label itself is arbitary). \nThe summary for each of the clusters in the edges.groups list is then provided. To show the impact of each cut on the overall criterion, sum of squares measurements are given as ssto for the total and ssw for each cut individually.\nWe can check the cluster assignment by using the conde chunk below.\n\nccs6 = clust6$groups\nccs6\n\n [1] 3 3 6 3 3 3 3 3 3 3 2 1 1 1 2 1 1 1 2 4 1 2 5 1 1 1 2 1 2 2 1 2 2 1 1 3 1 2\n[39] 2 2 2 2 2 4 1 3 2 1 1 1 2 1 2 1 1\n\n\nUsing the table command, we can determine how many observations are contained in each cluster. Additionally, we can observe that each vector in the lists found in edges.groups has this dimension. For instance, the first list has a node with a dimension of 22, which corresponds to the first cluster’s observation count.\n\ntable(ccs6)\n\nccs6\n 1  2  3  4  5  6 \n22 18 11  2  1  1 \n\n\nFinally, we can also plot the pruned tree that shows the five clusters on top of the townshop area.\n\nplot(shan_sp, border=gray(.5))\nplot(clust6,\n     coordinates(shan_sp),\n     cex.lab=0.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"purple\"),\n     cex.circles=0.005, \n     add=TRUE\n     )\n\n\n\n\n\n\nVisualizing the clusters in choropleth map\nThe code below is used to plot the newly derived clusters by using the SKATER method\n\ngroups_mat = as.matrix(clust6$groups)\nshan_sf_spatialcluster = cbind(shan_sf_cluster, as.factor(groups_mat)) %>% \n  rename(`SP_CLUSTER` = `as.factor.groups_mat.`)\n\ntm_shape(shan_sf_spatialcluster) + \n  tm_fill(\"SP_CLUSTER\") +\n  tm_borders(alpha = 0.5) \n\n\n\n\n\n\nFor easy comparison, it will be better to place both the hierarchical clustering and spatially constrained hierarchical clustering maps next to each other.\n\nhclust.map.df = shan_sf_spatialcluster\nshclust.map.df = shan_sf_spatialcluster\n\nhclust.map = tm_shape(hclust.map.df) + \n  tm_fill(\"CLUSTER\", palette = \"Pastel1\") +\n  tm_borders(alpha = 0.5) \n  \nshclust.map = tm_shape(shclust.map.df) + \n  tm_fill(\"SP_CLUSTER\", palette = \"Pastel1\") +\n  tm_borders(alpha = 0.5) \n  \ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\nhclust.map + shclust.map"
  },
  {
    "objectID": "In-Class_Ex3/In-Class_Ex3.html#spatially-constrained-clustering-clustgeo-method",
    "href": "In-Class_Ex3/In-Class_Ex3.html#spatially-constrained-clustering-clustgeo-method",
    "title": "Hands On Exercise 3.1 - Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Spatially Constrained Clustering: ClustGeo Method",
    "text": "Spatially Constrained Clustering: ClustGeo Method"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624 Geospatial Analytics",
    "section": "",
    "text": "Welcome to ISSS624 Geospatial Analytics Applications.\nThis site will document my learning Journey"
  },
  {
    "objectID": "Take-Home_Ex1/Take-Home_Ex1.html",
    "href": "Take-Home_Ex1/Take-Home_Ex1.html",
    "title": "Take Home Exercise 1 - Investigation of Water points in Nigeria",
    "section": "",
    "text": "Water is a crucial resource for humanity. People must have access to clean water in order to be healthy. It promotes a healthy environment, peace and security, and a sustainable economy. However, more than 40% of the world’s population lacks access to enough clean water. According to UN-Water, 1.8 billion people would live in places with a complete water shortage by 2025. One of the many areas that the water problem gravely threatens is food security. Agriculture uses over 70% of the freshwater that is present on Earth.\nThe severe water shortages and water quality issues are seen in underdeveloped countries. Up to 80% of infections in developing nations are attributed to inadequate water and sanitation infrastructure.\nDespite technological advancement, providing rural people with clean water continues to be a key development concern in many countries around the world, especially in those on the continent of Africa.\nThe spatial patterns of non-functional water points will be shown in this study by using the proper global and local spatial association methodologies. We look at Nigeria’s in this assignment."
  },
  {
    "objectID": "Take-Home_Ex1/Take-Home_Ex1.html#getting-started",
    "href": "Take-Home_Ex1/Take-Home_Ex1.html#getting-started",
    "title": "Take Home Exercise 1 - Investigation of Water points in Nigeria",
    "section": "Getting Started",
    "text": "Getting Started\nFirst, the required packages are loaded into the R environment . The required packages are sf, tidyverse, spdep, tmap, & funModeling\nwith the code below:\n\npacman::p_load(sf, tidyverse, spdep, tmap, funModeling)\n\n\nSpatial Data\nThe spatial dataset used in this assignment is the Nigeria Level-2 Administrative Boundary spatial dataset downloaded from Center for Humanitarian Data - Nigeria - Subnational Administrative Boundaries\nWe will load the spatial features by using st_read() from the sf package\nAs the data we want is in WSG-84 format, we set crs to 4326.\nWe won’t utilize st_transform() at this time because it can result in outputs with missing points after transformation, which would skew our study.\n\nnga = st_read(dsn = \"data/geospatial\",\n               layer = \"nga_admbnda_adm2_osgof_20190417\",\n               crs = 4326)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `D:\\Allanckw\\ISSS624\\Take-Home_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n#nigeria_lga_sf = st_transform(nigeria_lga_sf, crs=4326) cause missing points\n\nWe could use st_crs()to verify the coordinate system from the object.\n\nst_crs(nga)\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\nBefore we start analyzing the data, lets us take a look at some characteristics of the spatial features to have a sense of what we are dealing with. We can use glimpse() to determine to accomplish that\n\nglimpse(nga)\n\nRows: 774\nColumns: 17\n$ Shape_Leng <dbl> 0.2370744, 0.2624772, 3.0753158, 2.5379842, 0.6871498, 1.06…\n$ Shape_Area <dbl> 0.0015239210, 0.0035311037, 0.3268678399, 0.0683785064, 0.0…\n$ ADM2_EN    <chr> \"Aba North\", \"Aba South\", \"Abadam\", \"Abaji\", \"Abak\", \"Abaka…\n$ ADM2_PCODE <chr> \"NG001001\", \"NG001002\", \"NG008001\", \"NG015001\", \"NG003001\",…\n$ ADM2_REF   <chr> \"Aba North\", \"Aba South\", \"Abadam\", \"Abaji\", \"Abak\", \"Abaka…\n$ ADM2ALT1EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2ALT2EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1_EN    <chr> \"Abia\", \"Abia\", \"Borno\", \"Federal Capital Territory\", \"Akwa…\n$ ADM1_PCODE <chr> \"NG001\", \"NG001\", \"NG008\", \"NG015\", \"NG003\", \"NG011\", \"NG02…\n$ ADM0_EN    <chr> \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nig…\n$ ADM0_PCODE <chr> \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\",…\n$ date       <date> 2016-11-29, 2016-11-29, 2016-11-29, 2016-11-29, 2016-11-29…\n$ validOn    <date> 2019-04-17, 2019-04-17, 2019-04-17, 2019-04-17, 2019-04-17…\n$ validTo    <date> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ SD_EN      <chr> \"Abia South\", \"Abia South\", \"Borno North\", \"Federal Capital…\n$ SD_PCODE   <chr> \"NG00103\", \"NG00103\", \"NG00802\", \"NG01501\", \"NG00302\", \"NG0…\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((7.401109 5...., MULTIPOLYGON (…\n\n\nWe can use freq() of the funModeling package to display the distribution of Level 1 administration (Which are states in Nigeria) instead and only zooming in on the micro level when we perform the water point analysis.\n\nfreq(data=nga, input = 'ADM1_EN')\n\n\n\n\n                     ADM1_EN frequency percentage cumulative_perc\n1                       Kano        44       5.68            5.68\n2                    Katsina        34       4.39           10.07\n3                        Oyo        33       4.26           14.33\n4                  Akwa Ibom        31       4.01           18.34\n5                       Osun        30       3.88           22.22\n6                      Borno        27       3.49           25.71\n7                        Imo        27       3.49           29.20\n8                     Jigawa        27       3.49           32.69\n9                      Delta        25       3.23           35.92\n10                     Niger        25       3.23           39.15\n11                     Benue        23       2.97           42.12\n12                    Kaduna        23       2.97           45.09\n13                    Rivers        23       2.97           48.06\n14                    Sokoto        23       2.97           51.03\n15                   Adamawa        21       2.71           53.74\n16                   Anambra        21       2.71           56.45\n17                     Kebbi        21       2.71           59.16\n18                      Kogi        21       2.71           61.87\n19                    Bauchi        20       2.58           64.45\n20                     Lagos        20       2.58           67.03\n21                      Ogun        20       2.58           69.61\n22               Cross River        18       2.33           71.94\n23                       Edo        18       2.33           74.27\n24                      Ondo        18       2.33           76.60\n25                      Abia        17       2.20           78.80\n26                     Enugu        17       2.20           81.00\n27                   Plateau        17       2.20           83.20\n28                      Yobe        17       2.20           85.40\n29                     Ekiti        16       2.07           87.47\n30                     Kwara        16       2.07           89.54\n31                    Taraba        16       2.07           91.61\n32                   Zamfara        14       1.81           93.42\n33                    Ebonyi        13       1.68           95.10\n34                  Nasarawa        13       1.68           96.78\n35                     Gombe        11       1.42           98.20\n36                   Bayelsa         8       1.03           99.23\n37 Federal Capital Territory         6       0.78          100.00\n\n\n774 Local Government Areas (LGA) make up Nigeria’s 37 states, with Kano having the most LGAs overall.\nFor a meaningful analysis, there are just too many LGAs, both large and little.\nCalling ttm() in the tmap package will switch the tmap’s viewing mode to interactive viewing, which will help us better visualize the map. Without this change, the generated map will be too small for any type of analysis. Additionally, we’ll base the map’s plot on States (Level 1 Administration Area)\nGiven that there are 37 states, we must raise the maximum number of categories from the default value of 30 to 37. Using tmap_options(max.categories = 37), the threshold can be set.\n\nttm()\ntmap_options(max.categories = 37)\n\nNow, we are ready to build our map with the functions in the tmap package\n\ntm_shape(nga) + \n \n  tm_polygons(\"ADM1_EN\") +\n  tm_borders(alpha=0.5) + \n  tm_scale_bar() +\n  tm_grid (alpha=0.2) +\n  tm_layout(main.title=\"Map of Nigeria LGA\", \n            main.title.position=\"center\", \n            main.title.size=1.2, \n            legend.height = 0.35, \n            legend.width = 0.35, \n            frame = TRUE) \n\n\n\n\n\n\n\n\nAspatial Data\n\nCleaning the Data\nThe aspatial dataset used in this assignment is the water point data exchange dataset found in WPdx Global Data Repositories. Data is filtered on the web portal to only keep Nigeria and the file is saved as NigeriaWaterPoints_Raw.csv\nAs we are only interested in the functionality of the water point, it is important to capture fields that may affect the functionality\n\nLGA: The area we are interested in\nState: The state of the LGA of Nigeria\nFunctional: Whether it is functional or not\nmanagement: who manages it?\nQuality: what is the quality?\nWater Source Category: where the water came from?\nWater Tech Category: What technology is used?\nlatitude\nlongitude\n\nTo load the raw data file, we use the read_csv function\n\nwpdx_raw = read_csv(\"data/aspatial/NigeriaWaterPoints_Raw.csv\") \n\nMost of the columns are irrelevant, so we will perform the following:\n\nkeep the columns we want to clean it up by specifying the columns with one to retain with subset\nrenaming the columns using rename_with\nReplace all the NA with unknown for columns with NA value present\n\n\nretain_cols = c('#clean_adm2', '#clean_adm1', '#status_clean', '#management_clean', '#subjective_quality', '#fecal_coliform_presence', '#water_source_category', '#water_tech_category', '#lat_deg', '#lon_deg' )\n\nnew_col_names = c('LGA', 'State', 'Functional', 'Management', 'Quality', 'presence_of_fecal_coliform', 'Water_Source_Category', 'Water_Tech_Category', 'latitude', 'longitude')\n\nwpdx_clean = subset(wpdx_raw, select = (names(wpdx_raw) %in% retain_cols)) %>%  rename_with(~ new_col_names, all_of(retain_cols)) %>% \nreplace_na(list(Functional = \"Unknown\", Management = \"Unknown\", Quality = \"Unknown\", Water_Source_Category = \"Unknown\", Water_Tech_Category = \"Unknown\"))\n\nWe save the clean file with saveRDS(), the file will be reduced to 1.6MB from the 144MB raw file that we downloaded.\n\nsaveRDS(wpdx_clean, \"data/aspatial/wpdx_clean.rds\")\n\nWe can then delete the raw file from the project and retrieve the saved RDS file using readRDS()\n\nwpdx_clean = readRDS(\"data/aspatial/wpdx_clean.rds\")\n\n\n\nConverting csv data into spatial features\nWe can use st_as_sfto create a dataframe from the longitude (x) and latitude (y) values. The EPSG 4326 code is used as the dataset is referencing WGS84 geographic coordinate system. We could use st_crs()to verify the coordinate system from the object.\n\nwpdx_clean_sf = st_as_sf(wpdx_clean, coords = c(\"longitude\", \"latitude\"), crs=4326)\nst_crs(wpdx_clean_sf)\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\nWe can then use glimpse() to verify each field’s data type & available values.\nThere are 95, 008 water points in the LGAs. The results also shows that the longitude and latitude values have been converted to a geometry object consisting of the longitude and latitude values as points, with both columns now dropped.\n\nglimpse(wpdx_clean_sf)\n\nRows: 95,008\nColumns: 8\n$ Water_Source_Category <chr> \"Unknown\", \"Well\", \"Well\", \"Well\", \"Well\", \"Well…\n$ Water_Tech_Category   <chr> \"Tapstand\", \"Mechanized Pump\", \"Hand Pump\", \"Unk…\n$ State                 <chr> \"Ekiti\", \"Ogun\", \"Ebonyi\", \"Enugu\", \"Enugu\", \"Be…\n$ LGA                   <chr> \"Moba\", \"Obafemi-Owode\", \"Ohaukwu\", \"Isi-Uzo\", \"…\n$ Management            <chr> \"Unknown\", \"Other\", \"Unknown\", \"Unknown\", \"Unkno…\n$ Functional            <chr> \"Unknown\", \"Functional\", \"Unknown\", \"Unknown\", \"…\n$ Quality               <chr> \"Unknown\", \"Acceptable quality\", \"Unknown\", \"Unk…\n$ geometry              <POINT [°]> POINT (5.12 7.98), POINT (3.597668 6.96453…\n\n\n\n\nAggregate the Data\nWe can use freq() of the funModeling package to display the distribution of functional field in wpdx_clean_sf. This is to help us aggregate the data as the dataset provide breakdowns of functional status. In order to only look at non functional water points, we will need to aggregate the different categories into simply functional, non functional and unknowns.\n\nfreq(data=wpdx_clean_sf, input = 'Functional')\n\n\n\n\n                        Functional frequency percentage cumulative_perc\n1                       Functional     45883      48.29           48.29\n2                   Non-Functional     29385      30.93           79.22\n3                          Unknown     10656      11.22           90.44\n4      Functional but needs repair      4579       4.82           95.26\n5 Non-Functional due to dry season      2403       2.53           97.79\n6        Functional but not in use      1686       1.77           99.56\n7         Abandoned/Decommissioned       234       0.25           99.81\n8                        Abandoned       175       0.18           99.99\n9 Non functional due to dry season         7       0.01          100.00\n\n\nTo aggregate them into functional, non functional and unknown, we will create new data frames to store them by using the filter function\n\nfunc_list = c(\"Functional\", \"Functional but needs repair\", \"Functional but not in use\")\nwpt_functional = wpdx_clean_sf %>%\n  filter(Functional %in% func_list)\n\nwpt_non_functional = wpdx_clean_sf %>%\n  filter(!Functional %in% c(func_list, \"Unknown\"))\n\nwpt_unknown = wpdx_clean_sf %>%\n  filter(Functional %in% \"Unknown\")\n\nOut of the 32, 204, records, we can gain some insights on why it might be non functional, is it due to management? Is it due to technology? Is it due to the source of the water?\nSimilarly, like how we aggregate functional data points, we could use freq() of the funModeling package to find out\n\nfreq(data=wpt_non_functional, input = 'Management')\n\n\n\n\n                             Management frequency percentage cumulative_perc\n1                               Unknown     17617      54.70           54.70\n2                  Community Management      8249      25.61           80.31\n3           Direct Government Operation      3831      11.90           92.21\n4                                 Other      1941       6.03           98.24\n5                     School Management       397       1.23           99.47\n6                  Health Care Facility       128       0.40           99.87\n7        Other Institutional Management        25       0.08           99.95\n8 Private Operator/Delegated Management        16       0.05          100.00\n\n\n\nfreq(data=wpt_non_functional, input = 'Water_Tech_Category')\n\n\n\n\n  Water_Tech_Category frequency percentage cumulative_perc\n1           Hand Pump     20471      63.57           63.57\n2     Mechanized Pump     11532      35.81           99.38\n3             Unknown       169       0.52           99.90\n4            Tapstand        32       0.10          100.00\n\n\n\nfreq(data=wpt_non_functional, input = 'Water_Source_Category')\n\n\n\n\n  Water_Source_Category frequency percentage cumulative_perc\n1                  Well     31470      97.72           97.72\n2                Spring       733       2.28          100.00\n3           Piped Water         1       0.00          100.00\n\n\nFrom the results, we can conclude that\n\nMore than half of the non functional water points have an unknown management, we could ask if these water points are even managed.\nMost of the non functional water points uses pumps, we could ask the question if there is an issue with the pumps and if there is a lack of expertise to repair or replace them when they fail.\n97.72% of such non functional water points are made up of wells. We could ask the question if we could improve things by providing other forms of sources such as piped water. How much cost will it take to bring pipe water to the various state of Nigeria?"
  },
  {
    "objectID": "Take-Home_Ex1/Take-Home_Ex1.html#combining-spatial-aspatial-data",
    "href": "Take-Home_Ex1/Take-Home_Ex1.html#combining-spatial-aspatial-data",
    "title": "Take Home Exercise 1 - Investigation of Water points in Nigeria",
    "section": "Combining Spatial & Aspatial Data",
    "text": "Combining Spatial & Aspatial Data\nWe can use st_intersects() to find common data points between geographical datasets. In our case we need to find the common points in the Nigeria’s LGA spatial dataset and the water point aspatial dataset\nThe below code does 4 things\n\nIt intersects the Nigeria LGA dataset (nga dataframe) with the water point dataset (wpdx_clean_sf dataframe) and produce a new column to denote the total number of water points in the area (Total wpt) by using mutate() and lengths()\nSimilar to step 1, the result of step 1 is piped to add 3 columns to denote the number of functional, non functional and unknown water points in the area to produce wpt functional, wpt non functional and wpt unknown respectively\nWe also add 2 new columns to find the percentage of functional and non functional water points by using mutate()\nSelect appropriate columns required which are the LGA area and LGA code (Column 3 & 4), Administration Level 1 Area and Administration Level 1 Code (Column 8 & 9) which represent states, the columns that were added as explained in steps 2 & 3 and the geometry multipolygon objects (Column 18 to 23) using select()\n\n\nnga_wp = nga %>% \n  #combine nga with water point sf\n  mutate(`total wpt` = lengths(\n    st_intersects(nga, wpdx_clean_sf))) %>%\n  #add columns to produce no. of functional, non functional and unknown points\n  mutate(`wpt functional` = lengths(\n    st_intersects(nga, wpt_functional))) %>%\n  mutate(`wpt non functional` = lengths(\n    st_intersects(nga, wpt_non_functional))) %>%\n  mutate(`wpt unknown` = lengths(\n    st_intersects(nga, wpt_unknown))) %>%\n  \n  #add columns to compute %\n  mutate(pct_functional = `wpt functional`/`total wpt`) %>%\n  mutate(`pct_non-functional` = `wpt non functional`/`total wpt`) %>%\n  select(3:4, 8:9, 18:23)"
  },
  {
    "objectID": "Take-Home_Ex1/Take-Home_Ex1.html#visualizing-the-spatial-distribution-of-water-points",
    "href": "Take-Home_Ex1/Take-Home_Ex1.html#visualizing-the-spatial-distribution-of-water-points",
    "title": "Take Home Exercise 1 - Investigation of Water points in Nigeria",
    "section": "Visualizing the spatial distribution of water points",
    "text": "Visualizing the spatial distribution of water points\nWe could use breaks of the summary statistics by using percentiles, this is to help us find out the distribution of water points in each quantile.\n\nsummary(nga_wp$`wpt non functional`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00   12.25   34.00   41.60   60.75  278.00 \n\n\nIt is recommended not to use the default style with breaks as quantile since the range from the third quantile to the maximum is too wide and could result in a skewed representation. We compute the variance and standard deviation of non-functional water points first to better understand our dataset since we now need to decide which style is appropriate for the map.\n\nvar(nga_wp$`wpt non functional`)\n\n[1] 1376.914\n\nsd(nga_wp$`wpt non functional`) \n\n[1] 37.10679\n\n\nIt appears that this dataset has a very large variance.  Since the variance is so high, we would like to lower it. Using the kmeans style is one method to do this. n = 6 is choosen as after some experimentation, it appears that 6 is the optimal number of clusters.\nFunctions from the tmap packages is used to produce the map\nFirst we use tm_shape() + tm_fill(\"ADM1_EN\") to form Layer 1 of the map to form the 37 states of the map. The Pastel1 palette is used because it is difficult to read different shades of the same two to three colors; Pastel1 has more colors, making states more distinct.\nNext we use tm_shape() + tm_fill(\"wpt non functional\") to form Layer 2 of the map which are the non functional water points. The palette used in this case is Purple Red such that areas with very little water points are shaded with a very light colour.\nWe may switch between layers on the interactive map to superimpose the nonfunctional water locations. With so many polygons, putting it side by side can be challenging to interpret.\n\ntm_shape(nga) + \n \n  tm_fill(\"ADM1_EN\", palette = \"Pastel1\") +\n  tm_borders(alpha=0.5) + \n  tm_grid (alpha=0.2) +\n\n  tm_shape(nga_wp) + \n  tm_fill(\"wpt non functional\", \n          palette =\"PuRd\", style=\"kmeans\", n=6) +  \n  tm_borders(alpha=0.5) + \n  tm_grid (alpha=0.2) +\n  tm_layout(main.title=\"non functional WP - 2 Layer map\", \n            main.title.position=\"center\", \n            main.title.size=1.2, \n            #legend.height = 0.35, \n            #legend.width = 0.35, \n            frame = TRUE) \n\n\n\n\n\n\nUsing dplyr package, we can summarize find out which States has the most number non functional water points and which are the states that has the most number of LGAs by using the functions group_by, summarise and arrange\n\n#Sum of non functional water points \nnga_wp %>% \n  group_by(ADM1_EN) %>% \n   summarise(NF_Frequency = sum(`wpt non functional`), \n             #F_Frequency = sum(`wpt functional`),\n             Total_Freq = sum(`total wpt`),\n             NF_Ratio = (NF_Frequency / Total_Freq) * 100\n             ) %>% \n    arrange(desc(NF_Frequency))\n\nSimple feature collection with 37 features and 4 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n# A tibble: 37 × 5\n   ADM1_EN     NF_Frequency Total_Freq NF_Ratio                         geometry\n   <chr>              <int>      <int>    <dbl>                   <GEOMETRY [°]>\n 1 Osun                2118       5519     38.4 POLYGON ((4.910021 7.841812, 4.…\n 2 Kaduna              1912       4925     38.8 POLYGON ((8.273597 11.30846, 8.…\n 3 Kwara               1634       3531     46.3 POLYGON ((4.876071 9.157646, 4.…\n 4 Kano                1570       7125     22.0 POLYGON ((8.727456 12.21461, 8.…\n 5 Ondo                1552       2575     60.3 POLYGON ((5.937628 7.648777, 5.…\n 6 Katsina             1521       5465     27.8 POLYGON ((8.3992 13.0758, 8.390…\n 7 Jigawa              1517       9696     15.6 POLYGON ((8.399011 12.82706, 8.…\n 8 Cross River         1446       3492     41.4 MULTIPOLYGON (((8.818036 5.6935…\n 9 Plateau             1332       4701     28.3 POLYGON ((8.820398 10.38392, 8.…\n10 Oyo                 1329       4085     32.5 POLYGON ((4.024729 7.664918, 4.…\n# … with 27 more rows\n\n#sum of LGAs by states \nnga_wp %>% \n  group_by(ADM1_EN) %>% \n  summarise(count = n())%>% \n    arrange(desc(count))\n\nSimple feature collection with 37 features and 2 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n# A tibble: 37 × 3\n   ADM1_EN   count                                                      geometry\n   <chr>     <int>                                                <GEOMETRY [°]>\n 1 Kano         44 POLYGON ((8.727456 12.21461, 8.72491 12.21429, 8.721373 12.2…\n 2 Katsina      34 POLYGON ((8.3992 13.0758, 8.39043 13.08745, 8.38292 13.09174…\n 3 Oyo          33 POLYGON ((4.024729 7.664918, 4.039038 7.684978, 4.056281 7.6…\n 4 Akwa Ibom    31 MULTIPOLYGON (((7.530807 5.150259, 7.531415 5.146801, 7.5325…\n 5 Osun         30 POLYGON ((4.910021 7.841812, 4.911101 7.85011, 4.914135 7.85…\n 6 Borno        27 POLYGON ((14.58718 11.75277, 14.58861 11.75334, 14.59292 11.…\n 7 Imo          27 POLYGON ((7.422786 5.583626, 7.425965 5.585613, 7.426281 5.5…\n 8 Jigawa       27 POLYGON ((8.399011 12.82706, 8.390081 12.82528, 8.38304 12.8…\n 9 Delta        25 POLYGON ((5.985599 5.124185, 5.99217 5.117613, 5.995821 5.11…\n10 Niger        25 POLYGON ((7.250727 10.03942, 7.240785 10.03998, 7.232374 10.…\n# … with 27 more rows\n\n\n\nObservations\n\nAccording to the statistics, Osun has the highest number of non-operational water points - 2118 of them among the 37 states, followed by Kaduna (1912 water points) and Kwara (1634 water points).\nKano, despite being the State with the most number of LGAs (44), has only 1570 non functional water points (Ranked 4th) as compared to Osun that only comprises of 30 LGAs (Ranked 1st).\nIn contrast to Kaduna & Kwara, which are greater in size, Osun has 5519 water points, which is an interesting fact. In addition, nearly half of the water points in Kwara are not working.\nDespite having a larger territory, Ondo, the state directly south-east of Osun, has over 60% of its water points that are not operational.\nThe south-eastern and western regions of Nigeria appear to be the hotspots for the spread of inoperative water points.\nThere are no non-functional water points on Nigeria’s north-eastern coast. Using the tmap package, we plot the functional map to see if there are any water points in the region or if there are none at all.\nThis can assist us in figuring out whether the region in the north-east is succeeding in a way that can be transferred to other parts of the nation, or whether it is uninhabited or underdeveloped.\n\n\n  tm_shape(nga_wp) + \n  tm_fill(\"wpt functional\", \n          palette =\"PuRd\", style=\"kmeans\", n=6) +  \n  tm_borders(alpha=0.5) + \n  tm_grid (alpha=0.2) +\n  tm_layout(main.title=\"non functional WP - 2 Layer map\", \n            main.title.position=\"center\", \n            main.title.size=1.2, \n            #legend.height = 0.35, \n            #legend.width = 0.35, \n            frame = TRUE) \n\n\n\n\n\n\nThe north-eastern region of Nigeria has few to no water points, which suggests to us that it may be that the region is underdeveloped or uninhabited."
  },
  {
    "objectID": "Take-Home_Ex1/Take-Home_Ex1.html#spatially-constrained-cluster-analysis",
    "href": "Take-Home_Ex1/Take-Home_Ex1.html#spatially-constrained-cluster-analysis",
    "title": "Take Home Exercise 1 - Investigation of Water points in Nigeria",
    "section": "Spatially Constrained Cluster Analysis",
    "text": "Spatially Constrained Cluster Analysis\n\nComputing Spatial Weights\nWe need to find the spatial weights first before we can compute global spatial correlation statistics. The spatial weights is used to define the neighbourhood relationships between the geographical units\nWe use poly2nb() of spdep package to compute the contiguity weight matrix. The function builds a neighbour list based on regions with contiguous boundaries. Using queen’s contiguity weight matrix, we have\n\nwm_q = poly2nb(nga_wp)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\nLink number distribution:\n\n  0   1   2   3   4   5   6   7   8   9  10  11  12  14 \n  1   2  14  57 125 182 140 122  72  41  12   4   1   1 \n2 least connected regions:\n138 560 with 1 link\n1 most connected region:\n508 with 14 links\n\n\nFrom the results, there are 774 regions in Nigeria,\nUsing the Queen’s method, 1 of them has 14 neighbours, 1 of them is an isolated island (no neighbour), and 2 of them only has 1 neighbour\n\n\nBuilding the weights matrix\nAfter computing the spatial weights, we will need to build the weights matrix. From the result, of the neighbour list, there exist an isolated island. With this island, it is not recommended to use contiguity weight matrix as this island will have no neighbours at all.\nWith that in mind, we will use distance based weight matrix instead.\nBy using dnearneigh() of spdep package, we can determine the distance based weight matrix. The function looks for neighbours of regions points by Euclidean distance between the lower (>=) and upper (<=) bound or with the parameter longlat = True by great circle distance in km\n\n\nBuilding the distance based weight matrix\n\nFixed Weight distance matrix\nThe steps involved:\n\nUsing the k nearest neighbour (knn) algorithm, we can return a matrix with indices of points that belongs to the set of k nearest neighbours of each others by using knearneigh() of spdep\nConvert the knn objects into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb()\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the return objects by using unlist()\n\nBefore we can start building the matrix, we first need to find the coordinates\n\nThe longitude is the first variable in each centroid, this enables us to obtain only the longitude.\nThe latitude is the second variable in each centroid, this enables us to obtain only the latitude\n\nUsing the double bracket notation [[]] and the index, we can access the latitude & longitude values.\n\nlongitude = map_dbl(nga_wp$geometry, ~st_centroid(.x)[[1]]) #longitude index 1\nlatitude = map_dbl(nga_wp$geometry, ~st_centroid(.x)[[2]]) #latitude index 2\n\nAfter getting the longitude and latitudes, we can form the coordinates object named coord using cbind.Using the head function, we can inspect the elements of coord to verify if they are correctly formatted\n\ncoord = cbind(longitude, latitude)\nhead(coord)\n\n     longitude  latitude\n[1,]  7.372450  5.113107\n[2,]  7.352131  5.083219\n[3,] 13.322900 13.428835\n[4,]  6.847325  8.825812\n[5,]  7.771541  5.022061\n[6,]  8.219654  6.259845\n\n\n\n\nFind the lower and upper bounds\n\n#returns a list of nb objects from the result of k nearest neighbours matrix, Step 1 & 2\nk1 = knn2nb(knearneigh(coord)) \n#return the length of neighbour relationship edges and remove the list structures, Step 3 & 4\nk1dist = unlist(nbdists(k1, coord, longlat = TRUE)) \nsummary(k1dist)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  2.662  12.815  20.242  22.031  27.706  71.661 \n\n\nFrom the result, the largest first nearest neighbour is 71.66 km, hence by using this as the upper bound, we can be certain that all units will have at least 1 neighbour\n\n\nCreating the fixed distanced weight matrix\ndnearneigh will be used to compute the distance weight matrix\n\nwm_d72 = dnearneigh(coord, 0, 72, longlat = TRUE)\nwm_d72\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 18112 \nPercentage nonzero weights: 3.023323 \nAverage number of links: 23.40052 \n\n\nThe average number of links denotes the number of non zero links divided by the number of regions. In this case, a region has about on average between 24 neighbours\nWe will display the structure of the weight matrix is to combine table() and card() of spdep.\n\nThe card() function counts the neighboring regions in the neighbours list.\ntable() creates a contingency table of the counts for each combination of factor levels using cross-classifying factors.\n\n\ntable(nga_wp$ADM2_EN, card(wm_d72))\n\n                    \n                     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\n  Aba North          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Aba South          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Abadam             0 1 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Abaji              0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Abak               0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Abakaliki          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  1  0\n  Abeokuta North     0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Abeokuta South     0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Abi                0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Aboh-Mbaise        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Abua/Odual         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  1\n  Abuja Municipal    0 0 0 0 0 0 0 0 0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Adavi              0 0 0 0 0 0 0 0 0  0  0  0  1  0  0  0  0  0  0  0  0  0\n  Ado                0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ado-Odo/Ota        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ado Ekiti          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Afijio             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Afikpo North       0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Afikpo South       0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Agaie              0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Agatu              0 0 0 0 0 0 0 0 1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Agege              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Aguata             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Agwara             0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ahiazu-Mbaise      0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ahoada East        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ahoada West        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Aiyedade           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Aiyedire           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Aiyekire (Gbonyin) 0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ajaokuta           0 0 0 0 0 0 0 0 0  0  0  0  1  0  0  0  0  0  0  0  0  0\n  Ajeromi-Ifelodun   0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ajingi             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akamkpa            0 0 0 0 0 0 0 0 0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Akinyele           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akko               0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akoko-Edo          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  1  0\n  Akoko North East   0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akoko North West   0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akoko South East   0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  1  0\n  Akoko South West   0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  1\n  Akpabuyo           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Akuku Toru         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Akure North        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akure South        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akwanga            0 0 0 0 0 0 0 0 0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Albasu             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Aleiro             0 0 0 0 0 0 0 0 0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Alimosho           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Alkaleri           0 0 0 1 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Amuwo-Odofin       0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Anambra East       0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Anambra West       0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Anaocha            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Andoni             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Aninri             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Aniocha North      0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Aniocha South      0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Anka               0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ankpa              0 0 0 0 0 0 0 0 0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Apa                0 0 0 0 0 0 0 0 0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Apapa              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ardo-Kola          0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Arewa-Dandi        0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Argungu            0 0 0 0 0 0 0 0 0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Arochukwu          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Asa                0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Asari-Toru         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Askira/Uba         0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Atakumosa East     0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Atakumosa West     0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Atiba              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  1  0  0  0  0\n  Atigbo             0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Augie              0 0 0 0 0 0 0 0 0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Auyo               0 0 0 0 0 0 0 0 0  0  0  0  0  0  1  0  0  0  0  0  0  0\n  Awe                0 0 0 0 0 0 0 0 1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Awgu               0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Awka North         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Awka South         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ayamelum           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Babura             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Badagry            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  1  0\n  Bade               0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bagudo             0 0 1 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bagwai             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bakassi            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  1  0  0  0  0  0\n  Bakori             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Bakura             0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Balanga            0 0 0 0 0 0 0 0 0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Bali               1 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bama               0 0 1 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Barikin Ladi       0 0 0 0 0 0 0 0 0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Baruten            0 0 1 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bassa              0 0 0 0 0 0 1 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Batagarawa         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  1  0  0  0  0  0\n  Batsari            0 0 0 0 0 0 0 0 0  0  0  0  1  0  0  0  0  0  0  0  0  0\n  Bauchi             0 0 0 1 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Baure              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  1  0  0  0  0\n  Bayo               0 0 0 0 0 0 0 0 0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Bebeji             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bekwara            0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Bende              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Biase              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bichi              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bida               0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Billiri            0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bindawa            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Binji              0 0 0 0 0 0 0 0 0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Biriniwa           0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Birni Kudu         0 0 0 0 0 0 0 0 0  0  0  0  0  0  1  0  0  0  0  0  0  0\n  Birnin-Gwari       1 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Birnin Kebbi       0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Birnin Magaji      0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Biu                0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bodinga            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Bogoro             0 0 0 0 0 0 0 0 1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Boki               0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bokkos             0 0 0 0 0 0 0 0 0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Boluwaduro         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bomadi             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  1  0  0  0  0\n  Bonny              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Borgu              1 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Boripe             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bosso              0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Brass              0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Buji               0 0 0 0 0 0 0 0 0  0  0  0  0  0  1  0  0  0  0  0  0  0\n  Bukkuyum           0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bungudu            0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bunkure            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bunza              0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bursari            0 0 0 1 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Buruku             0 0 0 0 0 0 0 0 1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Burutu             0 0 0 0 0 0 0 0 0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Bwari              0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Calabar-Municipal  0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Calabar South      0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Chanchaga          0 0 0 0 0 0 0 0 1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Charanchi          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Chibok             0 0 1 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Chikun             0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dala               0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Damaturu           0 0 0 1 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Damban             0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dambatta           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Damboa             0 0 0 1 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dan Musa           0 0 0 0 0 0 0 0 0  0  0  0  0  0  1  0  0  0  0  0  0  0\n  Dandi              0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dandume            0 0 0 0 0 0 0 0 0  0  0  0  0  0  1  0  0  0  0  0  0  0\n  Dange-Shuni        0 0 0 0 0 0 0 0 0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Danja              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Darazo             0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dass               0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Daura              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Dawakin Kudu       0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dawakin Tofa       0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Degema             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dekina             0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Demsa              0 0 0 0 0 0 0 0 0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Dikwa              0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Doguwa             0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Doma               0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Donga              0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dukku              0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dunukofia          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dutse              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Dutsi              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dutsin-Ma          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  1  0\n  Eastern Obolo      0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ebonyi             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  1\n  Edati              0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ede North          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ede South          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Edu                0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Efon               0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Egbado North       0 0 0 0 0 0 0 0 0  0  0  0  0  0  1  0  0  0  0  0  0  0\n  Egbado South       0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Egbeda             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Egbedore           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Egor               0 0 0 0 0 0 0 0 0  0  0  0  1  0  0  0  0  0  0  0  0  0\n  Ehime-Mbano        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ejigbo             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ekeremor           0 0 0 0 0 0 0 0 1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Eket               0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ekiti              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ekiti East         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ekiti South West   0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ekiti West         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ekwusigo           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Eleme              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Emohua             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Emure              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Enugu East         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Enugu North        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Enugu South        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Epe                0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  1\n  Esan Central       0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Esan North East    0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Esan South East    0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Esan West          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Ese-Odo            0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Esit - Eket        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Essien Udim        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Etche              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ethiope East       0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  1\n  Ethiope West       0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  1  0\n  Eti-Osa            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Etim Ekpo          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Etinan             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Etsako Central     0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Etsako East        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  1  0  0  0  0\n  Etsako West        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  1  0  0  0  0\n  Etung              0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ewekoro            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ezeagu             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ezinihitte         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ezza North         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ezza South         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Fagge              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Fakai              0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Faskari            0 0 0 0 0 0 0 0 0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Fika               0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Fufore             0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Funakaye           0 0 0 0 0 0 0 0 1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Fune               0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Funtua             0 0 0 0 0 0 0 0 0  0  0  0  0  0  1  0  0  0  0  0  0  0\n  Gabasawa           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gada               0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gagarawa           0 0 0 0 0 0 0 0 0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Gamawa             0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Ganjuwa            0 0 0 1 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ganye              0 0 0 1 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Garki              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Garko              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Garum Mallam       0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gashaka            0 1 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gassol             1 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gaya               0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gbako              0 0 0 0 0 0 0 0 1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gboko              0 0 0 0 0 0 0 0 1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Geidam             0 0 1 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gezawa             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Giade              0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Girei              0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Giwa               0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Gokana             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gombe              0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Gombi              0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Goronyo            0 0 0 0 0 0 0 0 0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Gubio              0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gudu               0 0 0 1 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gujba              0 0 0 1 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gulani             0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Guma               0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Gumel              0 0 0 0 0 0 0 0 0  0  0  0  1  0  0  0  0  0  0  0  0  0\n  Gummi              0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gurara             0 0 0 0 0 0 0 0 0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Guri               0 0 0 0 0 0 0 0 0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Gusau              0 0 0 0 0 0 0 0 1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Guyuk              0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Guzamala           0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gwadabawa          0 0 0 0 0 0 0 0 0  0  0  0  1  0  0  0  0  0  0  0  0  0\n  Gwagwalada         0 0 0 0 0 0 0 0 0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Gwale              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gwandu             0 0 0 0 0 0 0 0 0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Gwaram             0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Gwarzo             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gwer East          0 0 0 0 0 0 0 0 0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Gwer West          0 0 0 0 0 0 0 0 0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Gwiwa              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gwoza              0 0 1 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Hadejia            0 0 0 0 0 0 0 0 0  0  0  0  0  0  1  0  0  0  0  0  0  0\n  Hawul              0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Hong               0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibadan North       0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibadan North East  0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibadan North West  0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibadan South East  0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibadan South West  0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibaji              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibarapa Central    0 0 0 0 0 0 0 0 0  0  0  0  0  0  1  0  0  0  0  0  0  0\n  Ibarapa East       0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibarapa North      0 0 0 0 0 0 0 0 0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Ibeju/Lekki        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibeno              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibesikpo Asutan    0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibi                0 0 0 1 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibiono Ibom        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Idah               0 0 0 0 0 0 0 0 0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Idanre             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Ideato North       0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ideato South       0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Idemili North      0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Idemili South      0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ido                0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ido-Osi            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ifako-Ijaye        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ife Central        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ife East           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ife North          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ife South          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ifedayo            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ifedore            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ifelodun           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  1  0  0  0  0  0\n  Ifo                0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Igabi              0 0 0 0 0 0 0 0 1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Igalamela-Odolu    0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  1  0  0  0  0\n  Igbo-Etiti         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Igbo-Eze North     0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Igbo-Eze South     0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  1\n  Igueben            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Ihiala             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ihitte/Uboma       0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ijebu East         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  1  0\n  Ijebu North        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ijebu North East   0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ijebu Ode          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ijero              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ijumu              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Ika                0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ika North East     0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ika South          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikara              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  1  0\n  Ikeduru            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikeja              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikenne             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikere              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikole              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikom               0 0 0 0 0 0 0 0 0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Ikono              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikorodu            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikot Abasi         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikot Ekpene        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikpoba-Okha        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Ikwerre            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikwo               0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Ikwuano            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ila                0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ilaje              0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ile-Oluji-Okeigbo  0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ilejemeji          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ilesha East        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ilesha West        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Illela             0 0 0 0 0 0 0 0 1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ilorin East        0 0 0 0 0 0 0 0 0  0  0  0  1  0  0  0  0  0  0  0  0  0\n  Ilorin South       0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ilorin West        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Imeko-Afon         0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ingawa             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ini                0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ipokia             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  1  0\n  Irele              0 0 0 0 0 0 0 0 0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Irepo              0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Irepodun           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Irepodun/Ifelodun  0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Irewole            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isa                0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ise/Orun           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Iseyin             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Ishielu            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isi-Uzo            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isiala-Ngwa North  0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isiala-Ngwa South  0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isiala Mbano       0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isin               0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isiukwuato         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isokan             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isoko North        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isoko South        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isu                0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Itas/Gadau         0 0 0 0 0 0 0 0 0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Itesiwaju          0 0 0 0 0 0 0 0 1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Itu                0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ivo                0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Iwajowa            0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Iwo                0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Izzi               0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  1  0  0  0  0\n  Jaba               0 0 0 0 0 0 0 0 1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jada               0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jahun              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  1  0\n  Jakusko            0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jalingo            0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jama'are           0 0 0 0 0 0 0 0 0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Jega               0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Jema'a             0 0 0 0 0 0 0 0 1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jere               0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jibia              0 0 0 0 0 0 0 0 0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Jos East           0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Jos North          0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Jos South          0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Kabba/Bunu         0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Kabo               0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kachia             0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kaduna North       0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kaduna South       0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kafin Hausa        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Kafur              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kaga               0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kagarko            0 0 0 0 0 0 0 0 1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kaiama             0 1 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kaita              0 0 0 0 0 0 0 0 0  0  0  0  0  0  1  0  0  0  0  0  0  0\n  Kajola             0 0 0 0 0 0 0 0 0  0  0  0  1  0  0  0  0  0  0  0  0  0\n  Kajuru             0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kala/Balge         0 0 1 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kalgo              0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Kaltungo           0 0 0 0 0 0 0 0 0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Kanam              0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kankara            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  1  0  0  0  0  0\n  Kanke              0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kankia             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kano Municipal     0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Karasuwa           0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Karaye             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Karim-Lamido       0 0 0 1 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Karu               0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Katagum            0 0 0 0 0 0 0 0 0  0  0  0  1  0  0  0  0  0  0  0  0  0\n  Katcha             0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Katsina            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  1  0  0  0  0  0\n  Katsina-Ala        0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kaugama            0 0 0 0 0 0 0 0 0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Kaura              0 0 0 0 0 0 0 0 0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Kaura Namoda       0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kauru              0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kazaure            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Keana              0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kebbe              0 0 0 0 0 0 0 0 1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Keffi              0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Khana              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kibiya             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kirfi              0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kiri Kasamma       0 0 0 0 0 0 0 0 0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Kiru               0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kiyawa             0 0 0 0 0 0 0 0 0  0  0  0  0  0  1  0  0  0  0  0  0  0\n  Kogi               0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Koko/Besse         0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kokona             0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kolokuma/Opokuma   0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Konduga            0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Konshisha          0 0 0 0 0 0 0 0 0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Kontagora          0 0 1 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kosofe             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kubau              0 0 0 0 0 0 0 0 1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kudan              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  1  0  0  0  0  0\n  Kuje               0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Kukawa             0 0 1 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kumbotso           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kunchi             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kura               0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kurfi              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  1  0  0  0  0\n  Kurmi              0 1 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kusada             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kwali              0 0 0 0 0 0 0 0 0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Kwami              0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kwande             0 0 0 0 0 0 0 0 1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kware              0 0 0 0 0 0 0 0 0  0  0  0  0  0  1  0  0  0  0  0  0  0\n  Kwaya Kusar        0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Lafia              0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Lagelu             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Lagos Island       0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Lagos Mainland     0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Lamurde            0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Langtang North     0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Langtang South     0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Lapai              0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Lau                0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Lavun              0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Lere               0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Logo               0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Lokoja             0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Machina            0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Madagali           0 0 0 1 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Madobi             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mafa               0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Magama             0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Magumeri           0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mai'adua           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Maiduguri          0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Maigatari          0 0 0 0 0 0 0 0 0  0  0  0  1  0  0  0  0  0  0  0  0  0\n  Maiha              0 0 0 1 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Maiyama            0 0 0 0 0 0 0 0 0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Makoda             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Makurdi            0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Malam Madori       0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Malumfashi         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mangu              0 0 0 0 0 0 0 0 0  0  0  0  1  0  0  0  0  0  0  0  0  0\n  Mani               0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Maradun            0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mariga             0 1 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Markafi            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Marte              0 0 0 1 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Maru               0 0 1 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mashegu            0 0 1 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mashi              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Matazu             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mayo-Belwa         0 0 0 0 0 0 0 0 0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Mbaitoli           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mbo                0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Michika            0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Miga               0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Mikang             0 0 0 0 0 0 0 0 1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Minjibir           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Misau              0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mkpat Enin         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Moba               0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mobbar             0 1 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mokwa              0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Monguno            0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mopa-Muro          0 0 0 0 0 0 0 0 0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Moro               0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mubi North         0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mubi South         0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Musawa             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  1\n  Mushin             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Muya               0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nafada             0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nangere            0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nasarawa           0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nasarawa-Eggon     0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ndokwa East        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ndokwa West        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nembe              0 0 0 0 0 0 0 0 0  0  0  0  1  0  0  0  0  0  0  0  0  0\n  Ngala              0 0 0 1 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nganzai            0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ngaski             0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ngor-Okpala        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nguru              0 0 0 0 0 0 0 0 1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ningi              0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Njaba              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Njikoka            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nkanu East         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nkanu West         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nkwerre            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nnewi North        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nnewi South        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nsit Atai          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nsit Ibom          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nsit Ubium         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nsukka             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Numan              0 0 0 0 0 0 0 0 0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Nwangele           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Obafemi-Owode      0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Obanliku           0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Obi                0 0 0 0 0 0 0 1 0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Obi Ngwa           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Obia/Akpor         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Obokun             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Obot Akara         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Obowo              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Obubra             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  1  0  0  0  0  0\n  Obudu              0 0 0 0 0 0 0 0 1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Odeda              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Odigbo             0 0 0 0 0 0 0 0 0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Odo-Otin           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Odogbolu           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Odukpani           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Offa               0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ofu                0 0 0 0 0 0 0 0 0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Ogba/Egbema/Ndoni  0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ogbadibo           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  1  0\n  Ogbaru             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ogbia              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  1  0  0  0  0  0\n  Ogbomosho North    0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ogbomosho South    0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ogo Oluwa          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ogoja              0 0 0 0 0 0 0 0 0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Ogori/Magongo      0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Ogu/Bolo           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ogun waterside     0 0 0 0 0 0 0 0 0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Oguta              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ohafia             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ohaji/Egbema       0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ohaozara           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ohaukwu            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ohimini            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Oji-River          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ojo                0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oju                0 0 0 0 0 0 0 0 0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Oke-Ero            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Okehi              0 0 0 0 0 0 0 0 0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Okene              0 0 0 0 0 0 0 0 0  0  0  0  0  0  1  0  0  0  0  0  0  0\n  Okigwe             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Okitipupa          0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Okobo              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Okpe               0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  1  0\n  Okpokwu            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Okrika             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ola-oluwa          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Olamabolo          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  1  0  0  0  0\n  Olorunda           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Olorunsogo         0 0 0 0 0 0 0 0 0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Oluyole            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Omala              0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Omumma             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ona-Ara            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ondo East          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ondo West          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Onicha             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Onitsha North      0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Onitsha South      0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Onna               0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Opobo/Nkoro        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oredo              0 0 0 0 0 0 0 0 0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Orelope            0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Orhionmwon         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ori Ire            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  1\n  Oriade             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Orlu               0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Orolu              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oron               0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Orsu               0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oru East           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oru West           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oruk Anam          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Orumba North       0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Orumba South       0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ose                0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Oshimili North     0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oshimili South     0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oshodi-Isolo       0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Osisioma Ngwa      0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Osogbo             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oturkpo            0 0 0 0 0 0 0 0 0  0  0  0  1  0  0  0  0  0  0  0  0  0\n  Ovia North East    0 0 0 0 0 0 0 0 0  0  0  0  1  0  0  0  0  0  0  0  0  0\n  Ovia South West    0 0 0 0 0 0 0 0 0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Owan East          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Owan West          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  1  0  0  0  0\n  Owerri-Municipal   0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Owerri North       0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Owerri West        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Owo                0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Oye                0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oyi                0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oyigbo             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oyo East           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oyo West           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oyun               0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Paikoro            0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Pankshin           0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Patani             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Pategi             0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Port-Harcourt      0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Potiskum           0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Qua'an Pan         0 0 0 0 0 0 0 0 1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Rabah              0 0 0 0 0 0 0 0 0  0  0  0  1  0  0  0  0  0  0  0  0  0\n  Rafi               0 0 0 1 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Rano               0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Remo North         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Rijau              0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Rimi               0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  1\n  Rimin Gado         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ringim             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Riyom              0 0 0 0 0 0 0 0 0  0  0  0  1  0  0  0  0  0  0  0  0  0\n  Rogo               0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Roni               0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Sabon-Gari         0 0 0 0 0 0 0 0 0  0  0  0  0  0  1  0  0  0  0  0  0  0\n  Sabon Birni        0 0 0 1 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Sabuwa             0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Safana             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Sagbama            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  1\n  Sakaba             0 0 0 1 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Saki East          0 0 0 0 0 0 0 0 1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Saki West          0 0 0 1 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Sandamu            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  1  0\n  Sanga              0 0 0 0 0 0 0 0 0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Sapele             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  1  0  0  0  0  0\n  Sardauna           1 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shagamu            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shagari            0 0 0 0 0 0 0 0 0  0  0  0  1  0  0  0  0  0  0  0  0  0\n  Shanga             0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shani              0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Shanono            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shelleng           0 0 0 0 0 0 0 0 0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Shendam            0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shinkafi           0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shira              0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Shiroro            0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shomgom            0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shomolu            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Silame             0 0 0 0 0 0 0 0 0  0  0  0  0  0  1  0  0  0  0  0  0  0\n  Soba               0 0 0 0 0 0 0 0 0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Sokoto North       0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Sokoto South       0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Song               0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Southern Ijaw      0 0 0 0 0 0 0 0 1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Sule-Tankarkar     0 0 0 0 0 0 0 0 0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Suleja             0 0 0 0 0 0 0 0 0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Sumaila            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  1  0  0  0  0\n  Suru               0 0 0 0 0 0 0 0 1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Surulere           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Tafa               0 0 0 0 0 0 0 0 0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Tafawa-Balewa      0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Tai                0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Takai              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  1  0  0  0  0  0\n  Takum              0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Talata Mafara      0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Tambuwal           0 0 0 0 0 0 0 0 0  0  0  0  1  0  0  0  0  0  0  0  0  0\n  Tangaza            0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Tarauni            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Tarka              0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Tarmua             0 0 0 1 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Taura              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  1  0  0  0  0\n  Tofa               0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Toro               0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Toto               0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Toungo             0 1 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Tsafe              0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Tsanyawa           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Tudun Wada         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  1  0  0  0  0\n  Tureta             0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Udenu              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  1\n  Udi                0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Udu                0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Udung Uko          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ughelli North      0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ughelli South      0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Ugwunagbo          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Uhunmwonde         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Ukanafun           0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ukum               0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ukwa East          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ukwa West          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ukwuani            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Umu-Nneochi        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Umuahia North      0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Umuahia South      0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ungogo             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Unuimo             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Uruan              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Urue-Offong/Oruko  0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ushongo            0 0 0 0 0 0 0 0 0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Ussa               0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Uvwie              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  1  0\n  Uyo                0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Uzo-Uwani          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Vandeikya          0 0 0 0 0 0 0 0 0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Wamako             0 0 0 0 0 0 0 0 0  0  0  0  0  0  1  0  0  0  0  0  0  0\n  Wamba              0 0 0 0 0 0 0 0 0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Warawa             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Warji              0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Warri North        0 0 0 0 0 0 0 0 0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Warri South        0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Warri South West   0 0 0 0 0 0 0 0 0  0  0  0  1  0  0  0  0  0  0  0  0  0\n  Wasagu/Danko       0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Wase               0 0 0 1 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Wudil              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Wukari             0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Wurno              0 0 0 0 0 0 0 0 0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Wushishi           0 0 0 0 0 0 1 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yabo               0 0 0 0 0 0 0 0 0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Yagba East         0 0 0 0 0 0 0 0 0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Yagba West         0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Yakurr             0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  1  0\n  Yala               0 0 0 0 0 0 0 0 0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Yamaltu/Deba       0 0 0 0 0 0 0 0 0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Yankwashi          0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  1  0\n  Yauri              0 0 0 0 1 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yenegoa            0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Yola North         0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yola South         0 0 0 0 0 0 0 0 1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yorro              0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yunusari           0 1 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yusufari           0 0 1 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Zaki               0 0 0 0 0 0 0 0 0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Zango              0 0 0 0 0 0 0 0 0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Zango-Kataf        0 0 0 0 0 0 0 0 0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Zaria              0 0 0 0 0 0 0 0 0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Zing               0 0 0 0 0 0 0 0 1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Zurmi              0 0 0 0 0 0 0 1 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Zuru               0 0 0 0 0 1 0 0 0  0  0  0  0  0  0  0  0  0  0  0  0  0\n                    \n                     23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41\n  Aba North           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Aba South           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Abadam              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Abaji               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Abak                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Abakaliki           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Abeokuta North      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Abeokuta South      0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0\n  Abi                 0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Aboh-Mbaise         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Abua/Odual          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Abuja Municipal     0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Adavi               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ado                 0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ado-Odo/Ota         0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ado Ekiti           0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0\n  Afijio              0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0\n  Afikpo North        0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Afikpo South        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1\n  Agaie               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Agatu               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Agege               0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Aguata              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Agwara              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ahiazu-Mbaise       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ahoada East         0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Ahoada West         0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Aiyedade            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Aiyedire            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Aiyekire (Gbonyin)  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Ajaokuta            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ajeromi-Ifelodun    0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ajingi              0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Akamkpa             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akinyele            0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0\n  Akko                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akoko-Edo           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akoko North East    0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akoko North West    0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akoko South East    0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akoko South West    0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akpabuyo            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akuku Toru          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akure North         0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akure South         0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akwanga             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Albasu              0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Aleiro              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Alimosho            0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Alkaleri            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Amuwo-Odofin        0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Anambra East        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Anambra West        0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0\n  Anaocha             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Andoni              0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Aninri              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Aniocha North       0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0\n  Aniocha South       0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0\n  Anka                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ankpa               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Apa                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Apapa               0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ardo-Kola           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Arewa-Dandi         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Argungu             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Arochukwu           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Asa                 0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Asari-Toru          0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Askira/Uba          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Atakumosa East      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Atakumosa West      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Atiba               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Atigbo              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Augie               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Auyo                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Awe                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Awgu                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Awka North          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Awka South          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ayamelum            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Babura              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Badagry             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bade                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bagudo              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bagwai              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Bakassi             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bakori              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bakura              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Balanga             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bali                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bama                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Barikin Ladi        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Baruten             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bassa               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Batagarawa          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Batsari             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bauchi              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Baure               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bayo                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bebeji              0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Bekwara             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bende               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Biase               0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Bichi               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0\n  Bida                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Billiri             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bindawa             0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Binji               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Biriniwa            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Birni Kudu          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Birnin-Gwari        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Birnin Kebbi        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Birnin Magaji       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Biu                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bodinga             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bogoro              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Boki                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bokkos              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Boluwaduro          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bomadi              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bonny               0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Borgu               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Boripe              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bosso               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Brass               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Buji                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bukkuyum            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bungudu             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bunkure             0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Bunza               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bursari             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Buruku              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Burutu              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bwari               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Calabar-Municipal   0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Calabar South       0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Chanchaga           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Charanchi           0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Chibok              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Chikun              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dala                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0\n  Damaturu            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Damban              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dambatta            0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Damboa              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dan Musa            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dandi               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dandume             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dange-Shuni         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Danja               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Darazo              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dass                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Daura               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dawakin Kudu        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Dawakin Tofa        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Degema              0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dekina              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Demsa               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dikwa               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Doguwa              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Doma                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Donga               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dukku               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dunukofia           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dutse               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dutsi               1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dutsin-Ma           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Eastern Obolo       0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0\n  Ebonyi              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Edati               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ede North           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ede South           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Edu                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Efon                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Egbado North        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Egbado South        0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Egbeda              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Egbedore            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Egor                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ehime-Mbano         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ejigbo              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ekeremor            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Eket                0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0\n  Ekiti               0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ekiti East          0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ekiti South West    0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ekiti West          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ekwusigo            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Eleme               0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0\n  Emohua              0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0\n  Emure               0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Enugu East          0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0\n  Enugu North         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Enugu South         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Epe                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Esan Central        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Esan North East     0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Esan South East     0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Esan West           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ese-Odo             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Esit - Eket         0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Essien Udim         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Etche               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ethiope East        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ethiope West        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Eti-Osa             0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Etim Ekpo           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Etinan              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Etsako Central      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Etsako East         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Etsako West         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Etung               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ewekoro             0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Ezeagu              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ezinihitte          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ezza North          0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ezza South          0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Fagge               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0\n  Fakai               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Faskari             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Fika                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Fufore              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Funakaye            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Fune                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Funtua              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gabasawa            0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Gada                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gagarawa            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gamawa              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ganjuwa             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ganye               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Garki               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Garko               0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Garum Mallam        0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Gashaka             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gassol              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gaya                0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Gbako               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gboko               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Geidam              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gezawa              0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0\n  Giade               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Girei               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Giwa                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gokana              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Gombe               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gombi               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Goronyo             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gubio               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gudu                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gujba               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gulani              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Guma                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gumel               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gummi               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gurara              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Guri                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gusau               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Guyuk               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Guzamala            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gwadabawa           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gwagwalada          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gwale               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Gwandu              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gwaram              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gwarzo              0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0\n  Gwer East           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gwer West           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gwiwa               0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gwoza               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Hadejia             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Hawul               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Hong                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibadan North        0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0\n  Ibadan North East   0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Ibadan North West   0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0\n  Ibadan South East   0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Ibadan South West   0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0\n  Ibaji               0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibarapa Central     0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibarapa East        0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibarapa North       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibeju/Lekki         0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibeno               0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Ibesikpo Asutan     0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibi                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibiono Ibom         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Idah                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Idanre              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ideato North        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ideato South        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Idemili North       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Idemili South       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ido                 0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Ido-Osi             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0\n  Ifako-Ijaye         0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Ife Central         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ife East            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1\n  Ife North           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ife South           0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Ifedayo             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ifedore             0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Ifelodun            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ifo                 0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Igabi               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Igalamela-Odolu     0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Igbo-Etiti          0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Igbo-Eze North      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Igbo-Eze South      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Igueben             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ihiala              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ihitte/Uboma        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ijebu East          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ijebu North         0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Ijebu North East    0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ijebu Ode           1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ijero               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ijumu               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ika                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ika North East      0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ika South           0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikara               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikeduru             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikeja               0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0\n  Ikenne              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1\n  Ikere               0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0\n  Ikole               0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikom                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikono               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikorodu             0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Ikot Abasi          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikot Ekpene         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikpoba-Okha         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikwerre             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikwo                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikwuano             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ila                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ilaje               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ile-Oluji-Okeigbo   0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0\n  Ilejemeji           0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0\n  Ilesha East         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ilesha West         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Illela              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ilorin East         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ilorin South        1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ilorin West         1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Imeko-Afon          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ingawa              0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Ini                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ipokia              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Irele               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Irepo               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Irepodun            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Irepodun/Ifelodun   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Irewole             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isa                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ise/Orun            0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Iseyin              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ishielu             0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Isi-Uzo             0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isiala-Ngwa North   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isiala-Ngwa South   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isiala Mbano        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isin                0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Isiukwuato          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isokan              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Isoko North         0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isoko South         1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isu                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Itas/Gadau          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Itesiwaju           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Itu                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ivo                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Iwajowa             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Iwo                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Izzi                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jaba                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jada                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jahun               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jakusko             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jalingo             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jama'are            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jega                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jema'a              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jere                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jibia               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jos East            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jos North           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jos South           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kabba/Bunu          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kabo                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Kachia              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kaduna North        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kaduna South        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kafin Hausa         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kafur               0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kaga                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kagarko             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kaiama              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kaita               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kajola              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kajuru              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kala/Balge          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kalgo               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kaltungo            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kanam               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kankara             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kanke               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kankia              0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kano Municipal      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Karasuwa            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Karaye              0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0\n  Karim-Lamido        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Karu                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Katagum             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Katcha              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Katsina             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Katsina-Ala         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kaugama             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kaura               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kaura Namoda        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kauru               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kazaure             0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Keana               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kebbe               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Keffi               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Khana               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kibiya              0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Kirfi               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kiri Kasamma        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kiru                0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Kiyawa              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kogi                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Koko/Besse          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kokona              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kolokuma/Opokuma    0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Konduga             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Konshisha           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kontagora           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kosofe              0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Kubau               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kudan               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kuje                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kukawa              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kumbotso            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Kunchi              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Kura                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Kurfi               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kurmi               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kusada              0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Kwali               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kwami               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kwande              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kware               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kwaya Kusar         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Lafia               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Lagelu              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0\n  Lagos Island        0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Lagos Mainland      0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Lamurde             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Langtang North      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Langtang South      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Lapai               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Lau                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Lavun               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Lere                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Logo                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Lokoja              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Machina             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Madagali            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Madobi              0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0\n  Mafa                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Magama              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Magumeri            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mai'adua            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Maiduguri           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Maigatari           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Maiha               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Maiyama             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Makoda              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Makurdi             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Malam Madori        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Malumfashi          1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mangu               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mani                0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Maradun             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mariga              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Markafi             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Marte               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Maru                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mashegu             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mashi               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Matazu              1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mayo-Belwa          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mbaitoli            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mbo                 0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Michika             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Miga                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mikang              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Minjibir            0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0\n  Misau               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mkpat Enin          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Moba                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Mobbar              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mokwa               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Monguno             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mopa-Muro           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Moro                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mubi North          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mubi South          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Musawa              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mushin              0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Muya                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nafada              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nangere             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nasarawa            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nasarawa-Eggon      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ndokwa East         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ndokwa West         0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Nembe               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ngala               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nganzai             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ngaski              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ngor-Okpala         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nguru               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ningi               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Njaba               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Njikoka             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nkanu East          0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Nkanu West          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1\n  Nkwerre             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nnewi North         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nnewi South         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nsit Atai           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Nsit Ibom           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nsit Ubium          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0\n  Nsukka              1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Numan               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nwangele            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Obafemi-Owode       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Obanliku            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Obi                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Obi Ngwa            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Obia/Akpor          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Obokun              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Obot Akara          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Obowo               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Obubra              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Obudu               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Odeda               0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Odigbo              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Odo-Otin            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Odogbolu            0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0\n  Odukpani            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Offa                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1\n  Ofu                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ogba/Egbema/Ndoni   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1\n  Ogbadibo            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ogbaru              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ogbia               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ogbomosho North     0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Ogbomosho South     0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0\n  Ogo Oluwa           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Ogoja               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ogori/Magongo       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ogu/Bolo            0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Ogun waterside      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oguta               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ohafia              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1\n  Ohaji/Egbema        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ohaozara            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Ohaukwu             0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ohimini             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oji-River           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ojo                 1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oju                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oke-Ero             0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Okehi               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Okene               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Okigwe              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Okitipupa           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Okobo               0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Okpe                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Okpokwu             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Okrika              0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0\n  Ola-oluwa           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Olamabolo           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Olorunda            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Olorunsogo          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oluyole             0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Omala               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Omumma              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ona-Ara             0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Ondo East           0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ondo West           1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Onicha              0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0\n  Onitsha North       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Onitsha South       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Onna                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0\n  Opobo/Nkoro         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Oredo               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Orelope             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Orhionmwon          1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ori Ire             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oriade              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Orlu                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Orolu               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oron                0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Orsu                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oru East            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oru West            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oruk Anam           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Orumba North        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Orumba South        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ose                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oshimili North      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Oshimili South      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oshodi-Isolo        0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Osisioma Ngwa       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Osogbo              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oturkpo             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ovia North East     0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ovia South West     0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Owan East           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Owan West           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Owerri-Municipal    0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Owerri North        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Owerri West         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Owo                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oye                 0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0\n  Oyi                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oyigbo              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oyo East            0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0\n  Oyo West            0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oyun                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0\n  Paikoro             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Pankshin            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Patani              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Pategi              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Port-Harcourt       0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Potiskum            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Qua'an Pan          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Rabah               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Rafi                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Rano                0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Remo North          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Rijau               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Rimi                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Rimin Gado          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Ringim              0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Riyom               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Rogo                1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Roni                0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Sabon-Gari          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Sabon Birni         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Sabuwa              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Safana              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Sagbama             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Sakaba              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Saki East           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Saki West           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Sandamu             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Sanga               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Sapele              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Sardauna            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shagamu             0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Shagari             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shanga              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shani               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shanono             0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0\n  Shelleng            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shendam             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shinkafi            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shira               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shiroro             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shomgom             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shomolu             0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Silame              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Soba                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Sokoto North        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Sokoto South        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Song                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Southern Ijaw       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Sule-Tankarkar      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Suleja              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Sumaila             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Suru                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Surulere            0  0  0  0  0  0  1  0  0  0  0  0  0  1  0  0  0  0  0\n  Tafa                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Tafawa-Balewa       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Tai                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1\n  Takai               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Takum               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Talata Mafara       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Tambuwal            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Tangaza             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Tarauni             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Tarka               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Tarmua              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Taura               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Tofa                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Toro                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Toto                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Toungo              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Tsafe               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Tsanyawa            0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0\n  Tudun Wada          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Tureta              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Udenu               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Udi                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0\n  Udu                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Udung Uko           0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ughelli North       1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ughelli South       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ugwunagbo           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Uhunmwonde          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ukanafun            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ukum                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ukwa East           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ukwa West           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ukwuani             0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Umu-Nneochi         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Umuahia North       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Umuahia South       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ungogo              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1\n  Unuimo              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Uruan               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1\n  Urue-Offong/Oruko   0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Ushongo             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ussa                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Uvwie               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Uyo                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Uzo-Uwani           0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Vandeikya           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Wamako              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Wamba               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Warawa              0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0\n  Warji               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Warri North         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Warri South         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Warri South West    0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Wasagu/Danko        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Wase                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Wudil               0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0\n  Wukari              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Wurno               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Wushishi            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yabo                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yagba East          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yagba West          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yakurr              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yala                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yamaltu/Deba        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yankwashi           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yauri               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yenegoa             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yola North          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yola South          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yorro               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yunusari            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yusufari            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Zaki                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Zango               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Zango-Kataf         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Zaria               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Zing                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Zurmi               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Zuru                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n                    \n                     42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60\n  Aba North           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Aba South           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Abadam              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Abaji               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Abak                0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0\n  Abakaliki           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Abeokuta North      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Abeokuta South      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Abi                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Aboh-Mbaise         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Abua/Odual          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Abuja Municipal     0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Adavi               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ado                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ado-Odo/Ota         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ado Ekiti           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Afijio              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Afikpo North        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Afikpo South        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Agaie               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Agatu               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Agege               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Aguata              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Agwara              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ahiazu-Mbaise       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ahoada East         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ahoada West         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Aiyedade            0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Aiyedire            0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Aiyekire (Gbonyin)  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ajaokuta            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ajeromi-Ifelodun    0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ajingi              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akamkpa             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akinyele            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akko                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akoko-Edo           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akoko North East    0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akoko North West    0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akoko South East    0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akoko South West    0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akpabuyo            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akuku Toru          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akure North         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akure South         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Akwanga             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Albasu              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Aleiro              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Alimosho            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Alkaleri            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Amuwo-Odofin        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Anambra East        0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Anambra West        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Anaocha             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Andoni              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Aninri              0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0\n  Aniocha North       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Aniocha South       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Anka                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ankpa               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Apa                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Apapa               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ardo-Kola           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Arewa-Dandi         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Argungu             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Arochukwu           0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Asa                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Asari-Toru          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Askira/Uba          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Atakumosa East      0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Atakumosa West      0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Atiba               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Atigbo              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Augie               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Auyo                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Awe                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Awgu                0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0\n  Awka North          0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0\n  Awka South          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Ayamelum            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Babura              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Badagry             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bade                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bagudo              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bagwai              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bakassi             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bakori              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bakura              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Balanga             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bali                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bama                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Barikin Ladi        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Baruten             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bassa               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Batagarawa          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Batsari             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bauchi              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Baure               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bayo                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bebeji              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bekwara             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bende               0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0\n  Biase               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bichi               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bida                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Billiri             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bindawa             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Binji               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Biriniwa            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Birni Kudu          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Birnin-Gwari        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Birnin Kebbi        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Birnin Magaji       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Biu                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bodinga             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bogoro              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Boki                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bokkos              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Boluwaduro          0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bomadi              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bonny               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Borgu               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Boripe              0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Bosso               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Brass               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Buji                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bukkuyum            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bungudu             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bunkure             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bunza               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bursari             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Buruku              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Burutu              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Bwari               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Calabar-Municipal   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Calabar South       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Chanchaga           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Charanchi           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Chibok              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Chikun              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dala                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Damaturu            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Damban              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dambatta            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Damboa              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dan Musa            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dandi               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dandume             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dange-Shuni         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Danja               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Darazo              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dass                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Daura               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dawakin Kudu        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dawakin Tofa        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Degema              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dekina              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Demsa               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dikwa               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Doguwa              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Doma                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Donga               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dukku               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dunukofia           0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Dutse               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dutsi               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Dutsin-Ma           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Eastern Obolo       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ebonyi              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Edati               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ede North           0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Ede South           0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Edu                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Efon                0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Egbado North        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Egbado South        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Egbeda              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Egbedore            0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Egor                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ehime-Mbano         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ejigbo              0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ekeremor            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Eket                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ekiti               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ekiti East          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ekiti South West    0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ekiti West          0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ekwusigo            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Eleme               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Emohua              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Emure               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Enugu East          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Enugu North         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Enugu South         1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Epe                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Esan Central        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Esan North East     0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Esan South East     0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Esan West           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ese-Odo             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Esit - Eket         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Essien Udim         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Etche               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Ethiope East        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ethiope West        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Eti-Osa             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Etim Ekpo           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1\n  Etinan              0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Etsako Central      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Etsako East         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Etsako West         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Etung               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ewekoro             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ezeagu              0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ezinihitte          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ezza North          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ezza South          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Fagge               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Fakai               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Faskari             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Fika                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Fufore              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Funakaye            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Fune                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Funtua              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gabasawa            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gada                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gagarawa            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gamawa              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ganjuwa             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ganye               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Garki               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Garko               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Garum Mallam        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gashaka             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gassol              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gaya                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gbako               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gboko               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Geidam              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gezawa              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Giade               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Girei               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Giwa                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gokana              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gombe               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gombi               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Goronyo             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gubio               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gudu                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gujba               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gulani              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Guma                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gumel               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gummi               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gurara              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Guri                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gusau               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Guyuk               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Guzamala            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gwadabawa           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gwagwalada          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gwale               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gwandu              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gwaram              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gwarzo              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gwer East           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gwer West           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gwiwa               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Gwoza               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Hadejia             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Hawul               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Hong                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibadan North        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibadan North East   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibadan North West   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibadan South East   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibadan South West   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibaji               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibarapa Central     0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibarapa East        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibarapa North       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibeju/Lekki         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibeno               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibesikpo Asutan     0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibi                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ibiono Ibom         0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Idah                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Idanre              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ideato North        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1\n  Ideato South        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Idemili North       0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Idemili South       0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Ido                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ido-Osi             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ifako-Ijaye         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ife Central         0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Ife East            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ife North           0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ife South           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ifedayo             0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ifedore             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ifelodun            0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ifo                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Igabi               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Igalamela-Odolu     0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Igbo-Etiti          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Igbo-Eze North      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Igbo-Eze South      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Igueben             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ihiala              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Ihitte/Uboma        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ijebu East          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ijebu North         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ijebu North East    0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ijebu Ode           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ijero               0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ijumu               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ika                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1\n  Ika North East      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ika South           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikara               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikeduru             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikeja               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikenne              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikere               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikole               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikom                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikono               0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0\n  Ikorodu             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikot Abasi          0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikot Ekpene         0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0\n  Ikpoba-Okha         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikwerre             0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikwo                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ikwuano             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ila                 0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ilaje               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ile-Oluji-Okeigbo   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ilejemeji           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ilesha East         0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Ilesha West         0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Illela              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ilorin East         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ilorin South        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ilorin West         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Imeko-Afon          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ingawa              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ini                 0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0\n  Ipokia              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Irele               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Irepo               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Irepodun            0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Irepodun/Ifelodun   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Irewole             1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isa                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ise/Orun            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Iseyin              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ishielu             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isi-Uzo             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isiala-Ngwa North   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isiala-Ngwa South   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isiala Mbano        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isin                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isiukwuato          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isokan              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isoko North         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isoko South         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Isu                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Itas/Gadau          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Itesiwaju           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Itu                 0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ivo                 0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0\n  Iwajowa             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Iwo                 0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Izzi                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jaba                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jada                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jahun               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jakusko             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jalingo             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jama'are            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jega                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jema'a              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jere                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jibia               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jos East            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jos North           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Jos South           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kabba/Bunu          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kabo                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kachia              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kaduna North        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kaduna South        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kafin Hausa         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kafur               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kaga                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kagarko             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kaiama              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kaita               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kajola              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kajuru              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kala/Balge          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kalgo               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kaltungo            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kanam               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kankara             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kanke               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kankia              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kano Municipal      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Karasuwa            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Karaye              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Karim-Lamido        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Karu                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Katagum             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Katcha              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Katsina             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Katsina-Ala         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kaugama             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kaura               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kaura Namoda        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kauru               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kazaure             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Keana               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kebbe               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Keffi               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Khana               0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kibiya              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kirfi               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kiri Kasamma        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kiru                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kiyawa              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kogi                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Koko/Besse          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kokona              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kolokuma/Opokuma    0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Konduga             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Konshisha           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kontagora           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kosofe              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kubau               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kudan               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kuje                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kukawa              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kumbotso            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kunchi              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kura                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kurfi               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kurmi               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kusada              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kwali               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kwami               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kwande              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kware               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Kwaya Kusar         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Lafia               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Lagelu              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Lagos Island        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Lagos Mainland      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Lamurde             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Langtang North      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Langtang South      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Lapai               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Lau                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Lavun               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Lere                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Logo                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Lokoja              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Machina             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Madagali            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Madobi              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mafa                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Magama              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Magumeri            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mai'adua            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Maiduguri           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Maigatari           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Maiha               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Maiyama             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Makoda              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Makurdi             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Malam Madori        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Malumfashi          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mangu               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mani                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Maradun             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mariga              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Markafi             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Marte               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Maru                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mashegu             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mashi               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Matazu              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mayo-Belwa          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mbaitoli            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mbo                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Michika             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Miga                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mikang              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Minjibir            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Misau               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mkpat Enin          0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Moba                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mobbar              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mokwa               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Monguno             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mopa-Muro           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Moro                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mubi North          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mubi South          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Musawa              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Mushin              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Muya                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nafada              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nangere             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nasarawa            1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nasarawa-Eggon      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ndokwa East         0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ndokwa West         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nembe               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ngala               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nganzai             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ngaski              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ngor-Okpala         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nguru               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ningi               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Njaba               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1\n  Njikoka             0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0\n  Nkanu East          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nkanu West          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nkwerre             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nnewi North         0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0\n  Nnewi South         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nsit Atai           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nsit Ibom           0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Nsit Ubium          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nsukka              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Numan               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Nwangele            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Obafemi-Owode       0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Obanliku            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Obi                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Obi Ngwa            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Obia/Akpor          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Obokun              0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0\n  Obot Akara          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Obowo               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Obubra              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Obudu               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Odeda               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Odigbo              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Odo-Otin            0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Odogbolu            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Odukpani            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Offa                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ofu                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ogba/Egbema/Ndoni   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ogbadibo            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ogbaru              0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0\n  Ogbia               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ogbomosho North     0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ogbomosho South     0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ogo Oluwa           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ogoja               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ogori/Magongo       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ogu/Bolo            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ogun waterside      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oguta               0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Ohafia              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ohaji/Egbema        0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Ohaozara            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ohaukwu             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ohimini             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oji-River           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ojo                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oju                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oke-Ero             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Okehi               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Okene               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Okigwe              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Okitipupa           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Okobo               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Okpe                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Okpokwu             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Okrika              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ola-oluwa           0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Olamabolo           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Olorunda            0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Olorunsogo          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oluyole             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Omala               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Omumma              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0\n  Ona-Ara             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ondo East           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ondo West           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Onicha              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Onitsha North       0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Onitsha South       0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Onna                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Opobo/Nkoro         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oredo               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Orelope             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Orhionmwon          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ori Ire             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oriade              0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Orlu                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Orolu               0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oron                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Orsu                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1\n  Oru East            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0\n  Oru West            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Oruk Anam           0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0\n  Orumba North        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Orumba South        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ose                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oshimili North      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oshimili South      0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oshodi-Isolo        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Osisioma Ngwa       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Osogbo              0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oturkpo             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ovia North East     0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ovia South West     0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Owan East           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Owan West           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Owerri-Municipal    0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1\n  Owerri North        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0\n  Owerri West         0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0\n  Owo                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oye                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oyi                 0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0\n  Oyigbo              0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Oyo East            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oyo West            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Oyun                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Paikoro             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Pankshin            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Patani              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Pategi              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Port-Harcourt       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Potiskum            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Qua'an Pan          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Rabah               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Rafi                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Rano                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Remo North          1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Rijau               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Rimi                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Rimin Gado          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ringim              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Riyom               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Rogo                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Roni                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Sabon-Gari          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Sabon Birni         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Sabuwa              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Safana              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Sagbama             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Sakaba              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Saki East           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Saki West           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Sandamu             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Sanga               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Sapele              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Sardauna            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shagamu             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shagari             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shanga              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shani               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shanono             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shelleng            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shendam             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shinkafi            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shira               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shiroro             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shomgom             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Shomolu             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Silame              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Soba                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Sokoto North        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Sokoto South        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Song                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Southern Ijaw       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Sule-Tankarkar      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Suleja              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Sumaila             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Suru                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Surulere            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Tafa                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Tafawa-Balewa       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Tai                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Takai               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Takum               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Talata Mafara       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Tambuwal            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Tangaza             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Tarauni             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Tarka               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Tarmua              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Taura               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Tofa                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Toro                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Toto                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Toungo              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Tsafe               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Tsanyawa            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Tudun Wada          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Tureta              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Udenu               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Udi                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Udu                 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Udung Uko           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ughelli North       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ughelli South       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ugwunagbo           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Uhunmwonde          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ukanafun            0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0\n  Ukum                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ukwa East           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0\n  Ukwa West           0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0\n  Ukwuani             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Umu-Nneochi         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Umuahia North       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Umuahia South       0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ungogo              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Unuimo              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Uruan               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Urue-Offong/Oruko   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ushongo             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Ussa                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Uvwie               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Uyo                 0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0\n  Uzo-Uwani           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Vandeikya           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Wamako              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Wamba               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Warawa              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Warji               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Warri North         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Warri South         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Warri South West    0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Wasagu/Danko        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Wase                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Wudil               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Wukari              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Wurno               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Wushishi            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yabo                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yagba East          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yagba West          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yakurr              0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yala                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yamaltu/Deba        0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yankwashi           0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yauri               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yenegoa             0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yola North          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yola South          0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yorro               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yunusari            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Yusufari            0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Zaki                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Zango               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Zango-Kataf         0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Zaria               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Zing                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Zurmi               0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  Zuru                0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n                    \n                     61 62 63 64 65 67 68 70\n  Aba North           0  0  1  0  0  0  0  0\n  Aba South           0  1  0  0  0  0  0  0\n  Abadam              0  0  0  0  0  0  0  0\n  Abaji               0  0  0  0  0  0  0  0\n  Abak                0  0  0  0  0  0  0  0\n  Abakaliki           0  0  0  0  0  0  0  0\n  Abeokuta North      0  0  0  0  0  0  0  0\n  Abeokuta South      0  0  0  0  0  0  0  0\n  Abi                 0  0  0  0  0  0  0  0\n  Aboh-Mbaise         0  0  1  0  0  0  0  0\n  Abua/Odual          0  0  0  0  0  0  0  0\n  Abuja Municipal     0  0  0  0  0  0  0  0\n  Adavi               0  0  0  0  0  0  0  0\n  Ado                 0  0  0  0  0  0  0  0\n  Ado-Odo/Ota         0  0  0  0  0  0  0  0\n  Ado Ekiti           0  0  0  0  0  0  0  0\n  Afijio              0  0  0  0  0  0  0  0\n  Afikpo North        0  0  0  0  0  0  0  0\n  Afikpo South        0  0  0  0  0  0  0  0\n  Agaie               0  0  0  0  0  0  0  0\n  Agatu               0  0  0  0  0  0  0  0\n  Agege               0  0  0  0  0  0  0  0\n  Aguata              0  0  0  1  0  0  0  0\n  Agwara              0  0  0  0  0  0  0  0\n  Ahiazu-Mbaise       0  0  0  0  0  0  1  0\n  Ahoada East         0  0  0  0  0  0  0  0\n  Ahoada West         0  0  0  0  0  0  0  0\n  Aiyedade            0  0  0  0  0  0  0  0\n  Aiyedire            0  0  0  0  0  0  0  0\n  Aiyekire (Gbonyin)  0  0  0  0  0  0  0  0\n  Ajaokuta            0  0  0  0  0  0  0  0\n  Ajeromi-Ifelodun    0  0  0  0  0  0  0  0\n  Ajingi              0  0  0  0  0  0  0  0\n  Akamkpa             0  0  0  0  0  0  0  0\n  Akinyele            0  0  0  0  0  0  0  0\n  Akko                0  0  0  0  0  0  0  0\n  Akoko-Edo           0  0  0  0  0  0  0  0\n  Akoko North East    0  0  0  0  0  0  0  0\n  Akoko North West    0  0  0  0  0  0  0  0\n  Akoko South East    0  0  0  0  0  0  0  0\n  Akoko South West    0  0  0  0  0  0  0  0\n  Akpabuyo            0  0  0  0  0  0  0  0\n  Akuku Toru          0  0  0  0  0  0  0  0\n  Akure North         0  0  0  0  0  0  0  0\n  Akure South         0  0  0  0  0  0  0  0\n  Akwanga             0  0  0  0  0  0  0  0\n  Albasu              0  0  0  0  0  0  0  0\n  Aleiro              0  0  0  0  0  0  0  0\n  Alimosho            0  0  0  0  0  0  0  0\n  Alkaleri            0  0  0  0  0  0  0  0\n  Amuwo-Odofin        0  0  0  0  0  0  0  0\n  Anambra East        0  0  0  0  0  0  0  0\n  Anambra West        0  0  0  0  0  0  0  0\n  Anaocha             0  0  0  0  0  0  0  0\n  Andoni              0  0  0  0  0  0  0  0\n  Aninri              0  0  0  0  0  0  0  0\n  Aniocha North       0  0  0  0  0  0  0  0\n  Aniocha South       0  0  0  0  0  0  0  0\n  Anka                0  0  0  0  0  0  0  0\n  Ankpa               0  0  0  0  0  0  0  0\n  Apa                 0  0  0  0  0  0  0  0\n  Apapa               0  0  0  0  0  0  0  0\n  Ardo-Kola           0  0  0  0  0  0  0  0\n  Arewa-Dandi         0  0  0  0  0  0  0  0\n  Argungu             0  0  0  0  0  0  0  0\n  Arochukwu           0  0  0  0  0  0  0  0\n  Asa                 0  0  0  0  0  0  0  0\n  Asari-Toru          0  0  0  0  0  0  0  0\n  Askira/Uba          0  0  0  0  0  0  0  0\n  Atakumosa East      0  0  0  0  0  0  0  0\n  Atakumosa West      0  0  0  0  0  0  0  0\n  Atiba               0  0  0  0  0  0  0  0\n  Atigbo              0  0  0  0  0  0  0  0\n  Augie               0  0  0  0  0  0  0  0\n  Auyo                0  0  0  0  0  0  0  0\n  Awe                 0  0  0  0  0  0  0  0\n  Awgu                0  0  0  0  0  0  0  0\n  Awka North          0  0  0  0  0  0  0  0\n  Awka South          0  0  0  0  0  0  0  0\n  Ayamelum            0  0  0  0  0  0  0  0\n  Babura              0  0  0  0  0  0  0  0\n  Badagry             0  0  0  0  0  0  0  0\n  Bade                0  0  0  0  0  0  0  0\n  Bagudo              0  0  0  0  0  0  0  0\n  Bagwai              0  0  0  0  0  0  0  0\n  Bakassi             0  0  0  0  0  0  0  0\n  Bakori              0  0  0  0  0  0  0  0\n  Bakura              0  0  0  0  0  0  0  0\n  Balanga             0  0  0  0  0  0  0  0\n  Bali                0  0  0  0  0  0  0  0\n  Bama                0  0  0  0  0  0  0  0\n  Barikin Ladi        0  0  0  0  0  0  0  0\n  Baruten             0  0  0  0  0  0  0  0\n  Bassa               0  0  0  0  0  0  0  0\n  Batagarawa          0  0  0  0  0  0  0  0\n  Batsari             0  0  0  0  0  0  0  0\n  Bauchi              0  0  0  0  0  0  0  0\n  Baure               0  0  0  0  0  0  0  0\n  Bayo                0  0  0  0  0  0  0  0\n  Bebeji              0  0  0  0  0  0  0  0\n  Bekwara             0  0  0  0  0  0  0  0\n  Bende               0  0  0  0  0  0  0  0\n  Biase               0  0  0  0  0  0  0  0\n  Bichi               0  0  0  0  0  0  0  0\n  Bida                0  0  0  0  0  0  0  0\n  Billiri             0  0  0  0  0  0  0  0\n  Bindawa             0  0  0  0  0  0  0  0\n  Binji               0  0  0  0  0  0  0  0\n  Biriniwa            0  0  0  0  0  0  0  0\n  Birni Kudu          0  0  0  0  0  0  0  0\n  Birnin-Gwari        0  0  0  0  0  0  0  0\n  Birnin Kebbi        0  0  0  0  0  0  0  0\n  Birnin Magaji       0  0  0  0  0  0  0  0\n  Biu                 0  0  0  0  0  0  0  0\n  Bodinga             0  0  0  0  0  0  0  0\n  Bogoro              0  0  0  0  0  0  0  0\n  Boki                0  0  0  0  0  0  0  0\n  Bokkos              0  0  0  0  0  0  0  0\n  Boluwaduro          0  0  0  0  0  0  0  0\n  Bomadi              0  0  0  0  0  0  0  0\n  Bonny               0  0  0  0  0  0  0  0\n  Borgu               0  0  0  0  0  0  0  0\n  Boripe              0  0  0  0  0  0  0  0\n  Bosso               0  0  0  0  0  0  0  0\n  Brass               0  0  0  0  0  0  0  0\n  Buji                0  0  0  0  0  0  0  0\n  Bukkuyum            0  0  0  0  0  0  0  0\n  Bungudu             0  0  0  0  0  0  0  0\n  Bunkure             0  0  0  0  0  0  0  0\n  Bunza               0  0  0  0  0  0  0  0\n  Bursari             0  0  0  0  0  0  0  0\n  Buruku              0  0  0  0  0  0  0  0\n  Burutu              0  0  0  0  0  0  0  0\n  Bwari               0  0  0  0  0  0  0  0\n  Calabar-Municipal   0  0  0  0  0  0  0  0\n  Calabar South       0  0  0  0  0  0  0  0\n  Chanchaga           0  0  0  0  0  0  0  0\n  Charanchi           0  0  0  0  0  0  0  0\n  Chibok              0  0  0  0  0  0  0  0\n  Chikun              0  0  0  0  0  0  0  0\n  Dala                0  0  0  0  0  0  0  0\n  Damaturu            0  0  0  0  0  0  0  0\n  Damban              0  0  0  0  0  0  0  0\n  Dambatta            0  0  0  0  0  0  0  0\n  Damboa              0  0  0  0  0  0  0  0\n  Dan Musa            0  0  0  0  0  0  0  0\n  Dandi               0  0  0  0  0  0  0  0\n  Dandume             0  0  0  0  0  0  0  0\n  Dange-Shuni         0  0  0  0  0  0  0  0\n  Danja               0  0  0  0  0  0  0  0\n  Darazo              0  0  0  0  0  0  0  0\n  Dass                0  0  0  0  0  0  0  0\n  Daura               0  0  0  0  0  0  0  0\n  Dawakin Kudu        0  0  0  0  0  0  0  0\n  Dawakin Tofa        0  0  0  0  0  0  0  0\n  Degema              0  0  0  0  0  0  0  0\n  Dekina              0  0  0  0  0  0  0  0\n  Demsa               0  0  0  0  0  0  0  0\n  Dikwa               0  0  0  0  0  0  0  0\n  Doguwa              0  0  0  0  0  0  0  0\n  Doma                0  0  0  0  0  0  0  0\n  Donga               0  0  0  0  0  0  0  0\n  Dukku               0  0  0  0  0  0  0  0\n  Dunukofia           0  0  0  0  0  0  0  0\n  Dutse               0  0  0  0  0  0  0  0\n  Dutsi               0  0  0  0  0  0  0  0\n  Dutsin-Ma           0  0  0  0  0  0  0  0\n  Eastern Obolo       0  0  0  0  0  0  0  0\n  Ebonyi              0  0  0  0  0  0  0  0\n  Edati               0  0  0  0  0  0  0  0\n  Ede North           0  0  0  0  0  0  0  0\n  Ede South           0  0  0  0  0  0  0  0\n  Edu                 0  0  0  0  0  0  0  0\n  Efon                0  0  0  0  0  0  0  0\n  Egbado North        0  0  0  0  0  0  0  0\n  Egbado South        0  0  0  0  0  0  0  0\n  Egbeda              0  0  0  0  0  0  0  0\n  Egbedore            0  0  0  0  0  0  0  0\n  Egor                0  0  0  0  0  0  0  0\n  Ehime-Mbano         0  0  0  0  1  0  0  0\n  Ejigbo              0  0  0  0  0  0  0  0\n  Ekeremor            0  0  0  0  0  0  0  0\n  Eket                0  0  0  0  0  0  0  0\n  Ekiti               0  0  0  0  0  0  0  0\n  Ekiti East          0  0  0  0  0  0  0  0\n  Ekiti South West    0  0  0  0  0  0  0  0\n  Ekiti West          0  0  0  0  0  0  0  0\n  Ekwusigo            0  0  0  0  0  0  0  0\n  Eleme               0  0  0  0  0  0  0  0\n  Emohua              0  0  0  0  0  0  0  0\n  Emure               0  0  0  0  0  0  0  0\n  Enugu East          0  0  0  0  0  0  0  0\n  Enugu North         0  0  0  0  0  0  0  0\n  Enugu South         0  0  0  0  0  0  0  0\n  Epe                 0  0  0  0  0  0  0  0\n  Esan Central        0  0  0  0  0  0  0  0\n  Esan North East     0  0  0  0  0  0  0  0\n  Esan South East     0  0  0  0  0  0  0  0\n  Esan West           0  0  0  0  0  0  0  0\n  Ese-Odo             0  0  0  0  0  0  0  0\n  Esit - Eket         0  0  0  0  0  0  0  0\n  Essien Udim         0  0  0  0  0  0  0  0\n  Etche               0  0  0  0  0  0  0  0\n  Ethiope East        0  0  0  0  0  0  0  0\n  Ethiope West        0  0  0  0  0  0  0  0\n  Eti-Osa             0  0  0  0  0  0  0  0\n  Etim Ekpo           0  0  0  0  0  0  0  0\n  Etinan              0  0  0  0  0  0  0  0\n  Etsako Central      0  0  0  0  0  0  0  0\n  Etsako East         0  0  0  0  0  0  0  0\n  Etsako West         0  0  0  0  0  0  0  0\n  Etung               0  0  0  0  0  0  0  0\n  Ewekoro             0  0  0  0  0  0  0  0\n  Ezeagu              0  0  0  0  0  0  0  0\n  Ezinihitte          0  0  0  1  0  0  0  0\n  Ezza North          0  0  0  0  0  0  0  0\n  Ezza South          0  0  0  0  0  0  0  0\n  Fagge               0  0  0  0  0  0  0  0\n  Fakai               0  0  0  0  0  0  0  0\n  Faskari             0  0  0  0  0  0  0  0\n  Fika                0  0  0  0  0  0  0  0\n  Fufore              0  0  0  0  0  0  0  0\n  Funakaye            0  0  0  0  0  0  0  0\n  Fune                0  0  0  0  0  0  0  0\n  Funtua              0  0  0  0  0  0  0  0\n  Gabasawa            0  0  0  0  0  0  0  0\n  Gada                0  0  0  0  0  0  0  0\n  Gagarawa            0  0  0  0  0  0  0  0\n  Gamawa              0  0  0  0  0  0  0  0\n  Ganjuwa             0  0  0  0  0  0  0  0\n  Ganye               0  0  0  0  0  0  0  0\n  Garki               0  0  0  0  0  0  0  0\n  Garko               0  0  0  0  0  0  0  0\n  Garum Mallam        0  0  0  0  0  0  0  0\n  Gashaka             0  0  0  0  0  0  0  0\n  Gassol              0  0  0  0  0  0  0  0\n  Gaya                0  0  0  0  0  0  0  0\n  Gbako               0  0  0  0  0  0  0  0\n  Gboko               0  0  0  0  0  0  0  0\n  Geidam              0  0  0  0  0  0  0  0\n  Gezawa              0  0  0  0  0  0  0  0\n  Giade               0  0  0  0  0  0  0  0\n  Girei               0  0  0  0  0  0  0  0\n  Giwa                0  0  0  0  0  0  0  0\n  Gokana              0  0  0  0  0  0  0  0\n  Gombe               0  0  0  0  0  0  0  0\n  Gombi               0  0  0  0  0  0  0  0\n  Goronyo             0  0  0  0  0  0  0  0\n  Gubio               0  0  0  0  0  0  0  0\n  Gudu                0  0  0  0  0  0  0  0\n  Gujba               0  0  0  0  0  0  0  0\n  Gulani              0  0  0  0  0  0  0  0\n  Guma                0  0  0  0  0  0  0  0\n  Gumel               0  0  0  0  0  0  0  0\n  Gummi               0  0  0  0  0  0  0  0\n  Gurara              0  0  0  0  0  0  0  0\n  Guri                0  0  0  0  0  0  0  0\n  Gusau               0  0  0  0  0  0  0  0\n  Guyuk               0  0  0  0  0  0  0  0\n  Guzamala            0  0  0  0  0  0  0  0\n  Gwadabawa           0  0  0  0  0  0  0  0\n  Gwagwalada          0  0  0  0  0  0  0  0\n  Gwale               0  0  0  0  0  0  0  0\n  Gwandu              0  0  0  0  0  0  0  0\n  Gwaram              0  0  0  0  0  0  0  0\n  Gwarzo              0  0  0  0  0  0  0  0\n  Gwer East           0  0  0  0  0  0  0  0\n  Gwer West           0  0  0  0  0  0  0  0\n  Gwiwa               0  0  0  0  0  0  0  0\n  Gwoza               0  0  0  0  0  0  0  0\n  Hadejia             0  0  0  0  0  0  0  0\n  Hawul               0  0  0  0  0  0  0  0\n  Hong                0  0  0  0  0  0  0  0\n  Ibadan North        0  0  0  0  0  0  0  0\n  Ibadan North East   0  0  0  0  0  0  0  0\n  Ibadan North West   0  0  0  0  0  0  0  0\n  Ibadan South East   0  0  0  0  0  0  0  0\n  Ibadan South West   0  0  0  0  0  0  0  0\n  Ibaji               0  0  0  0  0  0  0  0\n  Ibarapa Central     0  0  0  0  0  0  0  0\n  Ibarapa East        0  0  0  0  0  0  0  0\n  Ibarapa North       0  0  0  0  0  0  0  0\n  Ibeju/Lekki         0  0  0  0  0  0  0  0\n  Ibeno               0  0  0  0  0  0  0  0\n  Ibesikpo Asutan     0  0  0  0  0  0  0  0\n  Ibi                 0  0  0  0  0  0  0  0\n  Ibiono Ibom         0  0  0  0  0  0  0  0\n  Idah                0  0  0  0  0  0  0  0\n  Idanre              0  0  0  0  0  0  0  0\n  Ideato North        0  0  0  0  0  0  0  0\n  Ideato South        1  0  0  0  0  0  0  0\n  Idemili North       0  0  0  0  0  0  0  0\n  Idemili South       0  0  0  0  0  0  0  0\n  Ido                 0  0  0  0  0  0  0  0\n  Ido-Osi             0  0  0  0  0  0  0  0\n  Ifako-Ijaye         0  0  0  0  0  0  0  0\n  Ife Central         0  0  0  0  0  0  0  0\n  Ife East            0  0  0  0  0  0  0  0\n  Ife North           0  0  0  0  0  0  0  0\n  Ife South           0  0  0  0  0  0  0  0\n  Ifedayo             0  0  0  0  0  0  0  0\n  Ifedore             0  0  0  0  0  0  0  0\n  Ifelodun            0  0  0  0  0  0  0  0\n  Ifo                 0  0  0  0  0  0  0  0\n  Igabi               0  0  0  0  0  0  0  0\n  Igalamela-Odolu     0  0  0  0  0  0  0  0\n  Igbo-Etiti          0  0  0  0  0  0  0  0\n  Igbo-Eze North      0  0  0  0  0  0  0  0\n  Igbo-Eze South      0  0  0  0  0  0  0  0\n  Igueben             0  0  0  0  0  0  0  0\n  Ihiala              0  0  0  0  0  0  0  0\n  Ihitte/Uboma        0  0  0  0  1  0  0  0\n  Ijebu East          0  0  0  0  0  0  0  0\n  Ijebu North         0  0  0  0  0  0  0  0\n  Ijebu North East    0  0  0  0  0  0  0  0\n  Ijebu Ode           0  0  0  0  0  0  0  0\n  Ijero               0  0  0  0  0  0  0  0\n  Ijumu               0  0  0  0  0  0  0  0\n  Ika                 0  0  0  0  0  0  0  0\n  Ika North East      0  0  0  0  0  0  0  0\n  Ika South           0  0  0  0  0  0  0  0\n  Ikara               0  0  0  0  0  0  0  0\n  Ikeduru             1  0  0  0  0  0  0  0\n  Ikeja               0  0  0  0  0  0  0  0\n  Ikenne              0  0  0  0  0  0  0  0\n  Ikere               0  0  0  0  0  0  0  0\n  Ikole               0  0  0  0  0  0  0  0\n  Ikom                0  0  0  0  0  0  0  0\n  Ikono               0  0  0  0  0  0  0  0\n  Ikorodu             0  0  0  0  0  0  0  0\n  Ikot Abasi          0  0  0  0  0  0  0  0\n  Ikot Ekpene         0  0  0  0  0  0  0  0\n  Ikpoba-Okha         0  0  0  0  0  0  0  0\n  Ikwerre             0  0  0  0  0  0  0  0\n  Ikwo                0  0  0  0  0  0  0  0\n  Ikwuano             0  1  0  0  0  0  0  0\n  Ila                 0  0  0  0  0  0  0  0\n  Ilaje               0  0  0  0  0  0  0  0\n  Ile-Oluji-Okeigbo   0  0  0  0  0  0  0  0\n  Ilejemeji           0  0  0  0  0  0  0  0\n  Ilesha East         0  0  0  0  0  0  0  0\n  Ilesha West         0  0  0  0  0  0  0  0\n  Illela              0  0  0  0  0  0  0  0\n  Ilorin East         0  0  0  0  0  0  0  0\n  Ilorin South        0  0  0  0  0  0  0  0\n  Ilorin West         0  0  0  0  0  0  0  0\n  Imeko-Afon          0  0  0  0  0  0  0  0\n  Ingawa              0  0  0  0  0  0  0  0\n  Ini                 0  0  0  0  0  0  0  0\n  Ipokia              0  0  0  0  0  0  0  0\n  Irele               0  0  0  0  0  0  0  0\n  Irepo               0  0  0  0  0  0  0  0\n  Irepodun            0  0  0  0  0  0  0  0\n  Irepodun/Ifelodun   0  0  0  0  0  0  0  0\n  Irewole             0  0  0  0  0  0  0  0\n  Isa                 0  0  0  0  0  0  0  0\n  Ise/Orun            0  0  0  0  0  0  0  0\n  Iseyin              0  0  0  0  0  0  0  0\n  Ishielu             0  0  0  0  0  0  0  0\n  Isi-Uzo             0  0  0  0  0  0  0  0\n  Isiala-Ngwa North   0  0  1  0  0  0  0  0\n  Isiala-Ngwa South   0  0  1  0  0  0  0  0\n  Isiala Mbano        0  0  0  0  0  1  0  0\n  Isin                0  0  0  0  0  0  0  0\n  Isiukwuato          0  0  1  0  0  0  0  0\n  Isokan              0  0  0  0  0  0  0  0\n  Isoko North         0  0  0  0  0  0  0  0\n  Isoko South         0  0  0  0  0  0  0  0\n  Isu                 0  1  0  0  0  0  0  0\n  Itas/Gadau          0  0  0  0  0  0  0  0\n  Itesiwaju           0  0  0  0  0  0  0  0\n  Itu                 0  0  0  0  0  0  0  0\n  Ivo                 0  0  0  0  0  0  0  0\n  Iwajowa             0  0  0  0  0  0  0  0\n  Iwo                 0  0  0  0  0  0  0  0\n  Izzi                0  0  0  0  0  0  0  0\n  Jaba                0  0  0  0  0  0  0  0\n  Jada                0  0  0  0  0  0  0  0\n  Jahun               0  0  0  0  0  0  0  0\n  Jakusko             0  0  0  0  0  0  0  0\n  Jalingo             0  0  0  0  0  0  0  0\n  Jama'are            0  0  0  0  0  0  0  0\n  Jega                0  0  0  0  0  0  0  0\n  Jema'a              0  0  0  0  0  0  0  0\n  Jere                0  0  0  0  0  0  0  0\n  Jibia               0  0  0  0  0  0  0  0\n  Jos East            0  0  0  0  0  0  0  0\n  Jos North           0  0  0  0  0  0  0  0\n  Jos South           0  0  0  0  0  0  0  0\n  Kabba/Bunu          0  0  0  0  0  0  0  0\n  Kabo                0  0  0  0  0  0  0  0\n  Kachia              0  0  0  0  0  0  0  0\n  Kaduna North        0  0  0  0  0  0  0  0\n  Kaduna South        0  0  0  0  0  0  0  0\n  Kafin Hausa         0  0  0  0  0  0  0  0\n  Kafur               0  0  0  0  0  0  0  0\n  Kaga                0  0  0  0  0  0  0  0\n  Kagarko             0  0  0  0  0  0  0  0\n  Kaiama              0  0  0  0  0  0  0  0\n  Kaita               0  0  0  0  0  0  0  0\n  Kajola              0  0  0  0  0  0  0  0\n  Kajuru              0  0  0  0  0  0  0  0\n  Kala/Balge          0  0  0  0  0  0  0  0\n  Kalgo               0  0  0  0  0  0  0  0\n  Kaltungo            0  0  0  0  0  0  0  0\n  Kanam               0  0  0  0  0  0  0  0\n  Kankara             0  0  0  0  0  0  0  0\n  Kanke               0  0  0  0  0  0  0  0\n  Kankia              0  0  0  0  0  0  0  0\n  Kano Municipal      0  0  0  0  0  0  0  0\n  Karasuwa            0  0  0  0  0  0  0  0\n  Karaye              0  0  0  0  0  0  0  0\n  Karim-Lamido        0  0  0  0  0  0  0  0\n  Karu                0  0  0  0  0  0  0  0\n  Katagum             0  0  0  0  0  0  0  0\n  Katcha              0  0  0  0  0  0  0  0\n  Katsina             0  0  0  0  0  0  0  0\n  Katsina-Ala         0  0  0  0  0  0  0  0\n  Kaugama             0  0  0  0  0  0  0  0\n  Kaura               0  0  0  0  0  0  0  0\n  Kaura Namoda        0  0  0  0  0  0  0  0\n  Kauru               0  0  0  0  0  0  0  0\n  Kazaure             0  0  0  0  0  0  0  0\n  Keana               0  0  0  0  0  0  0  0\n  Kebbe               0  0  0  0  0  0  0  0\n  Keffi               0  0  0  0  0  0  0  0\n  Khana               0  0  0  0  0  0  0  0\n  Kibiya              0  0  0  0  0  0  0  0\n  Kirfi               0  0  0  0  0  0  0  0\n  Kiri Kasamma        0  0  0  0  0  0  0  0\n  Kiru                0  0  0  0  0  0  0  0\n  Kiyawa              0  0  0  0  0  0  0  0\n  Kogi                0  0  0  0  0  0  0  0\n  Koko/Besse          0  0  0  0  0  0  0  0\n  Kokona              0  0  0  0  0  0  0  0\n  Kolokuma/Opokuma    0  0  0  0  0  0  0  0\n  Konduga             0  0  0  0  0  0  0  0\n  Konshisha           0  0  0  0  0  0  0  0\n  Kontagora           0  0  0  0  0  0  0  0\n  Kosofe              0  0  0  0  0  0  0  0\n  Kubau               0  0  0  0  0  0  0  0\n  Kudan               0  0  0  0  0  0  0  0\n  Kuje                0  0  0  0  0  0  0  0\n  Kukawa              0  0  0  0  0  0  0  0\n  Kumbotso            0  0  0  0  0  0  0  0\n  Kunchi              0  0  0  0  0  0  0  0\n  Kura                0  0  0  0  0  0  0  0\n  Kurfi               0  0  0  0  0  0  0  0\n  Kurmi               0  0  0  0  0  0  0  0\n  Kusada              0  0  0  0  0  0  0  0\n  Kwali               0  0  0  0  0  0  0  0\n  Kwami               0  0  0  0  0  0  0  0\n  Kwande              0  0  0  0  0  0  0  0\n  Kware               0  0  0  0  0  0  0  0\n  Kwaya Kusar         0  0  0  0  0  0  0  0\n  Lafia               0  0  0  0  0  0  0  0\n  Lagelu              0  0  0  0  0  0  0  0\n  Lagos Island        0  0  0  0  0  0  0  0\n  Lagos Mainland      0  0  0  0  0  0  0  0\n  Lamurde             0  0  0  0  0  0  0  0\n  Langtang North      0  0  0  0  0  0  0  0\n  Langtang South      0  0  0  0  0  0  0  0\n  Lapai               0  0  0  0  0  0  0  0\n  Lau                 0  0  0  0  0  0  0  0\n  Lavun               0  0  0  0  0  0  0  0\n  Lere                0  0  0  0  0  0  0  0\n  Logo                0  0  0  0  0  0  0  0\n  Lokoja              0  0  0  0  0  0  0  0\n  Machina             0  0  0  0  0  0  0  0\n  Madagali            0  0  0  0  0  0  0  0\n  Madobi              0  0  0  0  0  0  0  0\n  Mafa                0  0  0  0  0  0  0  0\n  Magama              0  0  0  0  0  0  0  0\n  Magumeri            0  0  0  0  0  0  0  0\n  Mai'adua            0  0  0  0  0  0  0  0\n  Maiduguri           0  0  0  0  0  0  0  0\n  Maigatari           0  0  0  0  0  0  0  0\n  Maiha               0  0  0  0  0  0  0  0\n  Maiyama             0  0  0  0  0  0  0  0\n  Makoda              0  0  0  0  0  0  0  0\n  Makurdi             0  0  0  0  0  0  0  0\n  Malam Madori        0  0  0  0  0  0  0  0\n  Malumfashi          0  0  0  0  0  0  0  0\n  Mangu               0  0  0  0  0  0  0  0\n  Mani                0  0  0  0  0  0  0  0\n  Maradun             0  0  0  0  0  0  0  0\n  Mariga              0  0  0  0  0  0  0  0\n  Markafi             0  0  0  0  0  0  0  0\n  Marte               0  0  0  0  0  0  0  0\n  Maru                0  0  0  0  0  0  0  0\n  Mashegu             0  0  0  0  0  0  0  0\n  Mashi               0  0  0  0  0  0  0  0\n  Matazu              0  0  0  0  0  0  0  0\n  Mayo-Belwa          0  0  0  0  0  0  0  0\n  Mbaitoli            0  0  1  0  0  0  0  0\n  Mbo                 0  0  0  0  0  0  0  0\n  Michika             0  0  0  0  0  0  0  0\n  Miga                0  0  0  0  0  0  0  0\n  Mikang              0  0  0  0  0  0  0  0\n  Minjibir            0  0  0  0  0  0  0  0\n  Misau               0  0  0  0  0  0  0  0\n  Mkpat Enin          0  0  0  0  0  0  0  0\n  Moba                0  0  0  0  0  0  0  0\n  Mobbar              0  0  0  0  0  0  0  0\n  Mokwa               0  0  0  0  0  0  0  0\n  Monguno             0  0  0  0  0  0  0  0\n  Mopa-Muro           0  0  0  0  0  0  0  0\n  Moro                0  0  0  0  0  0  0  0\n  Mubi North          0  0  0  0  0  0  0  0\n  Mubi South          0  0  0  0  0  0  0  0\n  Musawa              0  0  0  0  0  0  0  0\n  Mushin              0  0  0  0  0  0  0  0\n  Muya                0  0  0  0  0  0  0  0\n  Nafada              0  0  0  0  0  0  0  0\n  Nangere             0  0  0  0  0  0  0  0\n  Nasarawa            0  0  0  0  0  0  0  0\n  Nasarawa-Eggon      0  0  0  0  0  0  0  0\n  Ndokwa East         0  0  0  0  0  0  0  0\n  Ndokwa West         0  0  0  0  0  0  0  0\n  Nembe               0  0  0  0  0  0  0  0\n  Ngala               0  0  0  0  0  0  0  0\n  Nganzai             0  0  0  0  0  0  0  0\n  Ngaski              0  0  0  0  0  0  0  0\n  Ngor-Okpala         0  1  0  0  0  0  0  0\n  Nguru               0  0  0  0  0  0  0  0\n  Ningi               0  0  0  0  0  0  0  0\n  Njaba               0  0  0  0  0  0  0  0\n  Njikoka             0  0  0  0  0  0  0  0\n  Nkanu East          0  0  0  0  0  0  0  0\n  Nkanu West          0  0  0  0  0  0  0  0\n  Nkwerre             1  0  0  0  0  0  0  0\n  Nnewi North         0  0  0  0  0  0  0  0\n  Nnewi South         0  1  0  0  0  0  0  0\n  Nsit Atai           0  0  0  0  0  0  0  0\n  Nsit Ibom           0  0  0  0  0  0  0  0\n  Nsit Ubium          0  0  0  0  0  0  0  0\n  Nsukka              0  0  0  0  0  0  0  0\n  Numan               0  0  0  0  0  0  0  0\n  Nwangele            0  0  0  1  0  0  0  0\n  Obafemi-Owode       0  0  0  0  0  0  0  0\n  Obanliku            0  0  0  0  0  0  0  0\n  Obi                 0  0  0  0  0  0  0  0\n  Obi Ngwa            0  1  0  0  0  0  0  0\n  Obia/Akpor          0  0  0  0  0  0  0  0\n  Obokun              0  0  0  0  0  0  0  0\n  Obot Akara          0  0  0  0  0  0  0  0\n  Obowo               0  0  0  0  0  1  0  0\n  Obubra              0  0  0  0  0  0  0  0\n  Obudu               0  0  0  0  0  0  0  0\n  Odeda               0  0  0  0  0  0  0  0\n  Odigbo              0  0  0  0  0  0  0  0\n  Odo-Otin            0  0  0  0  0  0  0  0\n  Odogbolu            0  0  0  0  0  0  0  0\n  Odukpani            0  0  0  0  0  0  0  0\n  Offa                0  0  0  0  0  0  0  0\n  Ofu                 0  0  0  0  0  0  0  0\n  Ogba/Egbema/Ndoni   0  0  0  0  0  0  0  0\n  Ogbadibo            0  0  0  0  0  0  0  0\n  Ogbaru              0  0  0  0  0  0  0  0\n  Ogbia               0  0  0  0  0  0  0  0\n  Ogbomosho North     0  0  0  0  0  0  0  0\n  Ogbomosho South     0  0  0  0  0  0  0  0\n  Ogo Oluwa           0  0  0  0  0  0  0  0\n  Ogoja               0  0  0  0  0  0  0  0\n  Ogori/Magongo       0  0  0  0  0  0  0  0\n  Ogu/Bolo            0  0  0  0  0  0  0  0\n  Ogun waterside      0  0  0  0  0  0  0  0\n  Oguta               0  0  0  0  0  0  0  0\n  Ohafia              0  0  0  0  0  0  0  0\n  Ohaji/Egbema        0  0  0  0  0  0  0  0\n  Ohaozara            0  0  0  0  0  0  0  0\n  Ohaukwu             0  0  0  0  0  0  0  0\n  Ohimini             0  0  0  0  0  0  0  0\n  Oji-River           1  0  0  0  0  0  0  0\n  Ojo                 0  0  0  0  0  0  0  0\n  Oju                 0  0  0  0  0  0  0  0\n  Oke-Ero             0  0  0  0  0  0  0  0\n  Okehi               0  0  0  0  0  0  0  0\n  Okene               0  0  0  0  0  0  0  0\n  Okigwe              0  0  0  0  0  0  0  1\n  Okitipupa           0  0  0  0  0  0  0  0\n  Okobo               0  0  0  0  0  0  0  0\n  Okpe                0  0  0  0  0  0  0  0\n  Okpokwu             0  0  0  0  0  0  0  0\n  Okrika              0  0  0  0  0  0  0  0\n  Ola-oluwa           0  0  0  0  0  0  0  0\n  Olamabolo           0  0  0  0  0  0  0  0\n  Olorunda            0  0  0  0  0  0  0  0\n  Olorunsogo          0  0  0  0  0  0  0  0\n  Oluyole             0  0  0  0  0  0  0  0\n  Omala               0  0  0  0  0  0  0  0\n  Omumma              0  0  0  0  0  0  0  0\n  Ona-Ara             0  0  0  0  0  0  0  0\n  Ondo East           0  0  0  0  0  0  0  0\n  Ondo West           0  0  0  0  0  0  0  0\n  Onicha              0  0  0  0  0  0  0  0\n  Onitsha North       0  0  0  0  0  0  0  0\n  Onitsha South       0  0  0  0  0  0  0  0\n  Onna                0  0  0  0  0  0  0  0\n  Opobo/Nkoro         0  0  0  0  0  0  0  0\n  Oredo               0  0  0  0  0  0  0  0\n  Orelope             0  0  0  0  0  0  0  0\n  Orhionmwon          0  0  0  0  0  0  0  0\n  Ori Ire             0  0  0  0  0  0  0  0\n  Oriade              0  0  0  0  0  0  0  0\n  Orlu                0  1  0  0  0  0  0  0\n  Orolu               0  0  0  0  0  0  0  0\n  Oron                0  0  0  0  0  0  0  0\n  Orsu                0  0  0  0  0  0  0  0\n  Oru East            0  0  0  0  0  0  0  0\n  Oru West            0  0  0  0  0  0  0  0\n  Oruk Anam           0  0  0  0  0  0  0  0\n  Orumba North        0  1  0  0  0  0  0  0\n  Orumba South        0  0  0  0  1  0  0  0\n  Ose                 0  0  0  0  0  0  0  0\n  Oshimili North      0  0  0  0  0  0  0  0\n  Oshimili South      0  0  0  0  0  0  0  0\n  Oshodi-Isolo        0  0  0  0  0  0  0  0\n  Osisioma Ngwa       0  0  1  0  0  0  0  0\n  Osogbo              0  0  0  0  0  0  0  0\n  Oturkpo             0  0  0  0  0  0  0  0\n  Ovia North East     0  0  0  0  0  0  0  0\n  Ovia South West     0  0  0  0  0  0  0  0\n  Owan East           0  0  0  0  0  0  0  0\n  Owan West           0  0  0  0  0  0  0  0\n  Owerri-Municipal    0  0  0  0  0  0  0  0\n  Owerri North        0  0  0  0  0  0  0  0\n  Owerri West         0  0  0  0  0  0  0  0\n  Owo                 0  0  0  0  0  0  0  0\n  Oye                 0  0  0  0  0  0  0  0\n  Oyi                 0  0  0  0  0  0  0  0\n  Oyigbo              0  0  0  0  0  0  0  0\n  Oyo East            0  0  0  0  0  0  0  0\n  Oyo West            0  0  0  0  0  0  0  0\n  Oyun                0  0  0  0  0  0  0  0\n  Paikoro             0  0  0  0  0  0  0  0\n  Pankshin            0  0  0  0  0  0  0  0\n  Patani              0  0  0  0  0  0  0  0\n  Pategi              0  0  0  0  0  0  0  0\n  Port-Harcourt       0  0  0  0  0  0  0  0\n  Potiskum            0  0  0  0  0  0  0  0\n  Qua'an Pan          0  0  0  0  0  0  0  0\n  Rabah               0  0  0  0  0  0  0  0\n  Rafi                0  0  0  0  0  0  0  0\n  Rano                0  0  0  0  0  0  0  0\n  Remo North          0  0  0  0  0  0  0  0\n  Rijau               0  0  0  0  0  0  0  0\n  Rimi                0  0  0  0  0  0  0  0\n  Rimin Gado          0  0  0  0  0  0  0  0\n  Ringim              0  0  0  0  0  0  0  0\n  Riyom               0  0  0  0  0  0  0  0\n  Rogo                0  0  0  0  0  0  0  0\n  Roni                0  0  0  0  0  0  0  0\n  Sabon-Gari          0  0  0  0  0  0  0  0\n  Sabon Birni         0  0  0  0  0  0  0  0\n  Sabuwa              0  0  0  0  0  0  0  0\n  Safana              0  0  0  0  0  0  0  0\n  Sagbama             0  0  0  0  0  0  0  0\n  Sakaba              0  0  0  0  0  0  0  0\n  Saki East           0  0  0  0  0  0  0  0\n  Saki West           0  0  0  0  0  0  0  0\n  Sandamu             0  0  0  0  0  0  0  0\n  Sanga               0  0  0  0  0  0  0  0\n  Sapele              0  0  0  0  0  0  0  0\n  Sardauna            0  0  0  0  0  0  0  0\n  Shagamu             0  0  0  0  0  0  0  0\n  Shagari             0  0  0  0  0  0  0  0\n  Shanga              0  0  0  0  0  0  0  0\n  Shani               0  0  0  0  0  0  0  0\n  Shanono             0  0  0  0  0  0  0  0\n  Shelleng            0  0  0  0  0  0  0  0\n  Shendam             0  0  0  0  0  0  0  0\n  Shinkafi            0  0  0  0  0  0  0  0\n  Shira               0  0  0  0  0  0  0  0\n  Shiroro             0  0  0  0  0  0  0  0\n  Shomgom             0  0  0  0  0  0  0  0\n  Shomolu             0  0  0  0  0  0  0  0\n  Silame              0  0  0  0  0  0  0  0\n  Soba                0  0  0  0  0  0  0  0\n  Sokoto North        0  0  0  0  0  0  0  0\n  Sokoto South        0  0  0  0  0  0  0  0\n  Song                0  0  0  0  0  0  0  0\n  Southern Ijaw       0  0  0  0  0  0  0  0\n  Sule-Tankarkar      0  0  0  0  0  0  0  0\n  Suleja              0  0  0  0  0  0  0  0\n  Sumaila             0  0  0  0  0  0  0  0\n  Suru                0  0  0  0  0  0  0  0\n  Surulere            0  0  0  0  0  0  0  0\n  Tafa                0  0  0  0  0  0  0  0\n  Tafawa-Balewa       0  0  0  0  0  0  0  0\n  Tai                 0  0  0  0  0  0  0  0\n  Takai               0  0  0  0  0  0  0  0\n  Takum               0  0  0  0  0  0  0  0\n  Talata Mafara       0  0  0  0  0  0  0  0\n  Tambuwal            0  0  0  0  0  0  0  0\n  Tangaza             0  0  0  0  0  0  0  0\n  Tarauni             0  0  0  0  0  0  0  0\n  Tarka               0  0  0  0  0  0  0  0\n  Tarmua              0  0  0  0  0  0  0  0\n  Taura               0  0  0  0  0  0  0  0\n  Tofa                0  0  0  0  0  0  0  0\n  Toro                0  0  0  0  0  0  0  0\n  Toto                0  0  0  0  0  0  0  0\n  Toungo              0  0  0  0  0  0  0  0\n  Tsafe               0  0  0  0  0  0  0  0\n  Tsanyawa            0  0  0  0  0  0  0  0\n  Tudun Wada          0  0  0  0  0  0  0  0\n  Tureta              0  0  0  0  0  0  0  0\n  Udenu               0  0  0  0  0  0  0  0\n  Udi                 0  0  0  0  0  0  0  0\n  Udu                 0  0  0  0  0  0  0  0\n  Udung Uko           0  0  0  0  0  0  0  0\n  Ughelli North       0  0  0  0  0  0  0  0\n  Ughelli South       0  0  0  0  0  0  0  0\n  Ugwunagbo           0  0  0  0  0  0  0  0\n  Uhunmwonde          0  0  0  0  0  0  0  0\n  Ukanafun            0  0  0  0  0  0  0  0\n  Ukum                0  0  0  0  0  0  0  0\n  Ukwa East           0  0  0  0  0  0  0  0\n  Ukwa West           0  0  0  0  0  0  0  0\n  Ukwuani             0  0  0  0  0  0  0  0\n  Umu-Nneochi         0  0  0  0  0  1  0  0\n  Umuahia North       0  0  0  1  0  0  0  0\n  Umuahia South       0  0  1  0  0  0  0  0\n  Ungogo              0  0  0  0  0  0  0  0\n  Unuimo              0  0  0  0  1  0  0  0\n  Uruan               0  0  0  0  0  0  0  0\n  Urue-Offong/Oruko   0  0  0  0  0  0  0  0\n  Ushongo             0  0  0  0  0  0  0  0\n  Ussa                0  0  0  0  0  0  0  0\n  Uvwie               0  0  0  0  0  0  0  0\n  Uyo                 0  0  0  0  0  0  0  0\n  Uzo-Uwani           0  0  0  0  0  0  0  0\n  Vandeikya           0  0  0  0  0  0  0  0\n  Wamako              0  0  0  0  0  0  0  0\n  Wamba               0  0  0  0  0  0  0  0\n  Warawa              0  0  0  0  0  0  0  0\n  Warji               0  0  0  0  0  0  0  0\n  Warri North         0  0  0  0  0  0  0  0\n  Warri South         0  0  0  0  0  0  0  0\n  Warri South West    0  0  0  0  0  0  0  0\n  Wasagu/Danko        0  0  0  0  0  0  0  0\n  Wase                0  0  0  0  0  0  0  0\n  Wudil               0  0  0  0  0  0  0  0\n  Wukari              0  0  0  0  0  0  0  0\n  Wurno               0  0  0  0  0  0  0  0\n  Wushishi            0  0  0  0  0  0  0  0\n  Yabo                0  0  0  0  0  0  0  0\n  Yagba East          0  0  0  0  0  0  0  0\n  Yagba West          0  0  0  0  0  0  0  0\n  Yakurr              0  0  0  0  0  0  0  0\n  Yala                0  0  0  0  0  0  0  0\n  Yamaltu/Deba        0  0  0  0  0  0  0  0\n  Yankwashi           0  0  0  0  0  0  0  0\n  Yauri               0  0  0  0  0  0  0  0\n  Yenegoa             0  0  0  0  0  0  0  0\n  Yola North          0  0  0  0  0  0  0  0\n  Yola South          0  0  0  0  0  0  0  0\n  Yorro               0  0  0  0  0  0  0  0\n  Yunusari            0  0  0  0  0  0  0  0\n  Yusufari            0  0  0  0  0  0  0  0\n  Zaki                0  0  0  0  0  0  0  0\n  Zango               0  0  0  0  0  0  0  0\n  Zango-Kataf         0  0  0  0  0  0  0  0\n  Zaria               0  0  0  0  0  0  0  0\n  Zing                0  0  0  0  0  0  0  0\n  Zurmi               0  0  0  0  0  0  0  0\n  Zuru                0  0  0  0  0  0  0  0\n\n\nTo get the number of disconnected connected subgraphs in the wmd72 weight matrix, we can use the n.comp.nb() function of the spdep package.\n\nn_comp = n.comp.nb(wm_d72)\nn_comp$nc\n\n[1] 2\n\n\nThe results confirms that there is an isolated island in the result. and hence we will not used fixed weight matrix. We will work with adaptive distance weight matrix instead.\n\n\nAdaptive Weight distance matrix\nBy enforcing symmetry or accepting asymmetric neighbours, as shown in the code below, it is possible to control the number of neighbours of each region using the k nearest neighbour (knn) algorithm. In this case we set k to 8 as discussed in class. This can be accomplished by calling knn2nb() and knearneigh(). We will use str() to display the result\n\nknn8 = knn2nb(knearneigh(coord, k=8))\nstr(knn8)\n\nList of 774\n $ : int [1:8] 2 321 364 548 597 624 721 725\n $ : int [1:8] 1 321 548 597 624 721 725 726\n $ : int [1:8] 250 261 447 477 492 507 509 526\n $ : int [1:8] 12 20 257 263 446 454 466 690\n $ : int [1:8] 203 208 286 288 331 334 539 738\n $ : int [1:8] 170 217 218 337 379 553 577 601\n $ : int [1:8] 8 176 214 281 283 306 544 555\n $ : int [1:8] 7 214 281 306 327 544 555 651\n $ : int [1:8] 18 19 218 337 574 576 601 757\n $ : int [1:8] 25 216 325 364 365 528 552 632\n $ : int [1:8] 26 27 43 68 191 524 565 762\n $ : int [1:8] 135 263 417 429 446 454 690 695\n $ : int [1:8] 31 37 211 320 393 570 583 584\n $ : int [1:8] 170 363 379 546 563 577 581 589\n $ : int [1:8] 22 49 82 177 297 306 580 623\n $ : int [1:8] 30 187 188 296 328 357 360 635\n $ : int [1:8] 35 275 295 378 460 591 638 639\n $ : int [1:8] 9 19 218 376 574 576 601 757\n $ : int [1:8] 9 18 56 103 376 574 576 601\n $ : int [1:8] 4 106 125 239 263 419 454 466\n $ : int [1:8] 60 61 162 269 520 578 596 626\n $ : int [1:8] 49 297 326 443 515 623 682 693\n $ : int [1:8] 54 291 292 536 537 614 618 619\n $ : int [1:8] 84 123 437 476 527 652 673 761\n $ : int [1:8] 10 181 216 314 325 366 552 730\n $ : int [1:8] 11 27 68 191 336 439 562 762\n $ : int [1:8] 11 26 191 439 562 565 663 762\n $ : int [1:8] 29 178 299 300 301 358 369 598\n $ : int [1:8] 172 173 178 182 358 378 460 591\n $ : int [1:8] 16 39 41 186 192 329 357 360\n $ : int [1:8] 13 37 211 289 561 570 583 584\n $ : int [1:8] 51 62 461 462 515 623 682 693\n $ : int [1:8] 47 166 227 238 242 655 743 750\n $ : int [1:8] 42 104 136 137 213 553 559 757\n $ : int [1:8] 17 275 276 277 278 279 295 460\n $ : int [1:8] 50 107 247 408 432 455 681 759\n $ : int [1:8] 38 40 211 212 570 583 584 629\n $ : int [1:8] 30 39 40 41 186 192 320 570\n $ : int [1:8] 30 38 40 41 186 192 320 329\n $ : int [1:8] 37 38 39 41 186 192 320 570\n $ : int [1:8] 30 38 39 40 186 192 360 634\n $ : int [1:8] 86 136 137 499 587 613 718 734\n $ : int [1:8] 11 68 157 524 549 565 590 645\n $ : int [1:8] 16 45 192 290 303 328 360 634\n $ : int [1:8] 44 187 290 303 328 341 360 599\n $ : int [1:8] 387 417 429 438 459 521 668 742\n $ : int [1:8] 33 111 166 234 238 691 698 750\n $ : int [1:8] 65 113 265 386 407 428 482 701\n $ : int [1:8] 22 32 297 326 515 623 682 693\n $ : int [1:8] 36 98 107 247 409 416 432 681\n $ : int [1:8] 32 62 461 462 515 580 623 693\n $ : int [1:8] 53 78 165 293 532 602 603 636\n $ : int [1:8] 52 78 80 165 280 602 621 636\n $ : int [1:8] 23 79 293 294 532 536 537 618\n $ : int [1:8] 122 169 246 333 430 571 605 697\n $ : int [1:8] 77 368 376 533 534 576 601 728\n $ : int [1:8] 53 58 199 312 322 323 621 622\n $ : int [1:8] 57 322 323 564 602 603 621 622\n $ : int [1:8] 88 128 129 259 493 700 714 748\n $ : int [1:8] 61 158 563 578 589 592 596 626\n $ : int [1:8] 21 60 269 578 589 592 596 626\n $ : int [1:8] 32 51 461 462 515 623 682 693\n $ : int [1:8] 90 237 384 416 467 497 765 772\n $ : int [1:8] 48 65 74 113 131 265 386 407\n $ : int [1:8] 48 64 74 113 265 407 683 701\n $ : int [1:8] 19 103 104 288 331 338 351 574\n $ : int [1:8] 347 348 560 566 567 609 640 694\n $ : int [1:8] 11 43 157 190 191 549 590 645\n $ : int [1:8] 140 146 248 274 473 500 512 513\n $ : int [1:8] 71 298 299 301 341 343 344 610\n $ : int [1:8] 70 172 173 298 299 343 344 625\n $ : int [1:8] 17 361 566 567 568 609 638 639\n $ : int [1:8] 72 361 374 377 404 607 665 666\n $ : int [1:8] 65 109 113 251 265 683 741 754\n $ : int [1:8] 110 272 398 422 433 485 501 768\n $ : int [1:8] 254 287 427 459 470 547 647 677\n $ : int [1:8] 56 195 533 534 579 618 619 728\n $ : int [1:8] 52 54 79 80 165 215 532 636\n $ : int [1:8] 54 78 165 293 532 579 618 636\n $ : int [1:8] 52 53 78 165 215 280 636 739\n $ : int [1:8] 99 145 227 233 426 483 689 760\n $ : int [1:8] 15 32 49 51 177 352 580 623\n $ : int [1:8] 132 258 383 414 433 529 767 768\n $ : int [1:8] 24 131 148 386 437 482 673 692\n $ : int [1:8] 105 156 267 394 654 675 707 712\n $ : int [1:8] 42 136 137 499 587 613 718 734\n $ : int [1:8] 149 151 221 226 399 410 486 657\n $ : int [1:8] 59 116 128 150 489 648 700 714\n $ : int [1:8] 260 408 463 542 674 676 681 759\n $ : int [1:8] 63 163 236 237 384 452 710 765\n $ : int [1:8] 160 271 388 406 473 475 492 525\n $ : int [1:8] 95 119 390 391 392 423 487 656\n $ : int [1:8] 73 354 374 402 594 607 665 666\n $ : int [1:8] 13 31 60 158 436 561 596 709\n $ : int [1:8] 92 390 391 392 405 423 469 656\n $ : int [1:8] 97 139 389 403 420 451 488 653\n $ : int [1:8] 96 168 389 420 451 653 662 773\n $ : int [1:8] 50 117 153 231 409 432 696 708\n $ : int [1:8] 81 145 426 483 667 689 760 769\n  [list output truncated]\n - attr(*, \"region.id\")= chr [1:774] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coord, k = 8)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 8\n - attr(*, \"class\")= chr \"nb\"\n\n\n\n\nPlotting distance based neighbours\nWe can use plot() to plot the distance based neighbours, the result below shows that we have a total of 6192 links to join all 774 polygons.\n\nplot(nga_wp$geometry, border=\"lightblue\")\nplot(knn8, coord, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\nknn8\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 6192 \nPercentage nonzero weights: 1.033592 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nEarlier, we did not adjust the projection from WSG84 as we needed to perform st_transform() which requires the data to be in WGS84 format.\nSince the spatial feature data frame has been fully constructed, we can now use st_transform() to update the appropriate projection system. The Nigeria Mid Belt Coordinate System (26392) will be applied, and st_crs() is used to confirm the transformation was completed.\n\nnga = st_transform(nga, crs=26392)\nst_crs(nga)\n\nCoordinate Reference System:\n  User input: EPSG:26392 \n  wkt:\nPROJCRS[\"Minna / Nigeria Mid Belt\",\n    BASEGEOGCRS[\"Minna\",\n        DATUM[\"Minna\",\n            ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4263]],\n    CONVERSION[\"Nigeria Mid Belt\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",8.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.99975,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",670553.98,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Nigeria between 6°30'E and 10°30'E, onshore and offshore shelf.\"],\n        BBOX[3.57,6.5,13.53,10.51]],\n    ID[\"EPSG\",26392]]\n\nnga_wp = st_transform(nga_wp, crs=26392)\nst_crs(nga_wp)\n\nCoordinate Reference System:\n  User input: EPSG:26392 \n  wkt:\nPROJCRS[\"Minna / Nigeria Mid Belt\",\n    BASEGEOGCRS[\"Minna\",\n        DATUM[\"Minna\",\n            ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4263]],\n    CONVERSION[\"Nigeria Mid Belt\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",8.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.99975,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",670553.98,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Nigeria between 6°30'E and 10°30'E, onshore and offshore shelf.\"],\n        BBOX[3.57,6.5,13.53,10.51]],\n    ID[\"EPSG\",26392]]"
  },
  {
    "objectID": "Take-Home_Ex1/Take-Home_Ex1.html#computing-spatial-autocorrelation",
    "href": "Take-Home_Ex1/Take-Home_Ex1.html#computing-spatial-autocorrelation",
    "title": "Take Home Exercise 1 - Investigation of Water points in Nigeria",
    "section": "Computing Spatial Autocorrelation",
    "text": "Computing Spatial Autocorrelation\nNow that we are ready with our weight matrix, we can begin to compute spatial autocorrelation We will start with GLOBAL spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial correlation\n\nComputing Spatial Autocorrelation: Moran’s I\n\nMoran’s I - The Null Hypothesis\nThe null hypothesis is to assume that non functional water points are randomly distributed between the different LGAs.\n\n\nComputing Moran’s I\nWe will perform Moran’s I statistical test with moran.test() of the spdep package. We will need to convert the knn8 weight matrix to a listw object first using nb2listw()\n\nknn8ListW = nb2listw(knn8)\nmoran.test(nga_wp$`wpt non functional`, listw = knn8ListW, zero.policy = TRUE, na.action = na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  nga_wp$`wpt non functional`  \nweights: knn8ListW    \n\nMoran I statistic standard deviate = 22.673, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.3822703126     -0.0012936611      0.0002861956 \n\n\nBased on the result, we will reject the null hypothesis as the p-value is less than 0.05. In fact as the p-value is less than 0.01, we can consider that as highly significant. The non functional water points are spatially clustered based on Moran’s I statistics and are not random.\n\n\nComputing Spatial Autocorrelation: Moran’s I with Monte Carlo simulation\nIn order to confirm that the null hypothesis is false, we could use Monte Carlo simulation to predict potential outcomes of the event by using moran.mc() function of the spdep package. We will use 1000 simulations for this test and are not random.\n\nset.seed(1234)\nglobal_moran_mc = moran.mc(nga_wp$`wpt non functional`, listw = knn8ListW, nsim=999, zero.policy = TRUE, na.action = na.omit)\nglobal_moran_mc\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  nga_wp$`wpt non functional` \nweights: knn8ListW  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.38227, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nBased on the simulation result, we will reject the null hypothesis as the p-value is less than 0.05. In fact as the p-value is 0.01, we can consider that as highly significant.\nThe non functional water points in the LGAs are not randomly distributed. Thus, since the Moran I statistics (0.38) is greater than 0, they are spatially clustered.\n\n\nVisualizing Monte Carlo Moran’s I\nWe will examine the simulated Moran’s I test statistics in detail. This can be done by computing the mean, variance and standard deviation and summary statistics\n\nmean(global_moran_mc$res[1:999]) #compute mean\n\n[1] -0.000628295\n\nvar(global_moran_mc$res[1:999]) #compute variance\n\n[1] 0.0002988427\n\nsd(global_moran_mc$res[1:999]) #compute std dev.\n\n[1] 0.01728707\n\nsummary(global_moran_mc$res[1:999])\n\n      Min.    1st Qu.     Median       Mean    3rd Qu.       Max. \n-0.0570637 -0.0128308 -0.0011785 -0.0006283  0.0106868  0.0645272 \n\n\nWe can plot the statistical values as a histogram using ggplot, however we need to convert the result into a data frame first\n\ndf = data.frame(global_moran_mc$res) #convert to data frame\n\nggplot(df, aes(global_moran_mc$res)) + #aes = column name\n  geom_histogram(bins=100, \n                 color=\"White\", \n                 fill=\"lightblue\") +\n  labs(x = \"Simulated Moran's I\",\n       y = \"Frequency\") + \n  xlim(-0.07, 0.07) + ylim(0, 50) +\n  geom_vline(aes(xintercept=0),   \n               color=\"red\", linetype=\"dashed\", size=1)\n\n\n\n\nBased on the histogram, we can conclude that there is a positive correlation based on the result of the histogram for Moran’s I Statistics, i.e. non functional water points in NGAs are clustered\n\n\n\nComputing Spatial Autocorrelation: Geary’s C\n\nGeary’s C - The Null Hypothesis\nThe null hypothesis is to assume that non functional water points are clustering for either similar or dissimilar values are random.\n\n\nComputing Geary’s C\nWe will perform Geary’s C statistical test with geary.test() of the spdep package.\n\ngeary.test(nga_wp$`wpt non functional`, listw = knn8ListW)\n\n\n    Geary C test under randomisation\n\ndata:  nga_wp$`wpt non functional` \nweights: knn8ListW \n\nGeary C statistic standard deviate = 19.315, p-value < 2.2e-16\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n     0.6066280275      1.0000000000      0.0004147634 \n\n\nBased on the result, we will reject the null hypothesis as the p-value is less than 0.05. In fact as the p-value is less than 0.01, we can consider that as highly significant.\nTherefore, we can conclude that the non functional water points are clustering for either similar or dissimilar values, they are not randomly distributed based on Geary’s C statistics\n\n\nComputing Spatial Autocorrelation: Geary’s C with Monte Carlo simulation\nIn order to further confirm that the null hypothesis is false, we could use Monte Carlo simulation to predict potential outcomes of the event by using geary.mc() function of the spdep package. We will use 1000 simulations for this test\n\nset.seed(1234)\nglobal_geary_mc = geary.mc(nga_wp$`wpt non functional`, listw = knn8ListW, nsim=999)\nglobal_geary_mc\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  nga_wp$`wpt non functional` \nweights: knn8ListW \nnumber of simulations + 1: 1000 \n\nstatistic = 0.60663, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nBased on the simulation result, we will reject the null hypothesis as the p-value is less than 0.05. In fact as the p-value is 0.01, we can consider that as highly significant.\nThe non functional water points in the LGAs are clustering for either similar or dissimilar values, they are not randomly distributed. Thus, since the Geary’s C statistics (0.61) is lesser than 1, they are spatially clustered.\n\n\nVisualizing Monte Carlo Geary’s C\nWe will examine the simulated Geary’s C test statistics in detail. This can be done by computing the mean, variance and standard deviation and summary statistics\n\nmean(global_geary_mc$res[1:999]) #compute mean\n\n[1] 0.9991838\n\nvar(global_geary_mc$res[1:999]) #compute variance\n\n[1] 0.0004175843\n\nsd(global_geary_mc$res[1:999]) #compute std dev.\n\n[1] 0.02043488\n\nsummary(global_geary_mc$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.9276  0.9859  0.9996  0.9992  1.0132  1.0699 \n\n\nWe can plot the statistical values as a histogram using ggplot, however we need to convert the result into a data frame first\n\ndf_G = data.frame(global_geary_mc$res) #convert to data frame\n\nggplot(df_G, aes(global_geary_mc$res)) + #aes = column name\n  geom_histogram(bins=100, \n                 color=\"White\", \n                 fill=\"lightblue\") +\n  labs(x = \"Simulated Geary's C\",\n       y = \"Frequency\") +\n  xlim(0.9, 1.1) + ylim(0, 50) +\n  geom_vline(aes(xintercept=1),   \n               color=\"red\", linetype=\"dashed\", size=1)\n\n\n\n\nBased on the histogram, we can conclude that there is a positive correlation based on the result of the histogram for Geary’s C Statistics, i.e. non functional water points in NGAs are clustered\nIt is interesting to note that in Moran I the smaller the number, indicates negative correlation (small -> -ve), in contrast in Geary’s C the smaller the number indicates positive correlation (small -> +ve)"
  },
  {
    "objectID": "Take-Home_Ex1/Take-Home_Ex1.html#spatial-correlogram",
    "href": "Take-Home_Ex1/Take-Home_Ex1.html#spatial-correlogram",
    "title": "Take Home Exercise 1 - Investigation of Water points in Nigeria",
    "section": "Spatial Correlogram",
    "text": "Spatial Correlogram\nSpatial correlograms make it easy to examine spatial autocorrelation patterns in the data.\nThey are graphs of some measure of autocorrelation (Moran’s I or Geary’s c) against distance and they demonstrate how correlated pairs of spatial observations are as one increase the distance (lag) between them.\n\nComputing Moran’s I correlogram\nWe use sp.correlogram() of spdep package to compute a 8-lag spatial correlogram of non functional water points. The global spatial autocorrelation used in Moran’s I\nWe use zero.policy = TRUE because there is an isolated island. We use order of 8 as we are using adaptive weight matrix of 8 neighbours. We also use binary weights for the style as it is more robust.\n\nMI_Corr = sp.correlogram(wm_q, nga_wp$`wpt non functional`, order = 8, method = \"I\", style = \"B\", zero.policy = TRUE)\nplot(MI_Corr)\n\n\n\n\nPlotting the output might not allow us to provide complete interpretation, this is because not all autocorrelation values are statistically significant. Hence we should analyze the report by printing out the result\n\nprint(MI_Corr)\n\nSpatial correlogram for nga_wp$`wpt non functional` \nmethod: Moran's I\n           estimate expectation    variance standard deviate Pr(I) two sided\n1 (773)  4.3333e-01 -1.2953e-03  4.4456e-04          20.6136       < 2.2e-16\n2 (773)  2.5742e-01 -1.2953e-03  1.8927e-04          18.8052       < 2.2e-16\n3 (773)  1.8754e-01 -1.2953e-03  1.1225e-04          17.8231       < 2.2e-16\n4 (773)  1.3790e-01 -1.2953e-03  7.9535e-05          15.6075       < 2.2e-16\n5 (773)  7.2312e-02 -1.2953e-03  6.2213e-05           9.3321       < 2.2e-16\n6 (773)  3.2208e-02 -1.2953e-03  5.2064e-05           4.6433       3.429e-06\n7 (773)  2.7034e-03 -1.2953e-03  4.6081e-05           0.5891          0.5558\n8 (773) -3.8942e-02 -1.2953e-03  4.2469e-05          -5.7768       7.615e-09\n           \n1 (773) ***\n2 (773) ***\n3 (773) ***\n4 (773) ***\n5 (773) ***\n6 (773) ***\n7 (773)    \n8 (773) ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\nThe p value is < 0.01 and hence is highly statically significant for all values except the 7th neighbour.\nWe can conclude that non functional water points is positively correlated for LGAs up to a distance of 6 neighbours, and negatively correlated from the 8th neighbour onwards.\nAs the 7th degree neighbour is not statistically significant, we will not reject the null hypothesis of it being random.\n\n\n\nComputing Geary’s C correlogram\nSimilarly to Moran’s I correlogram, we use sp.correlogram() of spdep package to compute a 8-lag spatial correlogram of non functional water points\nWe use zero.policy = TRUE because there is an isolated island, if we don’t use it, an error will be thrown to say there is no neighbours. We use order of 8 as we are using adaptive weight matrix of 8 neighbours. We also use binary weights for the style as it is more robust.\n\nGC_Corr = sp.correlogram(wm_q, nga_wp$`wpt non functional`, order = 8, method = \"C\", style = \"B\", zero.policy = TRUE)\nplot(GC_Corr)\n\n\n\n\nPlotting the output might not allow us to provide complete interpretation, this is because not all autocorrelation values are statistically significant. Hence we should analyze the report by printing out the result\n\nprint(GC_Corr)\n\nSpatial correlogram for nga_wp$`wpt non functional` \nmethod: Geary's C\n          estimate expectation   variance standard deviate Pr(I) two sided    \n1 (773) 0.64484273  1.00000000 0.00112669         -10.5808       < 2.2e-16 ***\n2 (773) 0.78368963  1.00000000 0.00088266          -7.2808       3.318e-13 ***\n3 (773) 0.85303861  1.00000000 0.00082793          -5.1075       3.265e-07 ***\n4 (773) 0.90611306  1.00000000 0.00085844          -3.2044        0.001353 ** \n5 (773) 0.96955514  1.00000000 0.00090726          -1.0108        0.312131    \n6 (773) 1.00947208  1.00000000 0.00097247           0.3037        0.761323    \n7 (773) 1.03659937  1.00000000 0.00101139           1.1508        0.249799    \n8 (773) 1.06408222  1.00000000 0.00101272           2.0137        0.044042 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\nIn this case, it is only statistically significant for the 1st to 4th degree and 8th degree neighbour for non functional water points to be correlated by distance. The rest of the neighbours are insignificant and appears to be random for the Geary’s C statistics.\n\n\nFinding the distance of spatial lags and building higher order neighbour list\nIn order to build higher order neighbour lists, we can use the nblag() function, where higher order neighbours are only lags links apart from one another on the graph defined by the input neighbours list. (Treglia, 2015).\nTo do so, we can iterate through the neighbour lists (nb8) with sapply() and find the distance between the point of lag (y) and the coordinate using nbdists(), unlist them using unlist(), and find the mean using mean().\n\n#find spatial lag up to 8 neighbours\nnb8 = nblag(wm_q, 8)\n#sapply to iterate, passing each value as y\n#Find the distance between y and the coordinates\n#unlist them and find the mean\ncorrelogram_dist = sapply(nb8, function(y) mean(unlist(nbdists(y, coord, longlat = TRUE))))\ncorrelogram_dist\n\n[1]  36.62338  71.43933 111.87487 155.78807 201.89566 251.07555 302.92621\n[8] 356.66369\n\n\nFindings:\nBased on Moran’s I Statistics, From spatial lag 1 to 6 (from 36.62 km - 251.08 km), the non-functional water points are positively correlated, and from lag 8 onwards, they are negatively correlated, beginning at 356.66 km.\nBased on Geary’s C Statistics, From spatial lag 1 to 4 (from 36.62 km - 155.79 km), the non-functional water points are clustered, and from lag 8 onwards, they are dispersed, beginning at 356.66 km."
  },
  {
    "objectID": "Take-Home_Ex1/Take-Home_Ex1.html#cluster-and-outlier-analysis",
    "href": "Take-Home_Ex1/Take-Home_Ex1.html#cluster-and-outlier-analysis",
    "title": "Take Home Exercise 1 - Investigation of Water points in Nigeria",
    "section": "Cluster and Outlier Analysis",
    "text": "Cluster and Outlier Analysis\nStatistics called Local Indicators of Spatial Association, or LISA, assess whether clusters exist in the spatial arrangement of a given variable.\nWe will use relevant Local Indicators for Spatial Association (LISA), particularly local Moran, in this section to identify clusters and/or outliers in the number of non functional water points in Nigeria.\n\nComputing Local Moran’s I Statistics\nThe localmoran() function of spdep will be used to calculate local Moran’s I. Given a collection of l_i values, z_i values and a listw object with neighbour weighting details for the polygon associated with the z_i values.\n\nfips = order(nga_wp$`wpt non functional`)\nlocalMI = localmoran(nga_wp$`wpt non functional`, knn8ListW)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii       Z.Ii Pr(z != E(Ii))\n1 -0.080696263 -9.995243e-04 9.573134e-02 -0.2575808    0.796730455\n2 -0.022923567 -4.092463e-05 3.923396e-03 -0.3653214    0.714871500\n3  1.250637751 -1.627684e-03 1.557965e-01  3.1726160    0.001510722\n4 -0.031922684 -5.427505e-05 5.203215e-03 -0.4417988    0.658634818\n5  0.091666434 -2.590965e-04 2.483385e-02  0.5833297    0.559671349\n6  0.007875149 -1.538445e-07 1.474949e-05  2.0505897    0.040306916\n\n\nBefore mapping the local Moran’s I map, we need to append the local Moran’s I data frame (localMI) onto the nga_wp spatial polygon data frame by using cbind() and renaming the columns by Prefixing Pr.\n\nnga_wp.localMI = cbind(nga_wp, localMI) %>% #pipe\n                rename(Pr.Ii = Pr.z....E.Ii..)\n\nnga_wp.localMI_pValue = nga_wp.localMI\n\nAfter creating the the new data frame nga_wp.localMI, we can use the tmap package to plot the local Moran’s I values with a multi layer map\n\nWe use tm_shape() + tm_fill(\"ADM1_EN\") to form Layer 1 of the map to form the 37 states of the map. The Pastel1 palette is used because it is difficult to read different shades of the same two to three colors; Pastel1 has more colors, making states more distinct.\nWe use tm_shape() + tm_fill(\"wpt non functional\") to form layer 2 of the map to plot the number of non functional water point.\nNext we use tm_shape() + tm_shape(nga_wp.localMI) to form Layer 3 of the map which are the local Moran values. The palette used in this case is Purple Red such that areas with very little water points are shaded with a very light colour\nAs we expect that the choropleth map shows that there is evidence for both positive & negative li values, we need to consider the p-values for each of these values to determine if they are statistically significant\nWe use tm_shape() + tm_shape(nga_wp.localMI_pValue)to form Layer 4 of the map which are the local Moran p values. The palette used in this case is Green with fixed breaks denoting the various p value of confidence interval. Since we are only interested in values that are statistically significant, we stop at 0.05\n\nWe may switch between layers on the interactive map to superimpose the nonfunctional water locations. With so many polygons, putting it side by side can be challenging to interpret. We use the Green palette so that it can be contrasting when we toggle between maps\n\ntm_shape(nga) + \n  tm_fill(\"ADM1_EN\", palette = \"Pastel1\") +\n  tm_borders(alpha=0.5) + \n  tm_grid (alpha=0.2) +\n  \ntm_shape(nga_wp) + \n  tm_fill(\"wpt non functional\", \n          palette =\"Blues\", style=\"kmeans\", n=6) +  \n  tm_borders(alpha=0.5) + \n  tm_grid (alpha=0.2) +\n\n\ntm_shape(nga_wp.localMI) + \n  tm_fill(col=\"Ii\", #note that actual value is Ii\n          palette = \"PuRd\", title = \"Local Moran's I Statistics\",\n          style=\"pretty\", n=6) + \n  tm_borders(alpha = 0.5) +\n  \ntm_shape(nga_wp.localMI_pValue) + \n  tm_fill(col=\"Pr.Ii\", #note that p value is Pr.Ii\n          breaks=c(-Inf, 0.001, 0.01, 0.05,  Inf),\n          style=\"fixed\",\n          palette = \"-Greens\", title = \"Local Moran's I p values\") +   tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\nAnalysis of Results of Local Moran’s I Statistics - Dissimilar Features\n\n\n\n\n\n\n\nState\n(L1 Admin Area)\nFindings with statistical significance\n\n\n\n\nAbia\nThere are no statistically significant area\n\n\nAdamawa\nThere are no statistically significant area\n\n\nAkwa Ibom\nThere are no statistically significant area\n\n\nAnambra\nOyi and Ihiala are dissimilar with its surroundings, they are not a cluster. They have 28 and 29 non functional water points respectively. Its surrounding LGAS have less than 10 non functional water points\n\n\nBauchi\nKirfi and Alkaleri are dissimilar with its surrounding. They have relatively lower number (21) of non functional water points (28 and 38 respectively) They might be statistically significant because of its proximity to neighbours with very high number of faulty water points in the state of Gombe\n\n\nBayelsa\nSagbama, Ekeremor, and Nembe are dissimilar with its surrounding. it has a higher number of non functional water points as compared to its surroundings (44, 29 and 27 respectively), its surrounding LGAS have less than 20 non functional water points\n\n\nBenue\nKatsina-Ala and Vandeikya are dissimilar with its surrounding, they each has 53 non functional points which is less than its surrounding neighbours\n\n\nBorno\nJere is dissimilar with its surrounding, it has 37 water non functional water points as compared to 0 in its surroundings.\n\n\nCross River\nAkamkpa in the cross river state are dissimilar compared to the rest of the nearby. it is highly significant in as it has a p-value of less than 0.001 with 47 non functional water in the area\n\n\nDelta\nThere are no statistically significant area\n\n\nEbonyi\nAbakaliki, Ikwo is a cluster that are dissimilar compared to the rest of the nearby. Each of them has less than 47 non functional water points as compared to nearby LGAs with at least 60 non functional water points\n\n\nEdo\nThere are no statistically significant area\n\n\nEnugu\nNkanu West is dissimilar with its surrounding, it has 36 non functional water points, higher number as compared to its surroundings. Its surrounding LGAS have less than 10 non functional water points\n\n\nEtiki\nMoba, Efon, Ekiti East and Emure are dissimilar with its surrounding. They have a lower number of non functional water points as compared to its surrounding\n\n\nFederal Capital Territory\nThere are no statistically significant area\n\n\nGombe\nIn the Gombe LGA of Gombe State. It is dissimilar with its surrounding. It has relatively lower number (39) of non functional water points. It is a tiny LGA surrounded by other larger LGAs with a pretty high number of non functional water points\n\n\nImo\nThere are no statistically significant area\n\n\nJigawa\nThere are no statistically significant area\n\n\nKaduna\nChikun, Zango-Kataf are dissimilar with its surrounding. it has a relatively lower number (4 & 19 respectively) of non functional water points as compared to its surrounding. Kauru, however, might be statistically significant because of its dissimilarity with Chikun, Zango-Kataf as it has 54 non functional water points\n\n\nKano\nThere are no statistically significant area with negative local Moran Value\n\n\nKatsina\nZango is dissimilar with its surrounding. it has a relatively lower number (21) of non functional water points as compared to its surrounding.\n\n\nKebbi\nSuru and Bagudo are dissimilar with its surrounding. Bagudo has 34 non functional water points, one of the lower one in the region. Suru however might be statistically significant because of its proximity to neighbours with very high number of faulty water points such as Bunza & Dandi (116 & 94 respectively)\n\n\nKogi\nOgori/Magongo is dissimilar with its surroundings, it has a lower number of non functional water points as compared to its surrounding. However its land area is too small to have a many water points anyway, even though it is highly significant\n\n\nKwara\nIlorin East, Ilorin South, Asa are dissimilar with its surrounding. They have a lower number of non functional water points as compared to its surroundings\n\n\nLagos\nAlimosho and Ikorodu are dissimilar with its surrounding. it has a higher number of non functional water points as compared to its surroundings\n\n\nNasarawa\nAwe, Akwanga and Wamba are dissimilar with its surrounding. it has a lower number of non functional water points as compared to its surrounding.\n\n\nNiger\nThere are no statistically significant area with negative local Moran Value\n\n\nOgun\nThere are no statistically significant area with negative local Moran Value\n\n\nOndo\nThere are no statistically significant area with negative local Moran Value\n\n\nOsun\nIlesha West is dissimilar with its surroundings, it has a lower number of non functional water points as compared to its surrounding(45) Its neighbours mostly have at least 56 non functional water points\n\n\nOyo\nThere are no statistically significant area\n\n\nPlateau\nJos North, Langtang South & Jose are dissimilar with its surrounding. it has a lower number of non functional water points as compared to its surrounding.\n\n\nRivers\nObia/Akpor are dissimilar with its surrounding, it has a higher number of non functional water points as compared to its surroundings (44), its surrounding LGAS have less than 10 non functional water points\n\n\nSotoko\nThere are no statistically significant area\n\n\nTabara\nThere are no statistically significant area\n\n\nYobe\nThere are no statistically significant area\n\n\nZamfara\nThere are no statistically significant area\n\n\n\n\n\nAnalysis of Results of Local Moran’s I Statistics - Similar Features\n\n\n\n\n\n\n\nState\n(L1 Admin Area)\nFindings with statistical significance\n\n\n\n\nAbia\nUmu-Nneochi forms a cluster with a large part of Enugu and Imo with 14 non functional water points\n\n\nAdamawa\nThe cluster is formed by Gombi, Hong, Song, Maiha, Mubi, South Mubi, North Michika, Madagali, Fufore, Yola South, Yola North, Girei, Demsa, Jada where they have a low number of non functional water points. The cluster can be said to be part of the cluster that extends from south of borno\n\n\nAkwa Ibom\nThere are no statistically significant area\n\n\nAnambra\nAlmost the whole state of Anambra is a cluster by itself with very few non functional water points\n\n\nBauchi\nThere are no statistically significant area\n\n\nBayelsa\nKolokuma/Opokuma and Yenegoa is a cluster where there are at most 15 non functional water points per LGA in the area, along the borders towards the west of the state Rivers\n\n\nBenue\nThe significant clusters are formed by Konshisha, Buruku Ushongo Kwande with a relative high number of non functional water points in the area. The cluster extends towards north east of cross river\n\n\nBorno\nAlmost the whole state is statistically significant, all of the LGAs in this state has a low number of non functional water points. The ony state with a relatively higher LGA is Jere with 37 of them. The clusters extends southwards towards Adamawa\n\n\nCross River\nThe cluster consists of Obubra, Ikom, Boki, Ogoja, Etung, Obanliku, Obudu, Bekwara with high number of non functional water points\n\n\nDelta\nAniocha North, Oshimili North, Aniocha South, Oshimili South, Ndokwa West along the Anambra borders is a cluster where there are at most 5 non functional water points per LGA in the area\nThere is another cluster along the coast of Bight of Benin / Gulf of Guinea\nSapele, Okpe, Ethiope East, Ughelli North, Ughelli South, Warri South, Warri South West, Uvwie, Udu, Burutu, Bomadi, Sagbama, Isoko South is a cluster where there are at most 27 non functional water points per LGA in the area\n\n\nEbonyi\nIn Ebonyi, only Ezza South is statistically significant, however from the raw data it does not seem to be an outlier\n\n\nEdo\nThere are no statistically significant area\n\n\nEnugu\nAlmost the whole of Enugu is made up LGAs with low number of water points. The following areas Isi-Uzo, Enugu East, Nkanu East, Nkanu West and Aninri are however statistically insignificant. It might be because they are near the east border of Plateau, with high number of non functional water points, cancelling each other out.\nThe cluster extends north wards towards Igalamela-Odolu, the LGA at the Kogi borders\n\n\nEtiki\nMoba is listed as a cluster together with the Kwara state even though it has a low number of non functional water points. It is likely due to the fact that almost all of its neighbours has a large number of non functional water points\n\n\nFederal Capital Territory\nThere are no statistically significant area\n\n\nGombe\nThe LGAs Akko, Billiri and Kaltungo are similar in nature. They have a high number of non functional water points\n\n\nImo\nThere is a cluster consisting of Orsu, Orlu, Ideato North, Ideato South, Nkwerre, Njaba, Isu, Nwangele, Isiala, Mbano, Mbaitoli, Njaba with at most 14 non functional water points at the southern border of Anambra\n\n\nJigawa\nSule-Tankarkar is an outlier, it has a relative low number of non functional water points as compared to its neighbours.\n\n\nKaduna\nGiwa, Kudan, Sabon-Gari, Soba & Igabi is a huge cluster with at least 138 non functional water points per LGA. Kaduna North with a tiny area alone already has 70 non functional water points\n\n\nKano\nThere are no statistically significant area\n\n\nKatsina\nDandume, Danja and Funtua are outliers, it has a relative low number of non functional water points as compared to its neighbours.\n\n\nKebbi\nSuru and Bagudo are outliers, they have a relative low number of non functional water points as compared to its neighbours.\n\n\nKogi\nIgalamela-Odolu along the north west border of Enugu forms a cluster with Enugu LGAs for with a low number of non functional water points\n\n\nKwara\nThe south east of Kwara have a large number of non functional water points, Edu, Ifelodun, Isin, Irepodun, Oyun, Offa, Oke-Ero\nThis cluster spreads Northwards towards Mokwa of Niger state, and south-west wards towards Surulele of Oyo State,\nOdo-Otin, Ila, Olorunda, Ifelodun, Boripe of the Osun state, and southwards towards Moba of the Etiki State\n\n\nLagos\nThis is a cluster comprising of Kosofe Shomolu Mushin, Surulere, Lagos Mainland, Ajeromi-Ifelodun, Apapa, Lagos Island, Eti-Osa, Amuwo-Odofin, Ikeja, Oshodi-Isolo, Ifako-Ijaye, Agege which have a low number of non functional water points\n\n\nNasarawa\nThere are no statistically significant area\n\n\nNiger\nMokwa, Edati and Mokwa have a relative high number of non functional water points as compared to its neighbours. It is part of the Kwara cluster with high number of non functional water points\n\n\nOgun\nAlong the shared borders between Ondo and Kogi, the LGAs Akoko North West, Akoko North East forms a clusters with a large number of non functional water points. The cluster further spreads along the shared borders between Ondo and Edo with LGAs Akoko South West, Akoko South East, Ose\nAlong the western borders with Osun, Ile-Oluji-Okeigbo, Ondo East, Ondo West, Idanre has a cluster of non functional water points\n\n\nOndo\nAlong the shared borders between Ondo and Kogi, the LGAs Akoko North West, Akoko North East forms a clusters with a large number of non functional water points. The cluster further spreads along the shared borders between Ondo and Edo with LGAs Akoko South West, Akoko South East, Ose\nAlong the western borders with Osun, Ile-Oluji-Okeigbo, Ondo East, Ondo West, Idanre has a cluster of non functional water points\n\n\nOsun\nOdo-Otin, Ila, Olorunda, Ifelodun, Boripe along the borders of Kwara, is a cluster. They may be related to the large cluster in Kwara\nIt is interesting to note that almost the entire eastern side of Osun is plaque by non functional water points consisting of Oriade, Atakumosa East, Atakumosa West, Ife Central, Ife East, Ife South and Ife North, Ilesha West, Ilesha East LGAs\n\n\nOyo\nThere is a cluster of a large number of non functional water point at Surulele, which may be attributed to the cluster at Kwara, north east of Oyo\n\n\nPlateau\nRiyom, Bokkos, Jos North, Bokkos, Mangu, Qua’an Pan, Shendam, Mikang, Pankshin, Langtang North is a huge cluster with most of them having more than 90 non functional water points per LGA.\n\n\nRivers\nAlmost the entire state of Rivers is a cluster on its own with very few non functional water points, except for Etche and Obia/Akpor which hasa 44 non functional water points. Etche is probably listed as an outlier due to its proximity to Obia/Akpor even when it has only 9 non functional water points.\nIt is interesting to note that Okrika, Ogu/Bolo, Gokana & Bonny is highly significant in Rivers. Further investigations reveals that there are only 2 non functional points in this cluster (Okrika, Gokana)\n\n\nSotoko\nThere are no statistically significant area\n\n\nTabara\nKarim-Lamido forms a cluster with LGA south of the state of Gambe and north east of the state of Plateau with at least 72 non functional water points\nDonga, Takum, Kurmi, Ussa form a cluster with at least 78 non functional LGAs in the area\n\n\nYobe\nYunusari, Bursari, Geidam, Tarmua, Damaturu, Gujba, Fune are similar in nature. They have a low number of non functional water points\n\n\nZamfara\nThere are no statistically significant area\n\n\n\n\n\n\nPlotting Moran Scatterplot\n\nA helpful visual tool for exploratory analysis is the Moran scatter plot, which helps one to judge how similar an observed value is to its nearby observations.\nThe y axis, also referred to as the response axis , is dependent on the values of the observations.\nBased on the weighted average or spatial lag of the corresponding observation on the X axis, the Y axis is constructed.\n\n\nnci = moran.plot(nga_wp$`wpt non functional`, knn8ListW, \n                 labels=as.character(nga_wp$ADM2_EN),\n                 \n                 xlab = \"Non functional water points\",\n                 ylab=\"Spatially lag Non functional water points\"\n)\n\n\n\n\nThe Moran Scatterplot results shows that most of the points congregate around the Low-Low quadrant and high-high quadrant, implying that most of the non functional water points are positively correlated to its spatial lag.\nThe number of High-Lows is not as many as the number of Low-Highs when we compare outliers, implying that most of the outliers are low amongst the high\n\n\nPreparing LISA map classes\n\nCreate the quadrants\n\nquadrant = vector(mode=\"numeric\",length=nrow(localMI))\n\nCompute the spatially lagged variable of interest (i.e. Non functional water points) and centers the spatially lagged variable around its mean.\n\nnga_wp$`lag_wpt non functional` = lag.listw(knn8ListW, nga_wp$`wpt non functional`)\nDV = nga_wp$`lag_wpt non functional` - mean(nga_wp$`lag_wpt non functional`) \n\nCenter the local Moran’s I value around the mean\n\n#local moran\nLM_I = localMI[,1] - mean(localMI[,1])    \n\nSetup the statistically significant levels for the local Moran\n\nsignif = 0.05\n\nDefine the quadrants levels\n\n#L_MI = Local Moran I ard mean\nquadrant[DV <0 & LM_I>0] = 1\nquadrant[DV >0 & LM_I<0] = 2\nquadrant[DV <0 & LM_I<0] = 3  \nquadrant[DV >0 & LM_I>0] = 4 \n\nPlace non significant Moran into category 0\n\nquadrant[localMI[,5]>signif] = 0\n\nPlotting the LISA Map\nUsing the same way we plot multi layer map we previously discussed, we plot Nigeria map at layer 1 as Nigeria Level 1 administration area, layer 2 as non functional water points, layer 3 as the LISA map and layer 4 as the local Moran I p values with tmap functions below\n\nnga_wp.localMI$quadrant = quadrant\ncolors = c(\"white\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters = c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\n\ntm_shape(nga) + \n  tm_fill(\"ADM1_EN\", palette = \"Pastel1\") +\n  tm_borders(alpha=0.5) + \n  tm_grid (alpha=0.2) +\n\ntm_shape(nga_wp) + \n  tm_fill(\"wpt non functional\", \n          palette =\"Blues\", style=\"kmeans\", n=6) +  \n  tm_borders(alpha=0.5) + \n  tm_grid (alpha=0.2) +\n\ntm_shape(nga_wp.localMI) + \n  tm_fill(col=\"quadrant\", style=\"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1]) +\n\n          tm_borders(alpha=0.5) +\n\ntm_shape(nga_wp.localMI_pValue) + \n  tm_fill(col=\"Pr.Ii\", #note that p value is Pr.Ii\n          breaks=c(-Inf, 0.001, 0.01, 0.05,  Inf),\n          style=\"fixed\",\n          palette = \"-Greens\", title = \"Local Moran's I p values\") +  \n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Take-Home_Ex1/Take-Home_Ex1.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Take-Home_Ex1/Take-Home_Ex1.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Take Home Exercise 1 - Investigation of Water points in Nigeria",
    "section": "Hot Spot and Cold Spot Area Analysis",
    "text": "Hot Spot and Cold Spot Area Analysis\nA region or value that is higher than its surrounds is referred to as a “hot spot”, while value lower than its surrounding are known as cold spot in a variety of fields. Moran’s I and Geary’s C cannot distinguish them as they only indicate clustering, it is not possible to tell whether a cluster is a hot spot, cold spot or both.\n\nGetis and Ord’s G-Statistics\nThe G statistic distinguishes between hot spots and cold spots. It identifies spatial concentrations.\n\nIt must be noted that the G Statistics is not able to detect spatial outliers as it does not take cross products like local Moran.\n\nThe General G statistic is interpreted relative to its mean value. The value for which there is no spatial association\n\nG > mean implies potential clusters of “hot spots”\nG < mean implies potential clusters of “cold spots”\n\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix, which we already have done, wm_d72 is the fixed distance matrix and knn8 is the adaptive weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\nGi statistics using adaptive distance\nWe can use localG() to compute the Gi statistics. The output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nAs we previously discussed, due to the fact there is an isolated island, we will not used fixed weights\n\nfips = order(nga_wp$`wpt non functional`)\ngi.adaptive = localG(nga_wp$`wpt non functional`, knn8ListW, return_internals = TRUE)\ngi.adaptive\n\n  [1]  0.257580793  0.365321408 -3.172615980  0.441798785 -0.583329735\n  [6]  2.050589742 -0.632312603 -1.396086867  1.880652261 -1.291593139\n [11] -2.384800426  0.244762343 -0.094119514  0.068697812 -0.872469197\n [16]  0.455432877 -0.859647214  1.451909048  0.259741618  0.012258553\n [21] -0.427268560 -2.108603652 -2.529656836  0.845088742 -1.271763117\n [26] -2.691732086 -2.080577008  1.477314680  0.769581696  1.861239398\n [31] -0.514868548 -2.856289692 -0.247065767  3.343281960 -1.058450049\n [36]  2.815784731  0.910722399  2.649850209  2.591147714  2.521284873\n [41]  2.317622264 -0.834218468 -1.984091473  0.584724334  1.464138230\n [46]  2.232549024 -0.566510977  1.045886008 -2.809960395  2.997040870\n [51] -2.644212681 -2.432192878 -2.116087250 -2.604861422 -2.413858661\n [56] -0.672421491 -2.261671256 -2.731164547 -0.057530684 -0.495525903\n [61] -0.660021265 -2.846920146  1.699436887  1.399154520  0.205107737\n [66] -0.805635155  2.548408487 -2.433705276 -2.874241897  3.169625423\n [71]  2.021935363 -0.401029545 -0.207399167  0.221260286  0.798189109\n [76]  2.193966445 -2.318609112 -1.994363405 -2.222674971 -2.087073726\n [81]  1.512538336 -0.432872517 -0.780743213  2.566727236 -1.815733068\n [86]  0.448355348 -0.314879706 -0.412982950  0.019343370  1.692299527\n [91] -2.837340857  1.915839013  0.041072534 -0.032841607  1.687721502\n [96]  1.161380851  0.453164406 -0.802739792  1.506497447  0.411866755\n[101] -0.594707867  3.761166427 -1.484458779  0.884564706 -1.212359667\n[106]  1.685790888  3.334982530 -0.503939444 -1.202047835  0.193694826\n[111]  0.909364616  0.076926521  1.818858898 -0.641207282 -2.722389386\n[116] -1.184095021  2.097102040  3.190195650  3.650921821  2.903464509\n[121] -1.955527195 -2.846920146  1.111043517  2.277012047  0.010575243\n[126] -1.781130894 -0.457239937 -0.391875130 -0.010356134 -0.735949258\n[131]  1.186268374 -2.144662166  2.063718039 -2.262029712  0.425075019\n[136]  0.756940105 -0.006686552 -0.151051419  0.280564572 -2.883627069\n[141]  2.670748448 -1.604728142 -2.846300135 -0.121743530  0.512774451\n[146] -3.009768063 -0.432136716  1.477912513  1.993261551 -0.965679548\n[151]  2.432020342  0.308877258  0.402384822  0.799922467 -0.493452894\n[156] -0.815086751 -2.530411741 -0.875769922 -2.903769357 -2.837340857\n[161]  0.040874076  0.748094777  2.487374588  1.151631104 -2.393895114\n[166]  0.592197660  1.379237624 -0.751608743 -0.698647684  0.997528760\n[171]  1.979853370  1.831298623  1.839725459  3.959472690  2.498974013\n[176] -1.579144115  0.735876006 -0.649380690  1.381314311 -0.774563464\n[181] -1.598290209  0.376504163 -2.210176172  0.163925067  1.181346881\n[186]  3.829669498  1.710648752  1.337717779 -2.597266840 -1.936887669\n[191] -2.252633604  2.939130571 -1.390264158 -1.697240577 -1.716398414\n[196] -1.095142037 -1.273176059 -1.569957362 -1.847591484 -1.263854384\n[201]  0.378605524 -0.235536952  0.279567641 -0.901148734 -1.934616996\n[206] -1.302278995 -2.310479949  0.594852251  0.287978406 -1.291244552\n[211] -0.755862051 -1.215489236  3.330576386 -0.670844345 -2.394876468\n[216] -1.206285092  1.192645934  2.119710813 -1.141239800  0.573679706\n[221] -0.817730597 -0.154720229 -2.885237303  1.457727372 -2.441303938\n[226]  2.058270388 -0.030208050 -0.133817064  1.427600824 -1.170735692\n[231] -0.489141498 -0.777154843  1.654649924  1.119577325 -1.337620067\n[236]  1.153445088  1.744069716  0.716791623  0.129954151  1.939547000\n[241] -2.923554460 -1.411024136 -0.305000753 -2.932711112  4.001499955\n[246] -2.856289692  4.768610688 -2.863042720 -0.496962435 -2.779865121\n[251] -0.009164366 -2.176369900 -0.183771486  0.636003818  1.378596437\n[256] -0.162537265 -0.133613980  1.464802179 -0.276183613 -1.025381105\n[261] -3.172615980 -0.743424908  0.051041815 -1.387683170  0.064749990\n[266] -0.690112693 -1.370386311  0.513465966  0.143523266  0.626541444\n[271] -3.028926641  0.533334395 -2.693247201 -2.721982870 -0.260076688\n[276] -1.069424820 -1.071538977 -0.700411707 -1.071538977 -1.683946145\n[281] -0.904570559  0.039884088 -0.272981582 -0.341987612  0.133374798\n[286] -0.190441049  3.006393396 -0.534830606 -1.299940129  2.913557694\n[291] -2.558763069 -2.251918047 -2.348419169 -2.597074508 -0.908356377\n[296]  1.071185158 -2.211532990  2.125083997  2.184940048  3.239753613\n[301]  4.343261815  1.446921913  1.780282475  4.254768272  2.361560444\n[306] -0.680774678  4.477365040 -2.049516041 -2.892462959 -1.754384919\n[311] -2.319498934 -2.018856026 -2.554775530 -1.196962632  0.027062830\n[316] -0.974820183 -1.242102250 -0.737516832 -0.365998258  1.717905056\n[321]  0.442480276 -1.467502497 -1.274349494  0.727454535 -1.695101654\n[326] -2.080397310 -0.585248938  0.568238456  0.512323241  3.139439582\n[331] -0.534213320 -2.322001586 -0.783490216  0.058731622 -0.955363065\n[336] -2.204740822  3.056133314 -1.060046599  3.106701327  0.641119323\n[341]  3.830569456  1.723557186  2.607377303  2.644333556 -1.076583952\n[346]  4.710866800  5.658679502  2.578795263  0.419617481 -0.028509661\n[351] -0.756901791  0.699416117  1.583249173  0.518758102  3.046564695\n[356]  1.581586694  1.436916407  1.668577886 -1.092674275  1.550012727\n[361] -0.948649463 -0.328829232 -1.146190089 -0.247670740 -0.946104934\n[366] -2.085143158  4.770911172 -1.953325599  1.486603417 -1.397133351\n[371] -1.857442237 -2.061062475  0.136093626 -0.049061393 -0.083555973\n[376] -1.350150069 -0.348331945  0.930725323  1.226245198  2.815290638\n[381] -2.357811749 -0.897933554  0.850955063 -0.005696563 -0.256637352\n[386]  0.675442461  1.622039116 -3.128112885  1.006350176  1.659349650\n[391]  2.020591726  2.056672434  0.011466046 -1.198849107  0.705388129\n[396]  5.482037489  5.342723771 -0.155034731 -0.430166051 -2.674492940\n[401]  0.779270300 -0.012899846  0.966737456  0.003578777  1.378062669\n[406] -3.191774558  0.866950163  3.358629384  1.604841026 -0.200522822\n[411]  1.884951977 -0.275880904 -1.671732671  0.430388335 -1.231860912\n[416]  2.006576583  1.258758617  0.978192417  0.612479340  1.181555306\n[421]  2.300678717  0.431940941  3.105579998 -0.622283932  2.224226089\n[426]  0.929621769  1.141101282  1.034801111  1.723172871 -2.345566043\n[431]  0.203192985  2.040634271  0.631196501 -1.107156661 -0.797715409\n[436]  0.480865257  0.314712900  1.265928961 -1.965450290 -2.703230807\n[441]  2.286981740  0.604236860 -2.807395625  0.679751440  3.973199917\n[446] -0.080722712 -3.191774558 -0.853267348 -0.622852905 -0.792044630\n[451]  0.349554523  2.056131410 -0.413436408  0.292642010  3.592956060\n[456]  2.626522151 -1.250913327 -1.611030313  1.301274911 -0.140395949\n[461] -2.950098268 -2.884818330  0.687837579  2.403204055  2.672637823\n[466]  0.182681464  0.858126468  1.714841505 -0.473432658  1.775212915\n[471]  0.239076144  1.234240937 -2.961871617 -1.435548406 -2.799023700\n[476]  0.241776743 -2.769875652  1.035624330 -2.817365286  1.562443713\n[481] -2.798209567  1.496740192  0.352733749  0.537804212  1.081626946\n[486] -1.015052552  2.682543954  0.712146345 -1.147661487  1.325150537\n[491]  3.714769366 -3.191774558  0.653862309  1.265151686  1.746234717\n[496] -0.609702057 -1.907636177 -2.212447301 -0.247468145 -2.970408124\n[501]  0.065280390  3.198626994 -0.997842710 -0.313966594 -0.568947566\n[506]  1.982684445 -3.172615980  4.276689486 -2.837340857  2.330042680\n[511]  3.030451054 -2.932921038 -2.789237264 -0.641207282 -3.008718225\n[516] -0.945286866  0.906272543 -0.297735171 -0.762754747 -0.071923959\n[521]  0.790347082 -1.136330730 -1.568956877 -2.229575754 -2.837340857\n[526] -2.779865121  0.128119407 -1.705108902  0.202995478  0.756177180\n[531] -2.337936445 -2.336924558 -0.959663868 -2.142348948 -2.364864111\n[536] -2.548092271 -2.357997725 -0.149870172 -0.152455494 -0.255355531\n[541] -2.212932703 -1.065172350 -2.250126257 -1.235517200  3.604741888\n[546]  1.074912689  1.536271171 -0.566264575 -2.208531366  1.299702064\n[551]  0.107974327 -1.186411740  2.399177669  3.370867350 -0.878790384\n[556]  0.693611988  3.532268519 -0.047556484 -0.194079673  4.727035392\n[561] -0.736715957 -1.360393209 -1.807451287 -1.906193057 -1.847728989\n[566]  1.944085415  1.382345201  1.327406249  2.661282820  2.843707689\n[571] -2.827761567  0.546618688 -1.920101677 -0.488250879 -1.700613732\n[576]  0.828648623  0.140570965 -0.821258650 -2.356074905 -0.898458838\n[581]  1.829372320  1.997597598  0.520377542  0.041271150 -2.287411585\n[586]  1.075453036 -0.064116600 -2.136991651 -1.214442287 -2.597658898\n[591]  1.378305452 -1.637653598  2.110987382  0.173497062 -1.110794700\n[596]  0.556470660 -0.642948509 -1.221350050  2.526501367  2.991205636\n[601]  0.410576505 -2.396501613 -2.463361846 -0.247166011 -1.179410903\n[606] -1.224126125 -0.103293173 -1.699474045  0.786665425  2.213032430\n[611] -2.518687139  1.852627239  0.123417653 -2.290052030 -1.839623888\n[616] -1.839623888 -0.360741798 -2.365328984 -2.385131539  2.453905986\n[621] -2.376601559 -2.873312087 -2.281742081 -0.363898608  1.613130409\n[626] -0.189836373 -0.314470904  1.054209699  0.240308148  0.135502792\n[631] -1.754548669 -1.855884424 -1.742281989  0.745139359  1.106465042\n[636] -2.535761431 -1.227728065  0.900879062 -0.153888280  4.026476128\n[641] -0.897528551  2.356835696 -1.877928996  2.753381235 -2.001793481\n[646]  0.132804661  2.579605676 -1.169833378  0.748768008 -0.171906169\n[651] -1.129694776  0.283389731  1.571443878 -1.150678327  0.190175207\n[656]  3.124335234  0.953128629  0.053747777  4.988186352 -1.308343748\n[661]  0.709714123  0.287506191 -2.428676235  0.110290645 -0.495625472\n[666] -0.016159271  1.734831081  2.801905748 -2.050464997  1.877079159\n[671] -1.718932985  0.287040656  0.292642010 -0.337146368 -1.339817934\n[676] -1.715911396  2.464501545 -1.433734503 -0.571225197 -0.114265953\n[681]  3.184822233 -2.894191153 -0.354646995  3.944168518 -0.375123593\n[686] -0.403518518 -2.826357481 -1.770475836  2.972496943  0.267430901\n[691]  0.723438854  2.405263050 -2.903167621  3.083378883  1.128958085\n[696]  1.560674795 -2.195162266 -0.605916824  2.497151547 -1.450413649\n[701]  0.510286256 -0.170095188 -0.824915302  1.764409809 -2.730969993\n[706]  0.742832298 -1.639767068 -0.133108529  1.294849920  0.055701472\n[711] -0.820661539 -1.098430718 -0.808441454 -1.067563844 -1.994187045\n[716] -2.567244246 -2.300160851 -0.332711458 -2.259550137 -2.451662696\n[721] -0.187963989 -1.195636306  0.097215792  1.690728278 -0.541498022\n[726] -1.565371570 -1.328346101 -2.308038891 -1.168239988 -1.098529875\n[731] -1.226204416 -1.850334234  0.327523656 -0.294623941  2.231765955\n[736]  2.256564102 -2.155807328 -0.552561541 -2.185765411  2.961151936\n[741] -0.677685426  3.582235845 -0.187963989 -1.108718218 -1.052626516\n[746] -2.555039030 -2.271072446 -0.359149135  3.286213446  0.154940808\n[751]  1.454616960 -1.186769578  0.148384574 -0.810428126  2.002732288\n[756]  2.745014678  1.335551802  1.591829951  1.940996321  1.600158771\n[761]  0.928284195 -2.097238052 -2.951660375 -2.989164494 -0.561748273\n[766] -2.195528478 -1.629554590  1.247638533  2.297826621  2.604083130\n[771]  5.220740566 -0.675265249 -1.050377924  0.345413102\nattr(,\"internals\")\n                 Gi       E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n  [1,] 1.398123e-03 0.001293661 1.644722e-07  0.257580793   7.967305e-01\n  [2,] 1.442009e-03 0.001293661 1.648964e-07  0.365321408   7.148715e-01\n  [3,] 7.765181e-06 0.001293661 1.642769e-07 -3.172615980   1.510722e-03\n  [4,] 1.473057e-03 0.001293661 1.648839e-07  0.441798785   6.586348e-01\n  [5,] 1.056885e-03 0.001293661 1.647579e-07 -0.583329735   5.596713e-01\n  [6,] 2.126551e-03 0.001293661 1.649749e-07  2.050589742   4.030692e-02\n  [7,] 1.037135e-03 0.001293661 1.645886e-07 -0.632312603   5.271826e-01\n  [8,] 7.267894e-04 0.001293661 1.648711e-07 -1.396086867   1.626883e-01\n  [9,] 2.057853e-03 0.001293661 1.651157e-07  1.880652261   6.001924e-02\n [10,] 7.693742e-04 0.001293661 1.647731e-07 -1.291593139   1.964981e-01\n [11,] 3.262693e-04 0.001293661 1.645510e-07 -2.384800426   1.708839e-02\n [12,] 1.393126e-03 0.001293661 1.651401e-07  0.244762343   8.066405e-01\n [13,] 1.255442e-03 0.001293661 1.648964e-07 -0.094119514   9.250142e-01\n [14,] 1.321559e-03 0.001293661 1.649085e-07  0.068697812   9.452302e-01\n [15,] 9.399669e-04 0.001293661 1.643446e-07 -0.872469197   3.829525e-01\n [16,] 1.478737e-03 0.001293661 1.651401e-07  0.455432877   6.487978e-01\n [17,] 9.445550e-04 0.001293661 1.649203e-07 -0.859647214   3.899835e-01\n [18,] 1.883679e-03 0.001293661 1.651397e-07  1.451909048   1.465269e-01\n [19,] 1.399123e-03 0.001293661 1.648581e-07  0.259741618   7.950631e-01\n [20,] 1.298641e-03 0.001293661 1.650130e-07  0.012258553   9.902193e-01\n [21,] 1.120065e-03 0.001293661 1.650742e-07 -0.427268560   6.691837e-01\n [22,] 4.387872e-04 0.001293661 1.643668e-07 -2.108603652   3.497881e-02\n [23,] 2.679487e-04 0.001293661 1.644099e-07 -2.529656836   1.141741e-02\n [24,] 1.636960e-03 0.001293661 1.650217e-07  0.845088742   3.980613e-01\n [25,] 7.772907e-04 0.001293661 1.648581e-07 -1.271763117   2.034573e-01\n [26,] 2.019574e-04 0.001293661 1.644924e-07 -2.691732086   7.108202e-03\n [27,] 4.503805e-04 0.001293661 1.642769e-07 -2.080577008   3.747264e-02\n [28,] 1.892166e-03 0.001293661 1.641306e-07  1.477314680   1.395913e-01\n [29,] 1.606354e-03 0.001293661 1.650921e-07  0.769581696   4.415481e-01\n [30,] 2.049946e-03 0.001293661 1.651072e-07  1.861239398   6.271038e-02\n [31,] 1.084557e-03 0.001293661 1.649431e-07 -0.514868548   6.066449e-01\n [32,] 1.358949e-04 0.001293661 1.642999e-07 -2.856289692   4.286239e-03\n [33,] 1.193327e-03 0.001293661 1.649203e-07 -0.247065767   8.048573e-01\n [34,] 2.651798e-03 0.001293661 1.650217e-07  3.343281960   8.279373e-04\n [35,] 8.635713e-04 0.001293661 1.651116e-07 -1.058450049   2.898503e-01\n [36,] 2.432226e-03 0.001293661 1.634995e-07  2.815784731   4.865826e-03\n [37,] 1.663454e-03 0.001293661 1.648711e-07  0.910722399   3.624417e-01\n [38,] 2.369447e-03 0.001293661 1.648196e-07  2.649850209   8.052746e-03\n [39,] 2.341994e-03 0.001293661 1.636868e-07  2.591147714   9.565642e-03\n [40,] 2.317772e-03 0.001293661 1.649873e-07  2.521284873   1.169271e-02\n [41,] 2.232073e-03 0.001293661 1.639464e-07  2.317622264   2.046986e-02\n [42,] 9.552402e-04 0.001293661 1.645715e-07 -0.834218468   4.041579e-01\n [43,] 4.892672e-04 0.001293661 1.643668e-07 -1.984091473   4.724564e-02\n [44,] 1.531025e-03 0.001293661 1.647881e-07  0.584724334   5.587331e-01\n [45,] 1.887408e-03 0.001293661 1.644518e-07  1.464138230   1.431562e-01\n [46,] 2.200485e-03 0.001293661 1.649849e-07  2.232549024   2.557870e-02\n [47,] 1.063581e-03 0.001293661 1.649457e-07 -0.566510977   5.710465e-01\n [48,] 1.718507e-03 0.001293661 1.650039e-07  1.045886008   2.956137e-01\n [49,] 1.517651e-04 0.001293661 1.651401e-07 -2.809960395   4.954760e-03\n [50,] 2.510337e-03 0.001293661 1.648027e-07  2.997040870   2.726142e-03\n [51,] 2.213627e-04 0.001293661 1.644518e-07 -2.644212681   8.188119e-03\n [52,] 3.068772e-04 0.001293661 1.646069e-07 -2.432192878   1.500771e-02\n [53,] 4.350799e-04 0.001293661 1.646249e-07 -2.116087250   3.433739e-02\n [54,] 2.369411e-04 0.001293661 1.645700e-07 -2.604861422   9.191143e-03\n [55,] 3.145973e-04 0.001293661 1.645123e-07 -2.413858661   1.578458e-02\n [56,] 1.021121e-03 0.001293661 1.642769e-07 -0.672421491   5.013154e-01\n [57,] 3.766698e-04 0.001293661 1.643885e-07 -2.261671256   2.371772e-02\n [58,] 1.863875e-04 0.001293661 1.643668e-07 -2.731164547   6.311095e-03\n [59,] 1.270317e-03 0.001293661 1.646426e-07 -0.057530684   9.541225e-01\n [60,] 1.092399e-03 0.001293661 1.649646e-07 -0.495525903   6.202289e-01\n [61,] 1.025769e-03 0.001293661 1.647424e-07 -0.660021265   5.092402e-01\n [62,] 1.397733e-04 0.001293661 1.642769e-07 -2.846920146   4.414443e-03\n [63,] 1.984250e-03 0.001293661 1.651314e-07  1.699436887   8.923690e-02\n [64,] 1.861843e-03 0.001293661 1.649085e-07  1.399154520   1.617667e-01\n [65,] 1.377003e-03 0.001293661 1.651072e-07  0.205107737   8.374880e-01\n [66,] 9.669753e-04 0.001293661 1.644310e-07 -0.805635155   4.204532e-01\n [67,] 2.328782e-03 0.001293661 1.649849e-07  2.548408487   1.082157e-02\n [68,] 3.067914e-04 0.001293661 1.644310e-07 -2.433705276   1.494516e-02\n [69,] 1.281533e-04 0.001293661 1.644310e-07 -2.874241897   4.049986e-03\n [70,] 2.581534e-03 0.001293661 1.650937e-07  3.169625423   1.526356e-03\n [71,] 2.115013e-03 0.001293661 1.650153e-07  2.021935363   4.318303e-02\n [72,] 1.130852e-03 0.001293661 1.648170e-07 -0.401029545   6.883984e-01\n [73,] 1.209401e-03 0.001293661 1.650536e-07 -0.207399167   8.356981e-01\n [74,] 1.383491e-03 0.001293661 1.648310e-07  0.221260286   8.248898e-01\n [75,] 1.617972e-03 0.001293661 1.650864e-07  0.798189109   4.247608e-01\n [76,] 2.184730e-03 0.001293661 1.649540e-07  2.193966445   2.823782e-02\n [77,] 3.534035e-04 0.001293661 1.644518e-07 -2.318609112   2.041624e-02\n [78,] 4.853238e-04 0.001293661 1.642769e-07 -1.994363405   4.611235e-02\n [79,] 3.922513e-04 0.001293661 1.644722e-07 -2.222674971   2.623772e-02\n [80,] 4.467616e-04 0.001293661 1.646600e-07 -2.087073726   3.688147e-02\n [81,] 1.906998e-03 0.001293661 1.644316e-07  1.512538336   1.303970e-01\n [82,] 1.117810e-03 0.001293661 1.650323e-07 -0.432872517   6.651074e-01\n [83,] 9.764105e-04 0.001293661 1.651157e-07 -0.780743213   4.349535e-01\n [84,] 2.335904e-03 0.001293661 1.648839e-07  2.566727236   1.026633e-02\n [85,] 5.560394e-04 0.001293661 1.650301e-07 -1.815733068   6.941133e-02\n [86,] 1.475384e-03 0.001293661 1.642769e-07  0.448355348   6.538968e-01\n [87,] 1.165827e-03 0.001293661 1.648170e-07 -0.314879706   7.528530e-01\n [88,] 1.126196e-03 0.001293661 1.644310e-07 -0.412982950   6.796191e-01\n [89,] 1.301515e-03 0.001293661 1.648607e-07  0.019343370   9.845672e-01\n [90,] 1.981347e-03 0.001293661 1.651297e-07  1.692299527   9.058888e-02\n [91,] 1.436558e-04 0.001293661 1.642769e-07 -2.837340857   4.549102e-03\n [92,] 2.071974e-03 0.001293661 1.650404e-07  1.915839013   5.538559e-02\n [93,] 1.310346e-03 0.001293661 1.650217e-07  0.041072534   9.672381e-01\n [94,] 1.280315e-03 0.001293661 1.651405e-07 -0.032841607   9.738009e-01\n [95,] 1.979312e-03 0.001293661 1.650461e-07  1.687721502   9.146470e-02\n [96,] 1.765493e-03 0.001293661 1.650536e-07  1.161380851   2.454871e-01\n [97,] 1.477771e-03 0.001293661 1.650608e-07  0.453164406   6.504304e-01\n [98,] 9.677269e-04 0.001293661 1.648581e-07 -0.802739792   4.221251e-01\n [99,] 1.905393e-03 0.001293661 1.648865e-07  1.506497447   1.319395e-01\n[100,] 1.460807e-03 0.001293661 1.646939e-07  0.411866755   6.804371e-01\n[101,] 1.052476e-03 0.001293661 1.644722e-07 -0.594707867   5.520388e-01\n[102,] 2.822066e-03 0.001293661 1.651322e-07  3.761166427   1.691229e-04\n[103,] 6.914232e-04 0.001293661 1.645886e-07 -1.484458779   1.376873e-01\n[104,] 1.653079e-03 0.001293661 1.650974e-07  0.884564706   3.763914e-01\n[105,] 8.011076e-04 0.001293661 1.650608e-07 -1.212359667   2.253747e-01\n[106,] 1.978082e-03 0.001293661 1.648310e-07  1.685790888   9.183608e-02\n[107,] 2.648470e-03 0.001293661 1.650323e-07  3.334982530   8.530476e-04\n[108,] 1.088918e-03 0.001293661 1.650677e-07 -0.503939444   6.143039e-01\n[109,] 8.052219e-04 0.001293661 1.651116e-07 -1.202047835   2.293450e-01\n[110,] 1.372255e-03 0.001293661 1.646446e-07  0.193694826   8.464148e-01\n[111,] 1.662627e-03 0.001293661 1.646249e-07  0.909364616   3.631577e-01\n[112,] 1.324896e-03 0.001293661 1.648607e-07  0.076926521   9.386820e-01\n[113,] 2.031604e-03 0.001293661 1.646069e-07  1.818858898   6.893296e-02\n[114,] 1.033443e-03 0.001293661 1.646939e-07 -0.641207282   5.213880e-01\n[115,] 1.902469e-04 0.001293661 1.642769e-07 -2.722389386   6.481173e-03\n[116,] 8.126478e-04 0.001293661 1.650217e-07 -1.184095021   2.363755e-01\n[117,] 2.144922e-03 0.001293661 1.647731e-07  2.097102040   3.598454e-02\n[118,] 2.588331e-03 0.001293661 1.646961e-07  3.190195650   1.421765e-03\n[119,] 2.777086e-03 0.001293661 1.650921e-07  3.650921821   2.613008e-04\n[120,] 2.473245e-03 0.001293661 1.650536e-07  2.903464509   3.690588e-03\n[121,] 5.009008e-04 0.001293661 1.643448e-07 -1.955527195   5.052088e-02\n[122,] 1.397733e-04 0.001293661 1.642769e-07 -2.846920146   4.414443e-03\n[123,] 1.744638e-03 0.001293661 1.647579e-07  1.111043517   2.665496e-01\n[124,] 2.218935e-03 0.001293661 1.651239e-07  2.277012047   2.278551e-02\n[125,] 1.297954e-03 0.001293661 1.648170e-07  0.010575243   9.915623e-01\n[126,] 5.710246e-04 0.001293661 1.646069e-07 -1.781130894   7.489107e-02\n[127,] 1.107949e-03 0.001293661 1.649646e-07 -0.457239937   6.474986e-01\n[128,] 1.134597e-03 0.001293661 1.647579e-07 -0.391875130   6.951505e-01\n[129,] 1.289461e-03 0.001293661 1.645123e-07 -0.010356134   9.917371e-01\n[130,] 9.948702e-04 0.001293661 1.648310e-07 -0.735949258   4.617616e-01\n[131,] 1.775646e-03 0.001293661 1.650822e-07  1.186268374   2.355163e-01\n[132,] 4.234391e-04 0.001293661 1.646426e-07 -2.144662166   3.197987e-02\n[133,] 2.132296e-03 0.001293661 1.651372e-07  2.063718039   3.904446e-02\n[134,] 3.766464e-04 0.001293661 1.643448e-07 -2.262029712   2.369557e-02\n[135,] 1.466378e-03 0.001293661 1.650974e-07  0.425075019   6.707820e-01\n[136,] 1.600920e-03 0.001293661 1.647731e-07  0.756940105   4.490857e-01\n[137,] 1.290945e-03 0.001293661 1.650301e-07 -0.006686552   9.946649e-01\n[138,] 1.232312e-03 0.001293661 1.649540e-07 -0.151051419   8.799352e-01\n[139,] 1.407640e-03 0.001293661 1.650383e-07  0.280564572   7.790444e-01\n[140,] 1.242738e-04 0.001293661 1.644518e-07 -2.883627069   3.931240e-03\n[141,] 2.376441e-03 0.001293661 1.643668e-07  2.670748448   7.568234e-03\n[142,] 6.416838e-04 0.001293661 1.650677e-07 -1.604728142   1.085536e-01\n[143,] 1.397863e-04 0.001293661 1.643448e-07 -2.846300135   4.423048e-03\n[144,] 1.244207e-03 0.001293661 1.650130e-07 -0.121743530   9.031021e-01\n[145,] 1.502039e-03 0.001293661 1.651395e-07  0.512774451   6.081091e-01\n[146,] 7.376922e-05 0.001293661 1.642769e-07 -3.009768063   2.614473e-03\n[147,] 1.118429e-03 0.001293661 1.644310e-07 -0.432136716   6.656421e-01\n[148,] 1.893762e-03 0.001293661 1.648738e-07  1.477912513   1.394312e-01\n[149,] 2.103291e-03 0.001293661 1.649849e-07  1.993261551   4.623281e-02\n[150,] 9.016011e-04 0.001293661 1.648310e-07 -0.965679548   3.342046e-01\n[151,] 2.280781e-03 0.001293661 1.647424e-07  2.432020342   1.501486e-02\n[152,] 1.419129e-03 0.001293661 1.650039e-07  0.308877258   7.574149e-01\n[153,] 1.456967e-03 0.001293661 1.647104e-07  0.402384822   6.874008e-01\n[154,] 1.618727e-03 0.001293661 1.651385e-07  0.799922467   4.237557e-01\n[155,] 1.093147e-03 0.001293661 1.651194e-07 -0.493452894   6.216926e-01\n[156,] 9.631218e-04 0.001293661 1.644518e-07 -0.815086751   4.150227e-01\n[157,] 2.679154e-04 0.001293661 1.643225e-07 -2.530411741   1.139287e-02\n[158,] 9.377724e-04 0.001293661 1.651385e-07 -0.875769922   3.811551e-01\n[159,] 1.164886e-04 0.001293661 1.643448e-07 -2.903769357   3.686997e-03\n[160,] 1.436558e-04 0.001293661 1.642769e-07 -2.837340857   4.549102e-03\n[161,] 1.310264e-03 0.001293661 1.650039e-07  0.040874076   9.673963e-01\n[162,] 1.597432e-03 0.001293661 1.648839e-07  0.748094777   4.544030e-01\n[163,] 2.304434e-03 0.001293661 1.651297e-07  2.487374588   1.286898e-02\n[164,] 1.761277e-03 0.001293661 1.648738e-07  1.151631104   2.494727e-01\n[165,] 3.224152e-04 0.001293661 1.646069e-07 -2.393895114   1.667052e-02\n[166,] 1.533719e-03 0.001293661 1.643225e-07  0.592197660   5.537182e-01\n[167,] 1.853550e-03 0.001293661 1.647881e-07  1.379237624   1.678215e-01\n[168,] 9.882346e-04 0.001293661 1.651314e-07 -0.751608743   4.522864e-01\n[169,] 1.010132e-03 0.001293661 1.646939e-07 -0.698647684   4.847722e-01\n[170,] 1.698803e-03 0.001293661 1.649540e-07  0.997528760   3.185079e-01\n[171,] 2.098191e-03 0.001293661 1.651270e-07  1.979853370   4.772001e-02\n[172,] 2.037642e-03 0.001293661 1.650461e-07  1.831298623   6.705598e-02\n[173,] 2.040832e-03 0.001293661 1.649431e-07  1.839725459   6.580855e-02\n[174,] 2.900359e-03 0.001293661 1.646621e-07  3.959472690   7.511543e-05\n[175,] 2.307907e-03 0.001293661 1.647265e-07  2.498974013   1.245534e-02\n[176,] 6.527415e-04 0.001293661 1.647265e-07 -1.579144115   1.143030e-01\n[177,] 1.591961e-03 0.001293661 1.643225e-07  0.735876006   4.618062e-01\n[178,] 1.029974e-03 0.001293661 1.648839e-07 -0.649380690   5.160923e-01\n[179,] 1.854819e-03 0.001293661 1.650383e-07  1.381314311   1.671823e-01\n[180,] 9.792340e-04 0.001293661 1.647881e-07 -0.774563464   4.385977e-01\n[181,] 6.449708e-04 0.001293661 1.647265e-07 -1.598290209   1.099784e-01\n[182,] 1.446416e-03 0.001293661 1.646087e-07  0.376504163   7.065421e-01\n[183,] 3.963813e-04 0.001293661 1.648170e-07 -2.210176172   2.709294e-02\n[184,] 1.360216e-03 0.001293661 1.648447e-07  0.163925067   8.697901e-01\n[185,] 1.773243e-03 0.001293661 1.648052e-07  1.181346881   2.374650e-01\n[186,] 2.846292e-03 0.001293661 1.643668e-07  3.829669498   1.283155e-04\n[187,] 1.988822e-03 0.001293661 1.651388e-07  1.710648752   8.714597e-02\n[188,] 1.837262e-03 0.001293661 1.651322e-07  1.337717779   1.809885e-01\n[189,] 2.407430e-04 0.001293661 1.643448e-07 -2.597266840   9.396889e-03\n[190,] 5.086194e-04 0.001293661 1.642769e-07 -1.936887669   5.275908e-02\n[191,] 3.805175e-04 0.001293661 1.643225e-07 -2.252633604   2.428226e-02\n[192,] 2.486248e-03 0.001293661 1.646426e-07  2.939130571   3.291344e-03\n[193,] 7.300177e-04 0.001293661 1.643668e-07 -1.390264158   1.644487e-01\n[194,] 6.057029e-04 0.001293661 1.642999e-07 -1.697240577   8.965119e-02\n[195,] 5.979375e-04 0.001293661 1.642999e-07 -1.716398414   8.608915e-02\n[196,] 8.486453e-04 0.001293661 1.651239e-07 -1.095142037   2.734544e-01\n[197,] 7.770008e-04 0.001293661 1.646771e-07 -1.273176059   2.029556e-01\n[198,] 6.565657e-04 0.001293661 1.646771e-07 -1.569957362   1.164250e-01\n[199,] 5.439005e-04 0.001293661 1.646771e-07 -1.847591484   6.466146e-02\n[200,] 7.808372e-04 0.001293661 1.646426e-07 -1.263854384   2.062823e-01\n[201,] 1.447516e-03 0.001293661 1.651385e-07  0.378605524   7.049808e-01\n[202,] 1.197959e-03 0.001293661 1.650921e-07 -0.235536952   8.137920e-01\n[203,] 1.407202e-03 0.001293661 1.649431e-07  0.279567641   7.798092e-01\n[204,] 9.281986e-04 0.001293661 1.644722e-07 -0.901148734   3.675092e-01\n[205,] 5.088406e-04 0.001293661 1.645700e-07 -1.934616996   5.303731e-02\n[206,] 7.652744e-04 0.001293661 1.646249e-07 -1.302278995   1.928210e-01\n[207,] 3.571983e-04 0.001293661 1.642769e-07 -2.310479949   2.086160e-02\n[208,] 1.535197e-03 0.001293661 1.648711e-07  0.594852251   5.519422e-01\n[209,] 1.410563e-03 0.001293661 1.647881e-07  0.287978406   7.733633e-01\n[210,] 7.694460e-04 0.001293661 1.648170e-07 -1.291244552   1.966189e-01\n[211,] 9.868830e-04 0.001293661 1.647265e-07 -0.755862051   4.497319e-01\n[212,] 8.003606e-04 0.001293661 1.647104e-07 -1.215489236   2.241796e-01\n[213,] 2.647068e-03 0.001293661 1.651270e-07  3.330576386   8.666638e-04\n[214,] 1.021534e-03 0.001293661 1.645510e-07 -0.670844345   5.023197e-01\n[215,] 3.223551e-04 0.001293661 1.644924e-07 -2.394876468   1.662597e-02\n[216,] 8.041708e-04 0.001293661 1.646600e-07 -1.206285092   2.277076e-01\n[217,] 1.778321e-03 0.001293661 1.651395e-07  1.192645934   2.330081e-01\n[218,] 2.154971e-03 0.001293661 1.651072e-07  2.119710813   3.403044e-02\n[219,] 8.309776e-04 0.001293661 1.643668e-07 -1.141239800   2.537701e-01\n[220,] 1.526332e-03 0.001293661 1.644924e-07  0.573679706   5.661846e-01\n[221,] 9.613588e-04 0.001293661 1.651376e-07 -0.817730597   4.135110e-01\n[222,] 1.230934e-03 0.001293661 1.643668e-07 -0.154720229   8.770419e-01\n[223,] 1.242429e-04 0.001293661 1.642769e-07 -2.885237303   3.911187e-03\n[224,] 1.885675e-03 0.001293661 1.649345e-07  1.457727372   1.449157e-01\n[225,] 3.030209e-04 0.001293661 1.646600e-07 -2.441303938   1.463433e-02\n[226,] 2.128784e-03 0.001293661 1.646249e-07  2.058270388   3.956419e-02\n[227,] 1.281414e-03 0.001293661 1.643668e-07 -0.030208050   9.759011e-01\n[228,] 1.239355e-03 0.001293661 1.646939e-07 -0.133817064   8.935472e-01\n[229,] 1.873329e-03 0.001293661 1.648711e-07  1.427600824   1.534068e-01\n[230,] 8.190839e-04 0.001293661 1.643221e-07 -1.170735692   2.417050e-01\n[231,] 1.095265e-03 0.001293661 1.645123e-07 -0.489141498   6.247415e-01\n[232,] 9.785648e-04 0.001293661 1.643885e-07 -0.777154843   4.370674e-01\n[233,] 1.966021e-03 0.001293661 1.651168e-07  1.654649924   9.799553e-02\n[234,] 1.747763e-03 0.001293661 1.645123e-07  1.119577325   2.628939e-01\n[235,] 7.503421e-04 0.001293661 1.649849e-07 -1.337620067   1.810203e-01\n[236,] 1.762372e-03 0.001293661 1.651261e-07  1.153445088   2.487277e-01\n[237,] 2.002119e-03 0.001293661 1.650063e-07  1.744069716   8.114693e-02\n[238,] 1.584245e-03 0.001293661 1.643448e-07  0.716791623   4.735027e-01\n[239,] 1.346471e-03 0.001293661 1.651405e-07  0.129954151   8.966027e-01\n[240,] 2.081842e-03 0.001293661 1.651395e-07  1.939547000   5.243477e-02\n[241,] 1.087125e-04 0.001293661 1.642769e-07 -2.923554460   3.460597e-03\n[242,] 7.203377e-04 0.001293661 1.650937e-07 -1.411024136   1.582375e-01\n[243,] 1.169822e-03 0.001293661 1.648581e-07 -0.305000753   7.603656e-01\n[244,] 1.048365e-04 0.001293661 1.643225e-07 -2.932711112   3.360164e-03\n[245,] 2.916680e-03 0.001293661 1.645134e-07  4.001499955   6.294221e-05\n[246,] 1.358949e-04 0.001293661 1.642999e-07 -2.856289692   4.286239e-03\n[247,] 3.230346e-03 0.001293661 1.649431e-07  4.768610688   1.855007e-06\n[248,] 1.320737e-04 0.001293661 1.646069e-07 -2.863042720   4.195940e-03\n[249,] 1.091924e-03 0.001293661 1.647881e-07 -0.496962435   6.192155e-01\n[250,] 1.669514e-04 0.001293661 1.642769e-07 -2.779865121   5.438148e-03\n[251,] 1.289942e-03 0.001293661 1.647265e-07 -0.009164366   9.926880e-01\n[252,] 4.115546e-04 0.001293661 1.642769e-07 -2.176369900   2.952761e-02\n[253,] 1.219171e-03 0.001293661 1.642999e-07 -0.183771486   8.541927e-01\n[254,] 1.552094e-03 0.001293661 1.651116e-07  0.636003818   5.247739e-01\n[255,] 1.852574e-03 0.001293661 1.643668e-07  1.378596437   1.680192e-01\n[256,] 1.227699e-03 0.001293661 1.646939e-07 -0.162537265   8.708828e-01\n[257,] 1.239432e-03 0.001293661 1.647265e-07 -0.133613980   8.937078e-01\n[258,] 1.888053e-03 0.001293661 1.646600e-07  1.464802179   1.429749e-01\n[259,] 1.181519e-03 0.001293661 1.648711e-07 -0.276183613   7.824070e-01\n[260,] 8.777653e-04 0.001293661 1.645123e-07 -1.025381105   3.051834e-01\n[261,] 7.765181e-06 0.001293661 1.642769e-07 -3.172615980   1.510722e-03\n[262,] 9.916314e-04 0.001293661 1.650536e-07 -0.743424908   4.572245e-01\n[263,] 1.314398e-03 0.001293661 1.650536e-07  0.051041815   9.592922e-01\n[264,] 7.304488e-04 0.001293661 1.647265e-07 -1.387683170   1.652335e-01\n[265,] 1.319970e-03 0.001293661 1.650937e-07  0.064749990   9.483731e-01\n[266,] 1.013734e-03 0.001293661 1.645318e-07 -0.690112693   4.901233e-01\n[267,] 7.378985e-04 0.001293661 1.644722e-07 -1.370386311   1.705663e-01\n[268,] 1.502320e-03 0.001293661 1.651388e-07  0.513465966   6.076254e-01\n[269,] 1.351897e-03 0.001293661 1.646426e-07  0.143523266   8.858769e-01\n[270,] 1.548253e-03 0.001293661 1.651157e-07  0.626541444   5.309599e-01\n[271,] 6.600404e-05 0.001293661 1.642769e-07 -3.028926641   2.454243e-03\n[272,] 1.510386e-03 0.001293661 1.651270e-07  0.533334395   5.938021e-01\n[273,] 2.019072e-04 0.001293661 1.643225e-07 -2.693247201   7.075978e-03\n[274,] 1.902588e-04 0.001293661 1.643225e-07 -2.721982870   6.489151e-03\n[275,] 1.188220e-03 0.001293661 1.643668e-07 -0.260076688   7.948046e-01\n[276,] 8.592535e-04 0.001293661 1.650039e-07 -1.069424820   2.848783e-01\n[277,] 8.587193e-04 0.001293661 1.647579e-07 -1.071538977   2.839272e-01\n[278,] 1.009662e-03 0.001293661 1.644099e-07 -0.700411707   4.836702e-01\n[279,] 8.587193e-04 0.001293661 1.647579e-07 -1.071538977   2.839272e-01\n[280,] 6.100783e-04 0.001293661 1.647881e-07 -1.683946145   9.219208e-02\n[281,] 9.260700e-04 0.001293661 1.651372e-07 -0.904570559   3.656929e-01\n[282,] 1.309857e-03 0.001293661 1.648964e-07  0.039884088   9.681855e-01\n[283,] 1.182732e-03 0.001293661 1.651289e-07 -0.272981582   7.848674e-01\n[284,] 1.154743e-03 0.001293661 1.650039e-07 -0.341987612   7.323602e-01\n[285,] 1.347761e-03 0.001293661 1.645318e-07  0.133374798   8.938970e-01\n[286,] 1.216346e-03 0.001293661 1.648170e-07 -0.190441049   8.489635e-01\n[287,] 2.513910e-03 0.001293661 1.647424e-07  3.006393396   2.643667e-03\n[288,] 1.076514e-03 0.001293661 1.648447e-07 -0.534830606   5.927670e-01\n[289,] 7.657504e-04 0.001293661 1.649203e-07 -1.299940129   1.936215e-01\n[290,] 2.477442e-03 0.001293661 1.650805e-07  2.913557694   3.573358e-03\n[291,] 2.562828e-04 0.001293661 1.643668e-07 -2.558763069   1.050453e-02\n[292,] 3.805648e-04 0.001293661 1.644099e-07 -2.251918047   2.432745e-02\n[293,] 3.416892e-04 0.001293661 1.643225e-07 -2.348419169   1.885329e-02\n[294,] 2.407505e-04 0.001293661 1.643668e-07 -2.597074508   9.402153e-03\n[295,] 9.248896e-04 0.001293661 1.648170e-07 -0.908356377   3.636900e-01\n[296,] 1.727914e-03 0.001293661 1.643448e-07  1.071185158   2.840862e-01\n[297,] 3.962581e-04 0.001293661 1.646600e-07 -2.211532990   2.699895e-02\n[298,] 2.157119e-03 0.001293661 1.650937e-07  2.125083997   3.357960e-02\n[299,] 2.181229e-03 0.001293661 1.650153e-07  2.184940048   2.889324e-02\n[300,] 2.610082e-03 0.001293661 1.651072e-07  3.239753613   1.196330e-03\n[301,] 3.058651e-03 0.001293661 1.651401e-07  4.343261815   1.403827e-05\n[302,] 1.881219e-03 0.001293661 1.648964e-07  1.446921913   1.479188e-01\n[303,] 2.017008e-03 0.001293661 1.650881e-07  1.780282475   7.502974e-02\n[304,] 2.988219e-03 0.001293661 1.586212e-07  4.254768272   2.092656e-05\n[305,] 2.253339e-03 0.001293661 1.651403e-07  2.361560444   1.819821e-02\n[306,] 1.017555e-03 0.001293661 1.644924e-07 -0.680774678   4.960141e-01\n[307,] 3.095782e-03 0.001293661 1.620029e-07  4.477365040   7.556997e-06\n[308,] 4.622293e-04 0.001293661 1.645700e-07 -2.049516041   4.041168e-02\n[309,] 1.204052e-04 0.001293661 1.645318e-07 -2.892462959   3.822343e-03\n[310,] 5.824428e-04 0.001293661 1.643448e-07 -1.754384919   7.936457e-02\n[311,] 3.533487e-04 0.001293661 1.643448e-07 -2.319498934   2.036800e-02\n[312,] 4.740884e-04 0.001293661 1.648027e-07 -2.018856026   4.350219e-02\n[313,] 2.564820e-04 0.001293661 1.648170e-07 -2.554775530   1.062563e-02\n[314,] 8.080055e-04 0.001293661 1.646249e-07 -1.196962632   2.313211e-01\n[315,] 1.304631e-03 0.001293661 1.643225e-07  0.027062830   9.784096e-01\n[316,] 8.978266e-04 0.001293661 1.648839e-07 -0.974820183   3.296495e-01\n[317,] 7.891709e-04 0.001293661 1.649646e-07 -1.242102250   2.141988e-01\n[318,] 9.944374e-04 0.001293661 1.646069e-07 -0.737516832   4.608081e-01\n[319,] 1.144967e-03 0.001293661 1.650556e-07 -0.365998258   7.143664e-01\n[320,] 1.991722e-03 0.001293661 1.651157e-07  1.717905056   8.581393e-02\n[321,] 1.473378e-03 0.001293661 1.649646e-07  0.442480276   6.581417e-01\n[322,] 6.988663e-04 0.001293661 1.642769e-07 -1.467502497   1.422394e-01\n[323,] 7.767835e-04 0.001293661 1.645123e-07 -1.274349494   2.025396e-01\n[324,] 1.588818e-03 0.001293661 1.646249e-07  0.727454535   4.669476e-01\n[325,] 6.059664e-04 0.001293661 1.645886e-07 -1.695101654   9.005614e-02\n[326,] 4.503945e-04 0.001293661 1.642999e-07 -2.080397310   3.748911e-02\n[327,] 1.056327e-03 0.001293661 1.644518e-07 -0.585248938   5.583803e-01\n[328,] 1.524533e-03 0.001293661 1.650742e-07  0.568238456   5.698731e-01\n[329,] 1.501852e-03 0.001293661 1.651337e-07  0.512323241   6.084248e-01\n[330,] 2.569373e-03 0.001293661 1.651205e-07  3.139439582   1.692713e-03\n[331,] 1.076715e-03 0.001293661 1.649203e-07 -0.534213320   5.931940e-01\n[332,] 3.501183e-04 0.001293661 1.651194e-07 -2.322001586   2.023285e-02\n[333,] 9.755301e-04 0.001293661 1.648711e-07 -0.783490216   4.333393e-01\n[334,] 1.317508e-03 0.001293661 1.648581e-07  0.058731622   9.531659e-01\n[335,] 9.056844e-04 0.001293661 1.649203e-07 -0.955363065   3.393941e-01\n[336,] 3.999317e-04 0.001293661 1.643225e-07 -2.204740822   2.747229e-02\n[337,] 2.535150e-03 0.001293661 1.650217e-07  3.056133314   2.242115e-03\n[338,] 8.630878e-04 0.001293661 1.649849e-07 -1.060046599   2.891234e-01\n[339,] 2.556102e-03 0.001293661 1.651289e-07  3.106701327   1.891874e-03\n[340,] 1.553760e-03 0.001293661 1.645886e-07  0.641119323   5.214452e-01\n[341,] 2.850112e-03 0.001293661 1.650989e-07  3.830569456   1.278470e-04\n[342,] 1.993193e-03 0.001293661 1.647265e-07  1.723557186   8.478781e-02\n[343,] 2.353060e-03 0.001293661 1.650864e-07  2.607377303   9.123876e-03\n[344,] 2.367807e-03 0.001293661 1.650039e-07  2.644333556   8.185195e-03\n[345,] 8.561644e-04 0.001293661 1.651405e-07 -1.076583952   2.816662e-01\n[346,] 3.206623e-03 0.001293661 1.648964e-07  4.710866800   2.466654e-06\n[347,] 3.591753e-03 0.001293661 1.649319e-07  5.658679502   1.525421e-08\n[348,] 2.341465e-03 0.001293661 1.650921e-07  2.578795263   9.914553e-03\n[349,] 1.463737e-03 0.001293661 1.642769e-07  0.419617481   6.747649e-01\n[350,] 1.282091e-03 0.001293661 1.646939e-07 -0.028509661   9.772557e-01\n[351,] 9.866070e-04 0.001293661 1.645700e-07 -0.756901791   4.491087e-01\n[352,] 1.577557e-03 0.001293661 1.647579e-07  0.699416117   4.842920e-01\n[353,] 1.936959e-03 0.001293661 1.650921e-07  1.583249173   1.133647e-01\n[354,] 1.504338e-03 0.001293661 1.649319e-07  0.518758102   6.039294e-01\n[355,] 2.528011e-03 0.001293661 1.641556e-07  3.046564695   2.314727e-03\n[356,] 1.936056e-03 0.001293661 1.649749e-07  1.581586694   1.137440e-01\n[357,] 1.877040e-03 0.001293661 1.648310e-07  1.436916407   1.507417e-01\n[358,] 1.971535e-03 0.001293661 1.650461e-07  1.668577886   9.520106e-02\n[359,] 8.505251e-04 0.001293661 1.644722e-07 -1.092674275   2.745368e-01\n[360,] 1.921942e-03 0.001293661 1.642999e-07  1.550012727   1.211385e-01\n[361,] 9.088649e-04 0.001293661 1.645318e-07 -0.948649463   3.427989e-01\n[362,] 1.160039e-03 0.001293661 1.651270e-07 -0.328829232   7.422848e-01\n[363,] 8.280978e-04 0.001293661 1.649849e-07 -1.146190089   2.517165e-01\n[364,] 1.193104e-03 0.001293661 1.648447e-07 -0.247670740   8.043892e-01\n[365,] 9.094866e-04 0.001293661 1.648839e-07 -0.946104934   3.440951e-01\n[366,] 4.469699e-04 0.001293661 1.648839e-07 -2.085143158   3.705631e-02\n[367,] 3.232155e-03 0.001293661 1.650921e-07  4.770911172   1.833944e-06\n[368,] 5.011188e-04 0.001293661 1.646249e-07 -1.953325599   5.078103e-02\n[369,] 1.897592e-03 0.001293661 1.650383e-07  1.486603417   1.371196e-01\n[370,] 7.265861e-04 0.001293661 1.647424e-07 -1.397133351   1.623735e-01\n[371,] 5.399820e-04 0.001293661 1.646426e-07 -1.857442237   6.324826e-02\n[372,] 4.581741e-04 0.001293661 1.643225e-07 -2.061062475   3.929708e-02\n[373,] 1.348935e-03 0.001293661 1.649540e-07  0.136093626   8.917473e-01\n[374,] 1.273767e-03 0.001293661 1.644310e-07 -0.049061393   9.608704e-01\n[375,] 1.259720e-03 0.001293661 1.650039e-07 -0.083555973   9.334095e-01\n[376,] 7.458512e-04 0.001293661 1.646249e-07 -1.350150069   1.769679e-01\n[377,] 1.152110e-03 0.001293661 1.651361e-07 -0.348331945   7.275909e-01\n[378,] 1.671695e-03 0.001293661 1.649749e-07  0.930725323   3.519957e-01\n[379,] 1.791488e-03 0.001293661 1.648170e-07  1.226245198   2.201064e-01\n[380,] 2.437543e-03 0.001293661 1.650881e-07  2.815290638   4.873314e-03\n[381,] 3.378168e-04 0.001293661 1.643448e-07 -2.357811749   1.838301e-02\n[382,] 9.290068e-04 0.001293661 1.649203e-07 -0.897933554   3.692210e-01\n[383,] 1.638657e-03 0.001293661 1.643668e-07  0.850955063   3.947943e-01\n[384,] 1.291346e-03 0.001293661 1.650974e-07 -0.005696563   9.954548e-01\n[385,] 1.189440e-03 0.001293661 1.649203e-07 -0.256637352   7.974587e-01\n[386,] 1.568142e-03 0.001293661 1.651385e-07  0.675442461   4.993947e-01\n[387,] 1.950748e-03 0.001293661 1.641052e-07  1.622039116   1.047950e-01\n[388,] 2.332235e-05 0.001293661 1.649203e-07 -3.128112885   1.759326e-03\n[389,] 1.702267e-03 0.001293661 1.648581e-07  1.006350176   3.142472e-01\n[390,] 1.967830e-03 0.001293661 1.650677e-07  1.659349650   9.704536e-02\n[391,] 2.113902e-03 0.001293661 1.647881e-07  2.020591726   4.332205e-02\n[392,] 2.129399e-03 0.001293661 1.651239e-07  2.056672434   3.971775e-02\n[393,] 1.298318e-03 0.001293661 1.649319e-07  0.011466046   9.908516e-01\n[394,] 8.076541e-04 0.001293661 1.643448e-07 -1.198849107   2.305866e-01\n[395,] 1.580308e-03 0.001293661 1.651343e-07  0.705388129   4.805687e-01\n[396,] 3.521401e-03 0.001293661 1.651372e-07  5.482037489   4.204551e-08\n[397,] 3.460140e-03 0.001293661 1.644310e-07  5.342723771   9.156024e-08\n[398,] 1.230819e-03 0.001293661 1.642999e-07 -0.155034731   8.767939e-01\n[399,] 1.119055e-03 0.001293661 1.647579e-07 -0.430166051   6.670749e-01\n[400,] 2.096599e-04 0.001293661 1.642769e-07 -2.674492940   7.484235e-03\n[401,] 1.609910e-03 0.001293661 1.646961e-07  0.779270300   4.358205e-01\n[402,] 1.288419e-03 0.001293661 1.651322e-07 -0.012899846   9.897077e-01\n[403,] 1.686400e-03 0.001293661 1.650404e-07  0.966737456   3.336753e-01\n[404,] 1.295115e-03 0.001293661 1.650805e-07  0.003578777   9.971446e-01\n[405,] 1.852571e-03 0.001293661 1.644924e-07  1.378062669   1.681839e-01\n[406,] 0.000000e+00 0.001293661 1.642769e-07 -3.191774558   1.414017e-03\n[407,] 1.645966e-03 0.001293661 1.651385e-07  0.866950163   3.859693e-01\n[408,] 2.658498e-03 0.001293661 1.651343e-07  3.358629384   7.833004e-04\n[409,] 1.945828e-03 0.001293661 1.651405e-07  1.604841026   1.085288e-01\n[410,] 1.212272e-03 0.001293661 1.647424e-07 -0.200522822   8.410717e-01\n[411,] 2.059584e-03 0.001293661 1.651085e-07  1.884951977   5.943632e-02\n[412,] 1.181629e-03 0.001293661 1.649085e-07 -0.275880904   7.826395e-01\n[413,] 6.144608e-04 0.001293661 1.650677e-07 -1.671732671   9.457705e-02\n[414,] 1.468258e-03 0.001293661 1.645700e-07  0.430388335   6.669132e-01\n[415,] 7.932311e-04 0.001293661 1.650301e-07 -1.231860912   2.180010e-01\n[416,] 2.109081e-03 0.001293661 1.651395e-07  2.006576583   4.479477e-02\n[417,] 1.805167e-03 0.001293661 1.651261e-07  1.258758617   2.081175e-01\n[418,] 1.690923e-03 0.001293661 1.649319e-07  0.978192417   3.279792e-01\n[419,] 1.542155e-03 0.001293661 1.646069e-07  0.612479340   5.402207e-01\n[420,] 1.773767e-03 0.001293661 1.651072e-07  1.181555306   2.373822e-01\n[421,] 2.228393e-03 0.001293661 1.650677e-07  2.300678717   2.140980e-02\n[422,] 1.469034e-03 0.001293661 1.648447e-07  0.431940941   6.657843e-01\n[423,] 2.555545e-03 0.001293661 1.651024e-07  3.105579998   1.899062e-03\n[424,] 1.041149e-03 0.001293661 1.646600e-07 -0.622283932   5.337552e-01\n[425,] 2.197349e-03 0.001293661 1.650742e-07  2.224226089   2.613324e-02\n[426,] 1.671238e-03 0.001293661 1.649671e-07  0.929621769   3.525670e-01\n[427,] 1.757114e-03 0.001293661 1.649540e-07  1.141101282   2.538278e-01\n[428,] 1.713766e-03 0.001293661 1.648170e-07  1.034801111   3.007618e-01\n[429,] 1.992821e-03 0.001293661 1.646249e-07  1.723172871   8.485727e-02\n[430,] 3.418697e-04 0.001293661 1.646600e-07 -2.345566043   1.899821e-02\n[431,] 1.376190e-03 0.001293661 1.649646e-07  0.203192985   8.389842e-01\n[432,] 2.122399e-03 0.001293661 1.649319e-07  2.040634271   4.128719e-02\n[433,] 1.550086e-03 0.001293661 1.650404e-07  0.631196501   5.279120e-01\n[434,] 8.438589e-04 0.001293661 1.650536e-07 -1.107156661   2.682262e-01\n[435,] 9.695356e-04 0.001293661 1.650937e-07 -0.797715409   4.250357e-01\n[436,] 1.488975e-03 0.001293661 1.649749e-07  0.480865257   6.306123e-01\n[437,] 1.421517e-03 0.001293661 1.650482e-07  0.314712900   7.529796e-01\n[438,] 1.807875e-03 0.001293661 1.649945e-07  1.265928961   2.055385e-01\n[439,] 4.969870e-04 0.001293661 1.642999e-07 -1.965450290   4.936214e-02\n[440,] 1.980121e-04 0.001293661 1.642769e-07 -2.703230807   6.866904e-03\n[441,] 2.222966e-03 0.001293661 1.651168e-07  2.286981740   2.219689e-02\n[442,] 1.538988e-03 0.001293661 1.648447e-07  0.604236860   5.456862e-01\n[443,] 1.553326e-04 0.001293661 1.644099e-07 -2.807395625   4.994386e-03\n[444,] 1.569493e-03 0.001293661 1.646600e-07  0.679751440   4.966619e-01\n[445,] 2.908154e-03 0.001293661 1.651168e-07  3.973199917   7.091348e-05\n[446,] 1.260857e-03 0.001293661 1.651405e-07 -0.080722712   9.356625e-01\n[447,] 0.000000e+00 0.001293661 1.642769e-07 -3.191774558   1.414017e-03\n[448,] 9.476170e-04 0.001293661 1.644722e-07 -0.853267348   3.935111e-01\n[449,] 1.040987e-03 0.001293661 1.645700e-07 -0.622852905   5.333812e-01\n[450,] 9.719458e-04 0.001293661 1.649849e-07 -0.792044630   4.283347e-01\n[451,] 1.435708e-03 0.001293661 1.651337e-07  0.349554523   7.266730e-01\n[452,] 2.129200e-03 0.001293661 1.651322e-07  2.056131410   3.976985e-02\n[453,] 1.126056e-03 0.001293661 1.643448e-07 -0.413436408   6.792869e-01\n[454,] 1.412583e-03 0.001293661 1.651401e-07  0.292642010   7.697958e-01\n[455,] 2.753373e-03 0.001293661 1.650556e-07  3.592956060   3.269477e-04\n[456,] 2.360839e-03 0.001293661 1.650864e-07  2.626522151   8.626238e-03\n[457,] 7.854788e-04 0.001293661 1.650383e-07 -1.250913327   2.109661e-01\n[458,] 6.406473e-04 0.001293661 1.642999e-07 -1.611030313   1.071731e-01\n[459,] 1.822373e-03 0.001293661 1.650822e-07  1.301274911   1.931644e-01\n[460,] 1.236623e-03 0.001293661 1.650536e-07 -0.140395949   8.883472e-01\n[461,] 9.709794e-05 0.001293661 1.645123e-07 -2.950098268   3.176729e-03\n[462,] 1.242506e-04 0.001293661 1.643225e-07 -2.884818330   3.916396e-03\n[463,] 1.572449e-03 0.001293661 1.642769e-07  0.687837579   4.915551e-01\n[464,] 2.270108e-03 0.001293661 1.650881e-07  2.403204055   1.625212e-02\n[465,] 2.379175e-03 0.001293661 1.649646e-07  2.672637823   7.525745e-03\n[466,] 1.367819e-03 0.001293661 1.647881e-07  0.182681464   8.550480e-01\n[467,] 1.642381e-03 0.001293661 1.651397e-07  0.858126468   3.908226e-01\n[468,] 1.989988e-03 0.001293661 1.648839e-07  1.714841505   8.637429e-02\n[469,] 1.101270e-03 0.001293661 1.651401e-07 -0.473432658   6.359045e-01\n[470,] 2.015000e-03 0.001293661 1.651116e-07  1.775212915   7.586274e-02\n[471,] 1.390659e-03 0.001293661 1.646069e-07  0.239076144   8.110465e-01\n[472,] 1.794147e-03 0.001293661 1.644310e-07  1.234240937   2.171131e-01\n[473,] 9.318217e-05 0.001293661 1.642769e-07 -2.961871617   3.057753e-03\n[474,] 7.110220e-04 0.001293661 1.647265e-07 -1.435548406   1.511309e-01\n[475,] 1.591862e-04 0.001293661 1.642769e-07 -2.799023700   5.125738e-03\n[476,] 1.391870e-03 0.001293661 1.649945e-07  0.241776743   8.089532e-01\n[477,] 1.708446e-04 0.001293661 1.643225e-07 -2.769875652   5.607770e-03\n[478,] 1.714250e-03 0.001293661 1.649345e-07  1.035624330   3.003774e-01\n[479,] 1.514398e-04 0.001293661 1.643668e-07 -2.817365286   4.841942e-03\n[480,] 1.928280e-03 0.001293661 1.649749e-07  1.562443713   1.181835e-01\n[481,] 1.592060e-04 0.001293661 1.643668e-07 -2.798209567   5.138676e-03\n[482,] 1.901777e-03 0.001293661 1.650742e-07  1.496740192   1.344609e-01\n[483,] 1.436648e-03 0.001293661 1.643225e-07  0.352733749   7.242881e-01\n[484,] 1.512065e-03 0.001293661 1.649203e-07  0.537804212   5.907122e-01\n[485,] 1.732496e-03 0.001293661 1.646069e-07  1.081626946   2.794183e-01\n[486,] 8.818137e-04 0.001293661 1.646249e-07 -1.015052552   3.100808e-01\n[487,] 2.383475e-03 0.001293661 1.650482e-07  2.682543954   7.306455e-03\n[488,] 1.583017e-03 0.001293661 1.650921e-07  0.712146345   4.763742e-01\n[489,] 8.277374e-04 0.001293661 1.648170e-07 -1.147661487   2.511083e-01\n[490,] 1.832115e-03 0.001293661 1.651072e-07  1.325150537   1.851212e-01\n[491,] 2.799609e-03 0.001293661 1.643448e-07  3.714769366   2.033891e-04\n[492,] 0.000000e+00 0.001293661 1.642769e-07 -3.191774558   1.414017e-03\n[493,] 1.559292e-03 0.001293661 1.650383e-07  0.653862309   5.132005e-01\n[494,] 1.807426e-03 0.001293661 1.649085e-07  1.265151686   2.058170e-01\n[495,] 2.003205e-03 0.001293661 1.651024e-07  1.746234717   8.077017e-02\n[496,] 1.045976e-03 0.001293661 1.650301e-07 -0.609702057   5.420592e-01\n[497,] 5.203156e-04 0.001293661 1.643448e-07 -1.907636177   5.643826e-02\n[498,] 3.961842e-04 0.001293661 1.645510e-07 -2.212447301   2.693577e-02\n[499,] 1.193178e-03 0.001293661 1.648711e-07 -0.247468145   8.045459e-01\n[500,] 8.931345e-05 0.001293661 1.643885e-07 -2.970408124   2.974044e-03\n[501,] 1.320122e-03 0.001293661 1.642999e-07  0.065280390   9.479508e-01\n[502,] 2.593296e-03 0.001293661 1.650881e-07  3.198626994   1.380837e-03\n[503,] 8.891685e-04 0.001293661 1.643225e-07 -0.997842710   3.183556e-01\n[504,] 1.166154e-03 0.001293661 1.649319e-07 -0.313966594   7.535464e-01\n[505,] 1.062455e-03 0.001293661 1.651403e-07 -0.568947566   5.693917e-01\n[506,] 2.098685e-03 0.001293661 1.648581e-07  1.982684445   4.740269e-02\n[507,] 7.765181e-06 0.001293661 1.642769e-07 -3.172615980   1.510722e-03\n[508,] 3.031600e-03 0.001293661 1.651405e-07  4.276689486   1.896931e-05\n[509,] 1.436558e-04 0.001293661 1.642769e-07 -2.837340857   4.549102e-03\n[510,] 2.240408e-03 0.001293661 1.650974e-07  2.330042680   1.980390e-02\n[511,] 2.525135e-03 0.001293661 1.651337e-07  3.030451054   2.441888e-03\n[512,] 1.048332e-04 0.001293661 1.642999e-07 -2.932921038   3.357893e-03\n[513,] 1.630739e-04 0.001293661 1.642999e-07 -2.789237264   5.283234e-03\n[514,] 1.033443e-03 0.001293661 1.646939e-07 -0.641207282   5.213880e-01\n[515,] 7.378068e-05 0.001293661 1.643885e-07 -3.008718225   2.623523e-03\n[516,] 9.097129e-04 0.001293661 1.649749e-07 -0.945286866   3.445124e-01\n[517,] 1.661944e-03 0.001293661 1.651376e-07  0.906272543   3.647916e-01\n[518,] 1.172907e-03 0.001293661 1.644924e-07 -0.297735171   7.659053e-01\n[519,] 9.837927e-04 0.001293661 1.650383e-07 -0.762754747   4.456097e-01\n[520,] 1.264434e-03 0.001293661 1.651289e-07 -0.071923959   9.426624e-01\n[521,] 1.614836e-03 0.001293661 1.651385e-07  0.790347082   4.293251e-01\n[522,] 8.320632e-04 0.001293661 1.650130e-07 -1.136330730   2.558182e-01\n[523,] 6.567289e-04 0.001293661 1.648027e-07 -1.568956877   1.166580e-01\n[524,] 3.885849e-04 0.001293661 1.647881e-07 -2.229575754   2.577562e-02\n[525,] 1.436558e-04 0.001293661 1.642769e-07 -2.837340857   4.549102e-03\n[526,] 1.669514e-04 0.001293661 1.642769e-07 -2.779865121   5.438148e-03\n[527,] 1.345717e-03 0.001293661 1.650864e-07  0.128119407   8.980545e-01\n[528,] 6.020259e-04 0.001293661 1.645318e-07 -1.705108902   8.817412e-02\n[529,] 1.376104e-03 0.001293661 1.649431e-07  0.202995478   8.391386e-01\n[530,] 1.600472e-03 0.001293661 1.646249e-07  0.756177180   4.495430e-01\n[531,] 3.456257e-04 0.001293661 1.644310e-07 -2.337936445   1.939055e-02\n[532,] 3.456901e-04 0.001293661 1.645510e-07 -2.336924558   1.944311e-02\n[533,] 9.046717e-04 0.001293661 1.642999e-07 -0.959663868   3.372244e-01\n[534,] 4.236761e-04 0.001293661 1.649085e-07 -2.142348948   3.216541e-02\n[535,] 3.340896e-04 0.001293661 1.646426e-07 -2.364864111   1.803669e-02\n[536,] 2.602144e-04 0.001293661 1.644924e-07 -2.548092271   1.083138e-02\n[537,] 3.378064e-04 0.001293661 1.643225e-07 -2.357997725   1.837381e-02\n[538,] 1.232772e-03 0.001293661 1.650608e-07 -0.149870172   8.808670e-01\n[539,] 1.231776e-03 0.001293661 1.647731e-07 -0.152455494   8.788277e-01\n[540,] 1.189921e-03 0.001293661 1.650461e-07 -0.255355531   7.984485e-01\n[541,] 3.961473e-04 0.001293661 1.644924e-07 -2.212932703   2.690229e-02\n[542,] 8.619351e-04 0.001293661 1.642769e-07 -1.065172350   2.867979e-01\n[543,] 3.806949e-04 0.001293661 1.646249e-07 -2.250126257   2.444093e-02\n[544,] 7.924177e-04 0.001293661 1.645886e-07 -1.235517200   2.166381e-01\n[545,] 2.758497e-03 0.001293661 1.651314e-07  3.604741888   3.124633e-04\n[546,] 1.730333e-03 0.001293661 1.650301e-07  1.074912689   2.824138e-01\n[547,] 1.917930e-03 0.001293661 1.651229e-07  1.536271171   1.244719e-01\n[548,] 1.063714e-03 0.001293661 1.648990e-07 -0.566264575   5.712139e-01\n[549,] 3.965662e-04 0.001293661 1.649945e-07 -2.208531366   2.720725e-02\n[550,] 1.821806e-03 0.001293661 1.651270e-07  1.299702064   1.937031e-01\n[551,] 1.337522e-03 0.001293661 1.650130e-07  0.107974327   9.140161e-01\n[552,] 8.120920e-04 0.001293661 1.647579e-07 -1.186411740   2.354597e-01\n[553,] 2.267839e-03 0.001293661 1.648738e-07  2.399177669   1.643194e-02\n[554,] 2.663302e-03 0.001293661 1.650937e-07  3.370867350   7.493193e-04\n[555,] 9.367809e-04 0.001293661 1.649203e-07 -0.878790384   3.795149e-01\n[556,] 1.575073e-03 0.001293661 1.646087e-07  0.693611988   4.879256e-01\n[557,] 2.727811e-03 0.001293661 1.648473e-07  3.532268519   4.120108e-04\n[558,] 1.274360e-03 0.001293661 1.647104e-07 -0.047556484   9.620697e-01\n[559,] 1.214802e-03 0.001293661 1.650989e-07 -0.194079673   8.461135e-01\n[560,] 3.213718e-03 0.001293661 1.649873e-07  4.727035392   2.278216e-06\n[561,] 9.946537e-04 0.001293661 1.647265e-07 -0.736715957   4.612951e-01\n[562,] 7.418513e-04 0.001293661 1.645318e-07 -1.360393209   1.737055e-01\n[563,] 5.597015e-04 0.001293661 1.648964e-07 -1.807451287   7.069194e-02\n[564,] 5.204611e-04 0.001293661 1.645318e-07 -1.906193057   5.662516e-02\n[565,] 5.438836e-04 0.001293661 1.646600e-07 -1.847728989   6.464156e-02\n[566,] 2.082880e-03 0.001293661 1.648027e-07  1.944085415   5.188515e-02\n[567,] 1.855338e-03 0.001293661 1.650974e-07  1.382345201   1.668657e-01\n[568,] 1.833084e-03 0.001293661 1.651397e-07  1.327406249   1.843743e-01\n[569,] 2.375019e-03 0.001293661 1.651039e-07  2.661282820   7.784354e-03\n[570,] 2.447933e-03 0.001293661 1.647579e-07  2.843707689   4.459194e-03\n[571,] 1.475384e-04 0.001293661 1.642769e-07 -2.827761567   4.687470e-03\n[572,] 1.515575e-03 0.001293661 1.648170e-07  0.546618688   5.846407e-01\n[573,] 5.134588e-04 0.001293661 1.651072e-07 -1.920101677   5.484506e-02\n[574,] 1.095537e-03 0.001293661 1.646600e-07 -0.488250879   6.253721e-01\n[575,] 6.027563e-04 0.001293661 1.650536e-07 -1.700613732   8.901554e-02\n[576,] 1.630401e-03 0.001293661 1.651385e-07  0.828648623   4.073033e-01\n[577,] 1.350783e-03 0.001293661 1.651270e-07  0.140570965   8.882089e-01\n[578,] 9.601331e-04 0.001293661 1.649319e-07 -0.821258650   4.114990e-01\n[579,] 3.379218e-04 0.001293661 1.645510e-07 -2.356074905   1.846919e-02\n[580,] 9.288624e-04 0.001293661 1.648581e-07 -0.898458838   3.689410e-01\n[581,] 2.036375e-03 0.001293661 1.648310e-07  1.829372320   6.734385e-02\n[582,] 2.104574e-03 0.001293661 1.647906e-07  1.997597598   4.576030e-02\n[583,] 1.505087e-03 0.001293661 1.650742e-07  0.520377542   6.028005e-01\n[584,] 1.310427e-03 0.001293661 1.650383e-07  0.041271150   9.670797e-01\n[585,] 3.652358e-04 0.001293661 1.647424e-07 -2.287411585   2.217181e-02\n[586,] 1.730602e-03 0.001293661 1.650677e-07  1.075453036   2.821719e-01\n[587,] 1.267614e-03 0.001293661 1.650301e-07 -0.064116600   9.488774e-01\n[588,] 4.271646e-04 0.001293661 1.644099e-07 -2.136991651   3.259867e-02\n[589,] 8.005845e-04 0.001293661 1.648447e-07 -1.214442287   2.245789e-01\n[590,] 2.407281e-04 0.001293661 1.642999e-07 -2.597658898   9.386168e-03\n[591,] 1.852801e-03 0.001293661 1.645700e-07  1.378305452   1.681090e-01\n[592,] 6.292728e-04 0.001293661 1.645886e-07 -1.637653598   1.014940e-01\n[593,] 2.151483e-03 0.001293661 1.651289e-07  2.110987382   3.477340e-02\n[594,] 1.364103e-03 0.001293661 1.648447e-07  0.173497062   8.622607e-01\n[595,] 8.429672e-04 0.001293661 1.646249e-07 -1.110794700   2.666567e-01\n[596,] 1.519603e-03 0.001293661 1.648581e-07  0.556470660   5.778891e-01\n[597,] 1.032962e-03 0.001293661 1.644099e-07 -0.642948509   5.202575e-01\n[598,] 7.973923e-04 0.001293661 1.651024e-07 -1.221350050   2.219535e-01\n[599,] 2.320294e-03 0.001293661 1.651168e-07  2.526501367   1.152049e-02\n[600,] 2.508648e-03 0.001293661 1.649873e-07  2.991205636   2.778783e-03\n[601,] 1.460462e-03 0.001293661 1.650482e-07  0.410576505   6.813831e-01\n[602,] 3.222650e-04 0.001293661 1.642999e-07 -2.396501613   1.655242e-02\n[603,] 2.950952e-04 0.001293661 1.643225e-07 -2.463361846   1.376409e-02\n[604,] 1.193290e-03 0.001293661 1.649085e-07 -0.247166011   8.047797e-01\n[605,] 8.154706e-04 0.001293661 1.643885e-07 -1.179410903   2.382346e-01\n[606,] 7.966734e-04 0.001293661 1.648310e-07 -1.224126125   2.209047e-01\n[607,] 1.251710e-03 0.001293661 1.649431e-07 -0.103293173   9.177303e-01\n[608,] 6.030565e-04 0.001293661 1.651314e-07 -1.699474045   8.922990e-02\n[609,] 1.613129e-03 0.001293661 1.649203e-07  0.786665425   4.314777e-01\n[610,] 2.192709e-03 0.001293661 1.650404e-07  2.213032430   2.689541e-02\n[611,] 2.718996e-04 0.001293661 1.645700e-07 -2.518687139   1.177933e-02\n[612,] 2.046501e-03 0.001293661 1.651314e-07  1.852627239   6.393581e-02\n[613,] 1.343710e-03 0.001293661 1.644518e-07  0.123417653   9.017764e-01\n[614,] 3.650429e-04 0.001293661 1.644310e-07 -2.290052030   2.201830e-02\n[615,] 5.475983e-04 0.001293661 1.644722e-07 -1.839623888   6.582347e-02\n[616,] 5.475983e-04 0.001293661 1.644722e-07 -1.839623888   6.582347e-02\n[617,] 1.147110e-03 0.001293661 1.650383e-07 -0.360741798   7.182925e-01\n[618,] 3.340584e-04 0.001293661 1.645886e-07 -2.365328984   1.801406e-02\n[619,] 3.262491e-04 0.001293661 1.645123e-07 -2.385131539   1.707302e-02\n[620,] 2.290433e-03 0.001293661 1.649969e-07  2.453905986   1.413139e-02\n[621,] 3.300715e-04 0.001293661 1.643885e-07 -2.376601559   1.747295e-02\n[622,] 1.281733e-04 0.001293661 1.645318e-07 -2.873312087   4.061926e-03\n[623,] 3.688461e-04 0.001293661 1.642769e-07 -2.281742081   2.250457e-02\n[624,] 1.146005e-03 0.001293661 1.646426e-07 -0.363898608   7.159337e-01\n[625,] 1.949174e-03 0.001293661 1.651289e-07  1.613130409   1.067162e-01\n[626,] 1.216573e-03 0.001293661 1.648964e-07 -0.189836373   8.494374e-01\n[627,] 1.165972e-03 0.001293661 1.648711e-07 -0.314470904   7.531634e-01\n[628,] 1.721699e-03 0.001293661 1.648581e-07  1.054209699   2.917869e-01\n[629,] 1.391221e-03 0.001293661 1.648170e-07  0.240308148   8.100914e-01\n[630,] 1.348683e-03 0.001293661 1.648839e-07  0.135502792   8.922144e-01\n[631,] 5.824248e-04 0.001293661 1.643225e-07 -1.754548669   7.933654e-02\n[632,] 5.401834e-04 0.001293661 1.648310e-07 -1.855884424   6.347003e-02\n[633,] 5.866356e-04 0.001293661 1.646771e-07 -1.742281989   8.145911e-02\n[634,] 1.596424e-03 0.001293661 1.650937e-07  0.745139359   4.561875e-01\n[635,] 1.743299e-03 0.001293661 1.651395e-07  1.106465042   2.685253e-01\n[636,] 2.642460e-04 0.001293661 1.648027e-07 -2.535761431   1.122031e-02\n[637,] 7.959805e-04 0.001293661 1.643225e-07 -1.227728065   2.195491e-01\n[638,] 1.659412e-03 0.001293661 1.648310e-07  0.900879062   3.676526e-01\n[639,] 1.231240e-03 0.001293661 1.645318e-07 -0.153888280   8.776978e-01\n[640,] 2.920780e-03 0.001293661 1.633008e-07  4.026476128   5.661898e-05\n[641,] 9.291223e-04 0.001293661 1.649646e-07 -0.897528551   3.694369e-01\n[642,] 2.251129e-03 0.001293661 1.650404e-07  2.356835696   1.843140e-02\n[643,] 5.320636e-04 0.001293661 1.644722e-07 -1.877928996   6.039088e-02\n[644,] 2.411789e-03 0.001293661 1.649111e-07  2.753381235   5.898317e-03\n[645,] 4.816357e-04 0.001293661 1.645510e-07 -2.001793481   4.530695e-02\n[646,] 1.347510e-03 0.001293661 1.644099e-07  0.132804661   8.943479e-01\n[647,] 2.341364e-03 0.001293661 1.649565e-07  2.579605676   9.891319e-03\n[648,] 8.193538e-04 0.001293661 1.643885e-07 -1.169833378   2.420680e-01\n[649,] 1.597779e-03 0.001293661 1.649646e-07  0.748768008   4.539970e-01\n[650,] 1.223890e-03 0.001293661 1.647265e-07 -0.171906169   8.635113e-01\n[651,] 8.352499e-04 0.001293661 1.646600e-07 -1.129694776   2.586049e-01\n[652,] 1.408823e-03 0.001293661 1.651403e-07  0.283389731   7.768781e-01\n[653,] 1.931808e-03 0.001293661 1.649085e-07  1.571443878   1.160796e-01\n[654,] 8.271202e-04 0.001293661 1.643885e-07 -1.150678327   2.498646e-01\n[655,] 1.370767e-03 0.001293661 1.643885e-07  0.190175207   8.491718e-01\n[656,] 2.562864e-03 0.001293661 1.650240e-07  3.124335234   1.782073e-03\n[657,] 1.680986e-03 0.001293661 1.651385e-07  0.953128629   3.405249e-01\n[658,] 1.315503e-03 0.001293661 1.651388e-07  0.053747777   9.571361e-01\n[659,] 3.310638e-03 0.001293661 1.634995e-07  4.988186352   6.094876e-07\n[660,] 7.621477e-04 0.001293661 1.650383e-07 -1.308343748   1.907567e-01\n[661,] 1.581836e-03 0.001293661 1.648711e-07  0.709714123   4.778814e-01\n[662,] 1.410344e-03 0.001293661 1.647104e-07  0.287506191   7.737248e-01\n[663,] 3.071444e-04 0.001293661 1.649945e-07 -2.428676235   1.515406e-02\n[664,] 1.338480e-03 0.001293661 1.651356e-07  0.110290645   9.121789e-01\n[665,] 1.092365e-03 0.001293661 1.649540e-07 -0.495625472   6.201587e-01\n[666,] 1.287096e-03 0.001293661 1.650383e-07 -0.016159271   9.871073e-01\n[667,] 1.998320e-03 0.001293661 1.649849e-07  1.734831081   8.277073e-02\n[668,] 2.432285e-03 0.001293661 1.651405e-07  2.801905748   5.080171e-03\n[669,] 4.621431e-04 0.001293661 1.644518e-07 -2.050464997   4.031908e-02\n[670,] 2.055678e-03 0.001293661 1.648027e-07  1.877079159   6.050725e-02\n[671,] 5.951825e-04 0.001293661 1.651157e-07 -1.718932985   8.562658e-02\n[672,] 1.410125e-03 0.001293661 1.646249e-07  0.287040656   7.740812e-01\n[673,] 1.412583e-03 0.001293661 1.651401e-07  0.292642010   7.697958e-01\n[674,] 1.157012e-03 0.001293661 1.642769e-07 -0.337146368   7.360066e-01\n[675,] 7.498757e-04 0.001293661 1.647265e-07 -1.339817934   1.803045e-01\n[676,] 5.979932e-04 0.001293661 1.643668e-07 -1.715911396   8.617826e-02\n[677,] 2.294614e-03 0.001293661 1.649565e-07  2.464501545   1.372040e-02\n[678,] 7.113758e-04 0.001293661 1.649431e-07 -1.433734503   1.516480e-01\n[679,] 1.061596e-03 0.001293661 1.650461e-07 -0.571225197   5.678470e-01\n[680,] 1.247280e-03 0.001293661 1.647579e-07 -0.114265953   9.090270e-01\n[681,] 2.587040e-03 0.001293661 1.649229e-07  3.184822233   1.448430e-03\n[682,] 1.203715e-04 0.001293661 1.643448e-07 -2.894191153   3.801367e-03\n[683,] 1.149782e-03 0.001293661 1.645886e-07 -0.354646995   7.228541e-01\n[684,] 2.891188e-03 0.001293661 1.640535e-07  3.944168518   8.007733e-05\n[685,] 1.141588e-03 0.001293661 1.643448e-07 -0.375123593   7.075686e-01\n[686,] 1.130044e-03 0.001293661 1.644099e-07 -0.403518518   6.865668e-01\n[687,] 1.475705e-04 0.001293661 1.644310e-07 -2.826357481   4.708069e-03\n[688,] 5.750521e-04 0.001293661 1.647424e-07 -1.770475836   7.664791e-02\n[689,] 2.501556e-03 0.001293661 1.651261e-07  2.972496943   2.953882e-03\n[690,] 1.402138e-03 0.001293661 1.645318e-07  0.267430901   7.891374e-01\n[691,] 1.587647e-03 0.001293661 1.651395e-07  0.723438854   4.694103e-01\n[692,] 2.270748e-03 0.001293661 1.650217e-07  2.405263050   1.616083e-02\n[693,] 1.164994e-04 0.001293661 1.644099e-07 -2.903167621   3.694089e-03\n[694,] 2.546491e-03 0.001293661 1.650937e-07  3.083378883   2.046644e-03\n[695,] 1.751484e-03 0.001293661 1.644518e-07  1.128958085   2.589155e-01\n[696,] 1.927022e-03 0.001293661 1.646939e-07  1.560674795   1.186005e-01\n[697,] 4.038145e-04 0.001293661 1.643225e-07 -2.195162266   2.815196e-02\n[698,] 1.047475e-03 0.001293661 1.650822e-07 -0.605916824   5.445700e-01\n[699,] 2.308399e-03 0.001293661 1.651270e-07  2.497151547   1.251954e-02\n[700,] 7.042582e-04 0.001293661 1.651356e-07 -1.450413649   1.469432e-01\n[701,] 1.500964e-03 0.001293661 1.650383e-07  0.510286256   6.098509e-01\n[702,] 1.224575e-03 0.001293661 1.649646e-07 -0.170095188   8.649353e-01\n[703,] 9.591786e-04 0.001293661 1.644099e-07 -0.824915302   4.094197e-01\n[704,] 2.010484e-03 0.001293661 1.650536e-07  1.764409809   7.766301e-02\n[705,] 1.863933e-04 0.001293661 1.643885e-07 -2.730969993   6.314822e-03\n[706,] 1.595529e-03 0.001293661 1.651405e-07  0.742832298   4.575832e-01\n[707,] 6.289992e-04 0.001293661 1.642999e-07 -1.639767068   1.010536e-01\n[708,] 1.239624e-03 0.001293661 1.648027e-07 -0.133108529   8.941076e-01\n[709,] 1.819652e-03 0.001293661 1.650130e-07  1.294849920   1.953720e-01\n[710,] 1.316239e-03 0.001293661 1.642999e-07  0.055701472   9.555796e-01\n[711,] 9.603123e-04 0.001293661 1.649945e-07 -0.820661539   4.118391e-01\n[712,] 8.475103e-04 0.001293661 1.649749e-07 -1.098430718   2.720165e-01\n[713,] 9.651308e-04 0.001293661 1.651405e-07 -0.808441454   4.188365e-01\n[714,] 8.598419e-04 0.001293661 1.651314e-07 -1.067563844   2.857173e-01\n[715,] 4.853389e-04 0.001293661 1.642999e-07 -1.994187045   4.613162e-02\n[716,] 2.524468e-04 0.001293661 1.644924e-07 -2.567244246   1.025104e-02\n[717,] 3.611258e-04 0.001293661 1.643668e-07 -2.300160851   2.143911e-02\n[718,] 1.158523e-03 0.001293661 1.649749e-07 -0.332711458   7.393521e-01\n[719,] 3.768220e-04 0.001293661 1.646426e-07 -2.259550137   2.384919e-02\n[720,] 2.990895e-04 0.001293661 1.645700e-07 -2.451662696   1.421979e-02\n[721,] 1.217293e-03 0.001293661 1.650742e-07 -0.187963989   8.509049e-01\n[722,] 8.082818e-04 0.001293661 1.648027e-07 -1.195636306   2.318385e-01\n[723,] 1.333136e-03 0.001293661 1.648839e-07  0.097215792   9.225550e-01\n[724,] 1.980730e-03 0.001293661 1.651401e-07  1.690728278   9.088871e-02\n[725,] 1.073629e-03 0.001293661 1.651116e-07 -0.541498022   5.881644e-01\n[726,] 6.575466e-04 0.001293661 1.651337e-07 -1.565371570   1.174958e-01\n[727,] 7.541595e-04 0.001293661 1.649540e-07 -1.328346101   1.840638e-01\n[728,] 3.573537e-04 0.001293661 1.645700e-07 -2.308038891   2.099697e-02\n[729,] 8.196594e-04 0.001293661 1.646249e-07 -1.168239988   2.427100e-01\n[730,] 8.474840e-04 0.001293661 1.649646e-07 -1.098529875   2.719732e-01\n[731,] 7.962526e-04 0.001293661 1.645510e-07 -1.226204416   2.201218e-01\n[732,] 5.435964e-04 0.001293661 1.643225e-07 -1.850334234   6.426539e-02\n[733,] 1.426683e-03 0.001293661 1.649540e-07  0.327523656   7.432719e-01\n[734,] 1.174001e-03 0.001293661 1.649540e-07 -0.294623941   7.682812e-01\n[735,] 2.200361e-03 0.001293661 1.650556e-07  2.231765955   2.563044e-02\n[736,] 2.210667e-03 0.001293661 1.651388e-07  2.256564102   2.403533e-02\n[737,] 4.194240e-04 0.001293661 1.644518e-07 -2.155807328   3.109871e-02\n[738,] 1.069207e-03 0.001293661 1.650039e-07 -0.552561541   5.805637e-01\n[739,] 4.076847e-04 0.001293661 1.642999e-07 -2.185765411   2.883277e-02\n[740,] 2.496733e-03 0.001293661 1.650677e-07  2.961151936   3.064907e-03\n[741,] 1.018441e-03 0.001293661 1.649319e-07 -0.677685426   4.979712e-01\n[742,] 2.748748e-03 0.001293661 1.649945e-07  3.582235845   3.406660e-04\n[743,] 1.217293e-03 0.001293661 1.650742e-07 -0.187963989   8.509049e-01\n[744,] 8.434391e-04 0.001293661 1.648964e-07 -1.108718218   2.675518e-01\n[745,] 8.664367e-04 0.001293661 1.647265e-07 -1.052626516   2.925122e-01\n[746,] 2.564661e-04 0.001293661 1.647881e-07 -2.555039030   1.061759e-02\n[747,] 3.727982e-04 0.001293661 1.644099e-07 -2.271072446   2.314259e-02\n[748,] 1.147717e-03 0.001293661 1.651289e-07 -0.359149135   7.194835e-01\n[749,] 2.628714e-03 0.001293661 1.650461e-07  3.286213446   1.015440e-03\n[750,] 1.356583e-03 0.001293661 1.649203e-07  0.154940808   8.768680e-01\n[751,] 1.884676e-03 0.001293661 1.650822e-07  1.454616960   1.457753e-01\n[752,] 8.120163e-04 0.001293661 1.647104e-07 -1.186769578   2.353185e-01\n[753,] 1.353959e-03 0.001293661 1.651314e-07  0.148384574   8.820393e-01\n[754,] 9.644102e-04 0.001293661 1.650536e-07 -0.810428126   4.176942e-01\n[755,] 2.107113e-03 0.001293661 1.649749e-07  2.002732288   4.520603e-02\n[756,] 2.409160e-03 0.001293661 1.651388e-07  2.745014678   6.050819e-03\n[757,] 1.835771e-03 0.001293661 1.647603e-07  1.335551802   1.816958e-01\n[758,] 1.940159e-03 0.001293661 1.649457e-07  1.591829951   1.114229e-01\n[759,] 2.081449e-03 0.001293661 1.647288e-07  1.940996321   5.225872e-02\n[760,] 1.943468e-03 0.001293661 1.649085e-07  1.600158771   1.095634e-01\n[761,] 1.670240e-03 0.001293661 1.645700e-07  0.928284195   3.532602e-01\n[762,] 4.428216e-04 0.001293661 1.645886e-07 -2.097238052   3.597251e-02\n[763,] 9.707381e-05 0.001293661 1.643448e-07 -2.951660375   3.160704e-03\n[764,] 8.155213e-05 0.001293661 1.644310e-07 -2.989164494   2.797415e-03\n[765,] 1.065451e-03 0.001293661 1.650383e-07 -0.561748273   5.742875e-01\n[766,] 4.037894e-04 0.001293661 1.642769e-07 -2.195528478   2.812571e-02\n[767,] 6.329605e-04 0.001293661 1.643885e-07 -1.629554590   1.031957e-01\n[768,] 1.800548e-03 0.001293661 1.650608e-07  1.247638533   2.121635e-01\n[769,] 2.226176e-03 0.001293661 1.646939e-07  2.297826621   2.157166e-02\n[770,] 2.350354e-03 0.001293661 1.646600e-07  2.604083130   9.212041e-03\n[771,] 3.409375e-03 0.001293661 1.642289e-07  5.220740566   1.782090e-07\n[772,] 1.019265e-03 0.001293661 1.651229e-07 -0.675265249   4.995073e-01\n[773,] 8.670026e-04 0.001293661 1.649945e-07 -1.050377924   2.935444e-01\n[774,] 1.433878e-03 0.001293661 1.647881e-07  0.345413102   7.297838e-01\nattr(,\"cluster\")\n  [1] Low  Low  Low  Low  Low  High Low  Low  High Low  Low  High Low  Low  High\n [16] High Low  High Low  High High Low  Low  High Low  Low  Low  High High High\n [31] Low  Low  Low  High High High Low  High High High High High Low  Low  Low \n [46] High High High High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n [61] Low  Low  High Low  High Low  High Low  Low  High High Low  High Low  High\n [76] Low  Low  Low  Low  Low  High High High Low  High Low  Low  Low  High High\n [91] Low  High High High High High High Low  High Low  Low  High Low  High High\n[106] Low  High High High High Low  High Low  Low  Low  High Low  High High High\n[121] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  High Low  High\n[136] Low  High Low  High Low  Low  High Low  High High Low  Low  High High Low \n[151] Low  High Low  High High Low  Low  High Low  Low  High Low  High High Low \n[166] Low  Low  High Low  Low  High High Low  High Low  Low  Low  Low  High Low \n[181] Low  High Low  Low  High Low  High High Low  Low  Low  Low  Low  Low  Low \n[196] High Low  Low  Low  Low  High High Low  Low  Low  Low  Low  Low  Low  Low \n[211] Low  Low  High Low  Low  Low  High High Low  Low  High Low  Low  High Low \n[226] Low  Low  Low  Low  High Low  Low  High Low  High High High Low  High High\n[241] Low  High Low  Low  High Low  Low  Low  Low  Low  Low  Low  Low  High High\n[256] Low  Low  Low  Low  Low  Low  High High Low  High Low  Low  High Low  High\n[271] Low  High Low  Low  Low  High Low  Low  Low  Low  High Low  High High Low \n[286] Low  Low  Low  Low  High Low  Low  Low  Low  Low  Low  Low  High High High\n[301] High Low  High High High Low  High Low  Low  Low  Low  Low  Low  Low  Low \n[316] Low  Low  Low  High High Low  Low  Low  Low  Low  Low  Low  High High High\n[331] Low  High Low  Low  Low  Low  High High High Low  High Low  High High High\n[346] Low  Low  High Low  Low  Low  Low  High Low  High High Low  High Low  Low \n[361] Low  High High Low  Low  Low  High Low  High Low  Low  Low  Low  Low  High\n[376] Low  High High Low  High Low  Low  Low  High Low  High High Low  Low  High\n[391] Low  High Low  Low  High High Low  Low  Low  Low  High High High High Low \n[406] Low  High High High Low  High Low  High Low  High High High Low  Low  High\n[421] High Low  High Low  High High Low  Low  Low  Low  Low  Low  High High High\n[436] High High High Low  Low  High Low  Low  Low  High High Low  Low  Low  High\n[451] High High Low  High High High High Low  High High Low  Low  Low  High Low \n[466] Low  High Low  High High Low  Low  Low  Low  Low  High Low  High Low  High\n[481] Low  High Low  Low  Low  Low  High High Low  High Low  Low  High Low  High\n[496] High Low  Low  Low  Low  Low  High Low  Low  High Low  Low  High Low  High\n[511] High Low  Low  Low  Low  High High Low  High High High High Low  Low  Low \n[526] Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  High Low  High\n[541] Low  Low  Low  Low  High High High High High High High Low  High High Low \n[556] High High Low  High High Low  Low  Low  Low  Low  Low  High High High Low \n[571] Low  Low  High Low  High High High Low  Low  Low  Low  High High High Low \n[586] High High Low  Low  Low  Low  Low  High Low  Low  Low  Low  High High High\n[601] High Low  Low  Low  Low  Low  Low  High Low  High Low  High Low  Low  Low \n[616] Low  High Low  Low  High Low  Low  Low  Low  High Low  Low  Low  Low  Low \n[631] Low  Low  Low  High High Low  Low  Low  Low  High Low  High Low  High Low \n[646] Low  High Low  Low  Low  Low  High Low  Low  Low  High High High High High\n[661] Low  Low  High High Low  High High High Low  Low  High Low  High Low  Low \n[676] Low  High Low  High Low  High Low  Low  High Low  Low  Low  Low  High Low \n[691] High High Low  High Low  Low  Low  High High High High Low  Low  High Low \n[706] High Low  Low  High Low  High High High High Low  Low  Low  High Low  Low \n[721] High Low  Low  High High High Low  Low  Low  Low  Low  Low  Low  Low  High\n[736] High Low  High Low  High Low  High High Low  Low  Low  Low  High High Low \n[751] High Low  High High High High High High High Low  Low  Low  Low  Low  High\n[766] Low  Low  High Low  Low  High High High Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = nga_wp$`wpt non functional`, listw = knn8ListW, return_internals = TRUE)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding nga_wp sf data frame by converting the output vector (i.e. gi.adaptive) into r matrix object by using as.matrix() and join the nga_wp data frame into with the produced matrix with cbind() Lastly, the field name of the gi values is renamed to gstat_fixed by using rename()\n\nnga_wp.gi = cbind(nga_wp, as.matrix(gi.adaptive)) %>% #pipe\n          rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\nUsing the same way we plot multi layer map we previously discussed, we plot Nigeria map at layer 1 as Nigeria Level 1 administration area, layer 2 as non functional water points, layer 3 as the G statistics and layer 4 as the local Moran I statistics to make our analysis with tmap functions below\n\ntm_shape(nga) + \n  tm_fill(\"ADM1_EN\", palette = \"Pastel1\") +\n  tm_borders(alpha=0.5) + \n  tm_grid (alpha=0.2) +\n  \ntm_shape(nga_wp) + \n  tm_fill(\"wpt non functional\", \n          palette =\"Greens\", style=\"kmeans\", n=6) +  \n  tm_borders(alpha=0.5) + \n  tm_grid (alpha=0.2) +\n\ntm_shape(nga_wp.gi) +\n          tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5) +\n  \ntm_shape(nga_wp.localMI) + \n  tm_fill(col=\"quadrant\", style=\"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1]) +\n          \n          tm_borders(alpha=0.5) \n\n\n\n\n\n\n\nAnalysis of G Statistics\nThere are 3 significant Cold spots in Nigeria for non functional water points.\n\nThey in the north east of Nigeria in Borno and Adamawa along the borders of Cameroon\nSouth of Nigeria Facing Gulf of Guinea in the states. spreading northwards, Edo, Delta, Bayelsa, Rivers, Akwa Ibom, Abia, Imo, Anambra, Enugu and ends at Kogi.\nSouth west of Nigeria Facing Bight of Benin, in the states Oyo, Ogun and Lagos\n\nThere are 4 hot spots identified by the G Statistics:\n\nSouth of Gombe, joining with the South of Bauchi, spreading across the southern borders of Plateau, and north west wards to Kaduna. It also spread from the south of Plateau to Ibi of and Awe of Tabara and Nasarawa.\nThe borders south east of Nigeria facing Cameroon is another hotspot, the hot spot spread through Tabara, Benue and Cross River\nAnother hotspot is around the borders of Kwara and Kogi. From Kwara, it is spreading southwards towards Osun and towards north west of Ondo. From Kogi, it is spreading south wards to Osun along the borders of Edo\nIn Kebbi, Bagudo and Suru are hot spots\n\n\n\nComparing Local Moran I to G Statistics\nBoth methods technically produce the same map patterns where clusters were correctly identified.\nThe local Gi statistics in the -4 to -2 range correctly identified the majority of the low-low in the LISA map. The 2-6 range of the local Gi statistics was also able to identify the majority of the high-high on the LISA map.\nThe local Moran LISA Map of spatial clustering was able to detect the outliers in terms of low-high and high-lows. In contrast, the adaptive G Statistics Map was only able to tell where are the hot and cold spots, but not the outliers.\nHowever the G statistics map could produce potential clusters of hot and cold spots in statistically insignificant areas, which the local Moran I map cannot"
  },
  {
    "objectID": "Take-Home_Ex1/Take-Home_Ex1.html#reference",
    "href": "Take-Home_Ex1/Take-Home_Ex1.html#reference",
    "title": "Take Home Exercise 1 - Investigation of Water points in Nigeria",
    "section": "Reference",
    "text": "Reference\nHarris N, Goldman E, Gabris C, Nordling J, Minnemeyer S, Ansari S, Lippmann M, Bennett L, Raad M, Hansen M, Potapov P (2017), Using spatial statistics to identify emerging hot spots of forest loss, T2 - Environmental Research Letters\nhttps://dx.doi.org/10.1088/1748-9326/aa5a2f\nKassambara A (n.d) . K-Means Clustering in R: Algorithm and Practical Examples\nhttps://www.datanovia.com/en/lessons/k-means-clustering-in-r-algorith-and-practical-examples/\nLong, A (n.d.), Local Moran\nhttp://ceadserv1.nku.edu/longa//geomed/stats/localmoran/localmoran.html\nTreglia M (2015), A simple correlogram using sp.correlogram with data(meuse)\nhttps://rpubs.com/erikaaldisa/spatialweights\nR Coder (2022) sapply function in R\nhttps://r-coder.com/sapply-function-r/"
  },
  {
    "objectID": "Take-Home_Ex2/Take-Home_Ex2.html",
    "href": "Take-Home_Ex2/Take-Home_Ex2.html",
    "title": "Take Home Exercise 2 - Regionalization of Nigeria with Water points",
    "section": "",
    "text": "Water is a crucial resource for humanity. People must have access to clean water in order to be healthy. It promotes a healthy environment, peace and security, and a sustainable economy. However, more than 40% of the world’s population lacks access to enough clean water. According to UN-Water, 1.8 billion people would live in places with a complete water shortage by 2025. One of the many areas that the water problem gravely threatens is food security. Agriculture uses over 70% of the freshwater that is present on Earth.\nThe severe water shortages and water quality issues are seen in underdeveloped countries. Up to 80% of infections in developing nations are attributed to inadequate water and sanitation infrastructure.\nDespite technological advancement, providing rural people with clean water continues to be a key development concern in many countries around the world, especially in those on the continent of Africa.\nThe spatial patterns of non-functional water points will be shown in this study by using the proper global and local spatial association methodologies. We look at Nigeria’s in this assignment."
  },
  {
    "objectID": "Take-Home_Ex2/Take-Home_Ex2.html#getting-started",
    "href": "Take-Home_Ex2/Take-Home_Ex2.html#getting-started",
    "title": "Take Home Exercise 2 - Regionalization of Nigeria with Water points",
    "section": "Getting Started",
    "text": "Getting Started\nFirst, we load the required packages in R\n\nSpatial data handling\n\nsf, rgdal and spdep\n\nAttribute data handling\n\nknitr, tidyverse, funModeling especially readr, ggplot2 and dplyr\n\nChoropleth mapping\n\ntmap\n\nMultivariate data visualization and analysis\n\ncoorplot, ggpubr, and heatmaply\n\nCluster analysis\n\ncluster\nClustGeo\n\n\n\npacman::p_load(knitr, rgdal, spdep, tmap, sf, \n               ggpubr, cluster, funModeling,\n               factoextra, NbClust, #factoextra factor analysis, access clustering results\n               heatmaply, corrplot, psych, tidyverse)\n\n\nSpatial Data\nThe spatial dataset used in this assignment is the Nigeria Level-2 Administrative Boundary spatial dataset downloaded from Center for Humanitarian Data - Nigeria - Subnational Administrative Boundaries\nWe will load the spatial features by using st_read() from the sf package\nAs the data we want is in WSG-84 format, we set crs to 4326.\nWe won’t utilize st_transform() at this time because it can result in outputs with missing points after transformation, which would skew our study.\n\nnga = st_read(dsn = \"data/geospatial\",\n               layer = \"nga_admbnda_adm2_osgof_20190417\",\n               crs = 4326)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `D:\\Allanckw\\ISSS624\\Take-Home_Ex2\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n#nigeria_lga_sf = st_transform(nigeria_lga_sf, crs=4326) cause missing points\n\nWe could use st_crs()to verify the coordinate system from the object.\n\nst_crs(nga)\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\nBefore we start analyzing the data, lets us take a look at some characteristics of the spatial features to have a sense of what we are dealing with. We can use glimpse() to determine to accomplish that\n\nglimpse(nga)\n\nRows: 774\nColumns: 17\n$ Shape_Leng <dbl> 0.2370744, 0.2624772, 3.0753158, 2.5379842, 0.6871498, 1.06…\n$ Shape_Area <dbl> 0.0015239210, 0.0035311037, 0.3268678399, 0.0683785064, 0.0…\n$ ADM2_EN    <chr> \"Aba North\", \"Aba South\", \"Abadam\", \"Abaji\", \"Abak\", \"Abaka…\n$ ADM2_PCODE <chr> \"NG001001\", \"NG001002\", \"NG008001\", \"NG015001\", \"NG003001\",…\n$ ADM2_REF   <chr> \"Aba North\", \"Aba South\", \"Abadam\", \"Abaji\", \"Abak\", \"Abaka…\n$ ADM2ALT1EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2ALT2EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1_EN    <chr> \"Abia\", \"Abia\", \"Borno\", \"Federal Capital Territory\", \"Akwa…\n$ ADM1_PCODE <chr> \"NG001\", \"NG001\", \"NG008\", \"NG015\", \"NG003\", \"NG011\", \"NG02…\n$ ADM0_EN    <chr> \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nig…\n$ ADM0_PCODE <chr> \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\",…\n$ date       <date> 2016-11-29, 2016-11-29, 2016-11-29, 2016-11-29, 2016-11-29…\n$ validOn    <date> 2019-04-17, 2019-04-17, 2019-04-17, 2019-04-17, 2019-04-17…\n$ validTo    <date> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ SD_EN      <chr> \"Abia South\", \"Abia South\", \"Borno North\", \"Federal Capital…\n$ SD_PCODE   <chr> \"NG00103\", \"NG00103\", \"NG00802\", \"NG01501\", \"NG00302\", \"NG0…\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((7.401109 5...., MULTIPOLYGON (…\n\n\nWe can use freq() of the funModeling package to display the distribution of Level 1 administration (Which are states in Nigeria) instead and only zooming in on the micro level when we perform the water point analysis.\n\nfreq(data=nga, input = 'ADM1_EN')\n\n\n\n\n                     ADM1_EN frequency percentage cumulative_perc\n1                       Kano        44       5.68            5.68\n2                    Katsina        34       4.39           10.07\n3                        Oyo        33       4.26           14.33\n4                  Akwa Ibom        31       4.01           18.34\n5                       Osun        30       3.88           22.22\n6                      Borno        27       3.49           25.71\n7                        Imo        27       3.49           29.20\n8                     Jigawa        27       3.49           32.69\n9                      Delta        25       3.23           35.92\n10                     Niger        25       3.23           39.15\n11                     Benue        23       2.97           42.12\n12                    Kaduna        23       2.97           45.09\n13                    Rivers        23       2.97           48.06\n14                    Sokoto        23       2.97           51.03\n15                   Adamawa        21       2.71           53.74\n16                   Anambra        21       2.71           56.45\n17                     Kebbi        21       2.71           59.16\n18                      Kogi        21       2.71           61.87\n19                    Bauchi        20       2.58           64.45\n20                     Lagos        20       2.58           67.03\n21                      Ogun        20       2.58           69.61\n22               Cross River        18       2.33           71.94\n23                       Edo        18       2.33           74.27\n24                      Ondo        18       2.33           76.60\n25                      Abia        17       2.20           78.80\n26                     Enugu        17       2.20           81.00\n27                   Plateau        17       2.20           83.20\n28                      Yobe        17       2.20           85.40\n29                     Ekiti        16       2.07           87.47\n30                     Kwara        16       2.07           89.54\n31                    Taraba        16       2.07           91.61\n32                   Zamfara        14       1.81           93.42\n33                    Ebonyi        13       1.68           95.10\n34                  Nasarawa        13       1.68           96.78\n35                     Gombe        11       1.42           98.20\n36                   Bayelsa         8       1.03           99.23\n37 Federal Capital Territory         6       0.78          100.00\n\n\n774 Local Government Areas (LGA) make up Nigeria’s 37 states, with Kano having the most LGAs overall.\nFor a meaningful analysis, there are just too many LGAs, both large and little.\nCalling ttm() in the tmap package will switch the tmap’s viewing mode to interactive viewing, which will help us better visualize the map. Without this change, the generated map will be too small for any type of analysis. Additionally, we’ll base the map’s plot on States (Level 1 Administration Area)\nGiven that there are 37 states, we must raise the maximum number of categories from the default value of 30 to 37. Using tmap_options(max.categories = 37), the threshold can be set.\n\nttm()\ntmap_options(max.categories = 37)\n\nNow, we are ready to build our map with the functions in the tmap package\n\ntm_shape(nga) + \n \n  tm_polygons(\"ADM1_EN\") +\n  tm_borders(alpha=0.5) + \n  tm_scale_bar() +\n  tm_grid (alpha=0.2) +\n  tm_layout(main.title=\"Map of Nigeria LGA\", \n            main.title.position=\"center\", \n            main.title.size=1.2, \n            legend.height = 0.35, \n            legend.width = 0.35, \n            frame = TRUE) \n\n\n\n\n\n\n\n\nAspatial Data\n\nCleaning the Data\nThe aspatial dataset used in this assignment is the water point data exchange dataset found in WPdx Global Data Repositories. Data is filtered on the web portal to only keep Nigeria and the file is saved as NigeriaWaterPoints_Raw.csv\nAs we are only interested in the functionality of the water point, it is important to capture fields that may affect the functionality\n\nLGA: The area we are interested in\nState: The state of the LGA of Nigeria\nFunctional: Whether it is functional or not\nmanagement: who manages it?\nQuality: what is the quality?\nWater Source Category: where the water came from?\nWater Tech Category: What technology is used?\nlatitude\nlongitude\n\nTo load the raw data file, we use the read_csv function\n\nwpdx_raw = read_csv(\"data/aspatial/NigeriaWaterPoints_Raw.csv\") \n\nMost of the columns are irrelevant, so we will perform the following:\n\nkeep the columns we want to clean it up by specifying the columns with one to retain with subset\nrenaming the columns using rename_with\nReplace all the NA with unknown for columns with NA value present\n\n\nretain_cols = c('#clean_adm2', '#clean_adm1', '#status_clean', '#management_clean', '#subjective_quality', '#fecal_coliform_presence', '#water_source_category', '#water_tech_category', '#lat_deg', '#lon_deg' )\n\nnew_col_names = c('LGA', 'State', 'Functional', 'Management', 'Quality', 'presence_of_fecal_coliform', 'Water_Source_Category', 'Water_Tech_Category', 'latitude', 'longitude')\n\nwpdx_clean = subset(wpdx_raw, select = (names(wpdx_raw) %in% retain_cols)) %>%  rename_with(~ new_col_names, all_of(retain_cols)) %>% \nreplace_na(list(Functional = \"Unknown\", Management = \"Unknown\", Quality = \"Unknown\", Water_Source_Category = \"Unknown\", Water_Tech_Category = \"Unknown\"))\n\nWe save the clean file with saveRDS(), the file will be reduced to 1.6MB from the 144MB raw file that we downloaded.\n\nsaveRDS(wpdx_clean, \"data/aspatial/wpdx_clean.rds\")\n\nWe can then delete the raw file from the project and retrieve the saved RDS file using readRDS()\n\nwpdx_clean = readRDS(\"data/aspatial/wpdx_clean.rds\")\n\n\n\nConverting csv data into spatial features\nWe can use st_as_sfto create a dataframe from the longitude (x) and latitude (y) values. The EPSG 4326 code is used as the dataset is referencing WGS84 geographic coordinate system. We could use st_crs()to verify the coordinate system from the object.\n\nwpdx_clean_sf = st_as_sf(wpdx_clean, coords = c(\"longitude\", \"latitude\"), crs=4326)\nst_crs(wpdx_clean_sf)\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\nWe can then use glimpse() to verify each field’s data type & available values.\nThere are 95, 008 water points in the LGAs. The results also shows that the longitude and latitude values have been converted to a geometry object consisting of the longitude and latitude values as points, with both columns now dropped.\n\nglimpse(wpdx_clean_sf)\n\nRows: 95,008\nColumns: 8\n$ Water_Source_Category <chr> \"Unknown\", \"Well\", \"Well\", \"Well\", \"Well\", \"Well…\n$ Water_Tech_Category   <chr> \"Tapstand\", \"Mechanized Pump\", \"Hand Pump\", \"Unk…\n$ State                 <chr> \"Ekiti\", \"Ogun\", \"Ebonyi\", \"Enugu\", \"Enugu\", \"Be…\n$ LGA                   <chr> \"Moba\", \"Obafemi-Owode\", \"Ohaukwu\", \"Isi-Uzo\", \"…\n$ Management            <chr> \"Unknown\", \"Other\", \"Unknown\", \"Unknown\", \"Unkno…\n$ Functional            <chr> \"Unknown\", \"Functional\", \"Unknown\", \"Unknown\", \"…\n$ Quality               <chr> \"Unknown\", \"Acceptable quality\", \"Unknown\", \"Unk…\n$ geometry              <POINT [°]> POINT (5.12 7.98), POINT (3.597668 6.96453…\n\n\n\n\nAggregate the Data\nWe can use freq() of the funModeling package to display the distribution of functional field in wpdx_clean_sf. This is to help us aggregate the data as the dataset provide breakdowns of functional status. In order to only look at non functional water points, we will need to aggregate the different categories into simply functional, non functional and unknowns.\n\nfreq(data=wpdx_clean_sf, input = 'Functional')\n\n\n\n\n                        Functional frequency percentage cumulative_perc\n1                       Functional     45883      48.29           48.29\n2                   Non-Functional     29385      30.93           79.22\n3                          Unknown     10656      11.22           90.44\n4      Functional but needs repair      4579       4.82           95.26\n5 Non-Functional due to dry season      2403       2.53           97.79\n6        Functional but not in use      1686       1.77           99.56\n7         Abandoned/Decommissioned       234       0.25           99.81\n8                        Abandoned       175       0.18           99.99\n9 Non functional due to dry season         7       0.01          100.00\n\n\nTo aggregate them into functional, non functional and unknown, we will create new data frames to store them by using the filter function\n\nfunc_list = c(\"Functional\", \"Functional but needs repair\", \"Functional but not in use\")\nwpt_functional = wpdx_clean_sf %>%\n  filter(Functional %in% func_list)\n\nwpt_non_functional = wpdx_clean_sf %>%\n  filter(!Functional %in% c(func_list, \"Unknown\"))\n\nwpt_unknown = wpdx_clean_sf %>%\n  filter(Functional %in% \"Unknown\")\n\nOut of the 32, 204, records, we can gain some insights on why it might be non functional, is it due to management? Is it due to technology? Is it due to the source of the water?\nSimilarly, like how we aggregate functional data points, we could use freq() of the funModeling package to find out\n\nfreq(data=wpt_non_functional, input = 'Management')\n\n\n\n\n                             Management frequency percentage cumulative_perc\n1                               Unknown     17617      54.70           54.70\n2                  Community Management      8249      25.61           80.31\n3           Direct Government Operation      3831      11.90           92.21\n4                                 Other      1941       6.03           98.24\n5                     School Management       397       1.23           99.47\n6                  Health Care Facility       128       0.40           99.87\n7        Other Institutional Management        25       0.08           99.95\n8 Private Operator/Delegated Management        16       0.05          100.00\n\n\n\nfreq(data=wpt_non_functional, input = 'Water_Tech_Category')\n\n\n\n\n  Water_Tech_Category frequency percentage cumulative_perc\n1           Hand Pump     20471      63.57           63.57\n2     Mechanized Pump     11532      35.81           99.38\n3             Unknown       169       0.52           99.90\n4            Tapstand        32       0.10          100.00\n\n\n\nfreq(data=wpt_non_functional, input = 'Water_Source_Category')\n\n\n\n\n  Water_Source_Category frequency percentage cumulative_perc\n1                  Well     31470      97.72           97.72\n2                Spring       733       2.28          100.00\n3           Piped Water         1       0.00          100.00\n\n\nFrom the results, we can conclude that\n\nMore than half of the non functional water points have an unknown management, we could ask if these water points are even managed.\nMost of the non functional water points uses pumps, we could ask the question if there is an issue with the pumps and if there is a lack of expertise to repair or replace them when they fail.\n97.72% of such non functional water points are made up of wells. We could ask the question if we could improve things by providing other forms of sources such as piped water. How much cost will it take to bring pipe water to the various state of Nigeria?"
  },
  {
    "objectID": "Take-Home_Ex2/Take-Home_Ex2.html#combining-spatial-aspatial-data",
    "href": "Take-Home_Ex2/Take-Home_Ex2.html#combining-spatial-aspatial-data",
    "title": "Take Home Exercise 2 - Regionalization of Nigeria with Water points",
    "section": "Combining Spatial & Aspatial Data",
    "text": "Combining Spatial & Aspatial Data\nWe can use st_intersects() to find common data points between geographical datasets. In our case we need to find the common points in the Nigeria’s LGA spatial dataset and the water point aspatial dataset\nThe below code does 4 things\n\nIt intersects the Nigeria LGA dataset (nga dataframe) with the water point dataset (wpdx_clean_sf dataframe) and produce a new column to denote the total number of water points in the area (Total wpt) by using mutate() and lengths()\nSimilar to step 1, the result of step 1 is piped to add 3 columns to denote the number of functional, non functional and unknown water points in the area to produce wpt functional, wpt non functional and wpt unknown respectively\nWe also add 2 new columns to find the percentage of functional and non functional water points by using mutate()\nSelect appropriate columns required which are the LGA area and LGA code (Column 3 & 4), Administration Level 1 Area and Administration Level 1 Code (Column 8 & 9) which represent states, the columns that were added as explained in steps 2 & 3 and the geometry multipolygon objects (Column 18 to 23) using select()\n\n\nnga_wp = nga %>% \n  #combine nga with water point sf\n  mutate(`total wpt` = lengths(\n    st_intersects(nga, wpdx_clean_sf))) %>%\n  #add columns to produce no. of functional, non functional and unknown points\n  mutate(`wpt functional` = lengths(\n    st_intersects(nga, wpt_functional))) %>%\n  mutate(`wpt non functional` = lengths(\n    st_intersects(nga, wpt_non_functional))) %>%\n  mutate(`wpt unknown` = lengths(\n    st_intersects(nga, wpt_unknown))) %>%\n  \n  #add columns to compute %\n  mutate(pct_functional = `wpt functional`/`total wpt`) %>%\n  mutate(`pct_non-functional` = `wpt non functional`/`total wpt`) %>%\n  select(3:4, 8:9, 18:23)"
  },
  {
    "objectID": "Take-Home_Ex2/Take-Home_Ex2.html#visualizing-the-spatial-distribution-of-water-points",
    "href": "Take-Home_Ex2/Take-Home_Ex2.html#visualizing-the-spatial-distribution-of-water-points",
    "title": "Take Home Exercise 2 - Regionalization of Nigeria with Water points",
    "section": "Visualizing the spatial distribution of water points",
    "text": "Visualizing the spatial distribution of water points\nWe could use breaks of the summary statistics by using percentiles, this is to help us find out the distribution of water points in each quantile.\n\nsummary(nga_wp$`wpt non functional`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00   12.25   34.00   41.60   60.75  278.00 \n\n\nIt is recommended not to use the default style with breaks as quantile since the range from the third quantile to the maximum is too wide and could result in a skewed representation. We compute the variance and standard deviation of non-functional water points first to better understand our dataset since we now need to decide which style is appropriate for the map.\n\nvar(nga_wp$`wpt non functional`)\n\n[1] 1376.914\n\nsd(nga_wp$`wpt non functional`) \n\n[1] 37.10679\n\n\nIt appears that this dataset has a very large variance.  Since the variance is so high, we would like to lower it. Using the kmeans style is one method to do this. n = 6 is choosen as after some experimentation, it appears that 6 is the optimal number of clusters.\nFunctions from the tmap packages is used to produce the map\nFirst we use tm_shape() + tm_fill(\"ADM1_EN\") to form Layer 1 of the map to form the 37 states of the map. The Pastel1 palette is used because it is difficult to read different shades of the same two to three colors; Pastel1 has more colors, making states more distinct.\nNext we use tm_shape() + tm_fill(\"wpt non functional\") to form Layer 2 of the map which are the non functional water points. The palette used in this case is Purple Red such that areas with very little water points are shaded with a very light colour.\nWe may switch between layers on the interactive map to superimpose the nonfunctional water locations. With so many polygons, putting it side by side can be challenging to interpret.\n\ntm_shape(nga) + \n \n  tm_fill(\"ADM1_EN\", palette = \"Pastel1\") +\n  tm_borders(alpha=0.5) + \n  tm_grid (alpha=0.2) +\n\n  tm_shape(nga_wp) + \n  tm_fill(\"wpt non functional\", \n          palette =\"PuRd\", style=\"kmeans\", n=6) +  \n  tm_borders(alpha=0.5) + \n  tm_grid (alpha=0.2) +\n  tm_layout(main.title=\"non functional WP - 2 Layer map\", \n            main.title.position=\"center\", \n            main.title.size=1.2, \n            #legend.height = 0.35, \n            #legend.width = 0.35, \n            frame = TRUE) \n\n\n\n\n\n\nUsing dplyr package, we can summarize find out which States has the most number non functional water points and which are the states that has the most number of LGAs by using the functions group_by, summarise and arrange\n\n#Sum of non functional water points \nnga_wp %>% \n  group_by(ADM1_EN) %>% \n   summarise(NF_Frequency = sum(`wpt non functional`), \n             #F_Frequency = sum(`wpt functional`),\n             Total_Freq = sum(`total wpt`),\n             NF_Ratio = (NF_Frequency / Total_Freq) * 100\n             ) %>% \n    arrange(desc(NF_Frequency))\n\nSimple feature collection with 37 features and 4 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n# A tibble: 37 × 5\n   ADM1_EN     NF_Frequency Total_Freq NF_Ratio                         geometry\n   <chr>              <int>      <int>    <dbl>                   <GEOMETRY [°]>\n 1 Osun                2118       5519     38.4 POLYGON ((4.910021 7.841812, 4.…\n 2 Kaduna              1912       4925     38.8 POLYGON ((8.273597 11.30846, 8.…\n 3 Kwara               1634       3531     46.3 POLYGON ((4.876071 9.157646, 4.…\n 4 Kano                1570       7125     22.0 POLYGON ((8.727456 12.21461, 8.…\n 5 Ondo                1552       2575     60.3 POLYGON ((5.937628 7.648777, 5.…\n 6 Katsina             1521       5465     27.8 POLYGON ((8.3992 13.0758, 8.390…\n 7 Jigawa              1517       9696     15.6 POLYGON ((8.399011 12.82706, 8.…\n 8 Cross River         1446       3492     41.4 MULTIPOLYGON (((8.818036 5.6935…\n 9 Plateau             1332       4701     28.3 POLYGON ((8.820398 10.38392, 8.…\n10 Oyo                 1329       4085     32.5 POLYGON ((4.024729 7.664918, 4.…\n# … with 27 more rows\n\n#sum of LGAs by states \nnga_wp %>% \n  group_by(ADM1_EN) %>% \n  summarise(count = n())%>% \n    arrange(desc(count))\n\nSimple feature collection with 37 features and 2 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n# A tibble: 37 × 3\n   ADM1_EN   count                                                      geometry\n   <chr>     <int>                                                <GEOMETRY [°]>\n 1 Kano         44 POLYGON ((8.727456 12.21461, 8.72491 12.21429, 8.721373 12.2…\n 2 Katsina      34 POLYGON ((8.3992 13.0758, 8.39043 13.08745, 8.38292 13.09174…\n 3 Oyo          33 POLYGON ((4.024729 7.664918, 4.039038 7.684978, 4.056281 7.6…\n 4 Akwa Ibom    31 MULTIPOLYGON (((7.530807 5.150259, 7.531415 5.146801, 7.5325…\n 5 Osun         30 POLYGON ((4.910021 7.841812, 4.911101 7.85011, 4.914135 7.85…\n 6 Borno        27 POLYGON ((14.58718 11.75277, 14.58861 11.75334, 14.59292 11.…\n 7 Imo          27 POLYGON ((7.422786 5.583626, 7.425965 5.585613, 7.426281 5.5…\n 8 Jigawa       27 POLYGON ((8.399011 12.82706, 8.390081 12.82528, 8.38304 12.8…\n 9 Delta        25 POLYGON ((5.985599 5.124185, 5.99217 5.117613, 5.995821 5.11…\n10 Niger        25 POLYGON ((7.250727 10.03942, 7.240785 10.03998, 7.232374 10.…\n# … with 27 more rows"
  }
]