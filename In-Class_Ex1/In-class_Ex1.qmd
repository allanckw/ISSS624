---
title: "In Class Exercise 1"
author: "Allan Chong"
editor: visual
---

## Overview

In Class Exercise 1

## Getting Started

The code chunk below install & load sf, spdep, tmap & tidyverse packages into the R env

```{r}
pacman::p_load(sf,tidyverse,spdep, tmap)

```

### Importing Hunan Geospatial sf

```{r}
hunan_sf = st_read(dsn="data/geospatial", layer="Hunan")
```

### Loading Hunan 2012 Aspatial File in CSV

```{r}
hunan_GDP = read_csv("data/aspatial/hunan_2012.csv")
```

## Joining attribute data to the simple feature files

Next, *left_join()* of **dplyr** is used to join the geographical data and attribute table

```{r}
hunan = left_join(hunan_sf, hunan_GDP)
```

## Visualizing Regional Development Indicator

Using the **tmap** package, we can visualize the distribution of GDPPC 2012

```{r}

basemap = tm_shape(hunan) + 
          tm_polygons()

gdppc = tm_shape(hunan) +
        tm_polygons("GDPPC")

tmap_arrange(basemap, gdppc, asp=1, ncol=2)

```

## Computing Contiguity Spatial Weights

In this section, the `poly2nb()` function of the spdep package is used to compute contiguity weight matrices for the study area

-   The function builds a neighbour list based on regions with contiguous boundaries, the default of the algorithm uses Queens case, unless explicitly set to false

```{r}
wm_q = poly2nb(hunan)
summary(wm_q)

wm_r = poly2nb(hunan, queen = FALSE)
summary(wm_r)

```

From the results, there are 88 regions in Hunan,

Using the Queen's method, 85 of them has 11 neighbours, while only 2 of them has 1 neighbour

Using the Rook's method 85 of them has 10 neighbours, while only 2 of them has 1 neighbour

To see neighbours for polygons in the objects, we could reference them like the below for the first polygon:

```{r}
wm_q[[1]]
```

From the result, we know Polygon 1 has 5 neighbours, the numbers represents the polygon IDs of the respective neighbours stored in the hunan SpatialPolygonsDataFrame class

We can retrieve the county name of polygon ID 1 by using

```{r}
hunan$County[1]
```

To reveal the names of the 5 neighbours, we can use

```{r}
hunan$County[c(2,3,4,57,85)]
```

To reveal the GDPPC of these 5 counties, we can use

```{r}
nb1 = wm_q[[1]] 
nb1 = hunan$GDPPC[nb1]
nb1
```

The result displays the 5 nearest neighbours based on Queen's method

The complete weight matrix can be displayed by using the `str()` function

```{r}
str(wm_q)
```

## Visualizing contiguity weights

In a connectivity graph, each point's neighbouring points are represented by a line. As the exercise is focused on  polygons, points needs to be created before we can build connectivity graphs. Polygon centroids will be the mechanism used for this purpose. 

### Getting Latitude and Longitude of Polygon Centroids

Before we can create the connectivity graph, we must assign points to each polygon.  For this to function, we need the coordinates in a separate data frame. We'll utilize a mapping function to accomplish this. The mapping function creates a vector of identical length by applying a specified function to each element of a vector. We will use the geometry column of us.bound as our input vector. 

`st_centroid` from the sf package & `map_dbl`from the purrr package will be used to accomplish this. We can map the `st_centroid` function over the geometry column us.bounds to obtain our required values.

-   The longitude is the first variable in each centroid, this enables us to obtain only the longitude.

-   The latitude is the second variable in each centroid, this enables us to obtain only the latitude

-   Using the double bracket notation \[\[\]\] and the index, we can access the latitude & longitude values.

    ```{r}
    longitude = map_dbl(hunan$geometry, ~st_centroid(.x)[[1]]) #longitude index 1
    latitude = map_dbl(hunan$geometry, ~st_centroid(.x)[[2]]) #latitude index 2

    ```

    After getting the longitude and latitudes, we can form the coordinates object named `coord` using `cbind`

    Using the `head` function, we can inspect the elements of `coord` to verify if they are correctly formatted

    ```{r}
    coord = cbind(longitude, latitude)
    head(coord)
    ```

### Plotting Queen contiguity based neighbours map

We can now plot the contiguity graph with our `coord` object

#### Using Queen's method with `wm_q`

```{r}
plot(hunan$geometry, border="lightblue")
plot(wm_q, coord, pch = 19, cex = 0.6, add = TRUE, col= "black")
```

#### Using Rook's Method with `wm_r`

```{r}
plot(hunan$geometry, border="lightblue")
plot(wm_r, coord, pch = 19, cex = 0.6, add = TRUE, col= "black")
```

#### Plotting both Rook's & Queen's method

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightblue")
plot(wm_r, coord, pch = 19, cex = 0.6, add = TRUE, col= "black")
plot(hunan$geometry, border="lightblue")
plot(wm_q, coord, pch = 19, cex = 0.6, add = TRUE, col= "black")
```

## Computing distance based neighbours

With the use of Neighbourhood contiguity by distance - `dnearneigh()` of **spdep** package, we can determine the distance based weight matrix.

The function looks for neighbours of regions points by Euclidean distance between the *lower (\>=) and upper (\<=) bound* or with the parameter `longlat = True` by great circle distance in km

### Find the lower and upper bounds

1.  Using the k nearest neighbour (knn) algorithm, we can return a matrix with indices of points that belongs to the set of k nearest neighbours of each others by using `knearneigh()` of **spdep**

2.  Convert the knn objects into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using `knn2nb()`

3.  Return the length of neighbour relationship edges by using `nbdists()` of spdep. The function returns in the units of coordinates if the coordinates are projected, in km otherwise.

4.  Remove the list structure of the return objects by using `unlist()`

```{r}
k1 = knn2nb(knearneigh(coord)) #returns a list of nb objects from the result of k nearest neighbours matrix, Step 1 & 2
k1dist = unlist(nbdists(k1, coord, longlat = TRUE)) #return the length of neighbour relationship edges and remove the list structures, Step 3 & 4
summary(k1dist)
```

From the result, the largest first nearest neighbour is 61.79km, hence by using this as the upper bound, we can be certain that all units will have at least 1 neighbour

### Finding the fixed distanced weight matrix

`dnearneigh` will be used to compute the distance weight matrix

```{r}
wm_d62 = dnearneigh(coord, 0, 62, longlat = TRUE)
wm_d62
```

The average number of links denotes the number of non zero links divided by the number of regions. In this case, a region has about on average between 3-4 neighbours

Next, we will use `str()` to display the content of wm_d62 weight matrix.

```{r}
str(wm_d62)
```

Another way to display the structure of the weight matrix is to combine `table()` and `card()` of spdep.

-   The `card()` function counts the neighboring regions in the neighbours list.

-   `table()` creates a contingency table of the counts for each combination of factor levels using cross-classifying factors.

```{r}
cardinality = card(wm_d62)
table(hunan$County, cardinality) 
```

**`n.comp.nb()`** finds the number of disjoint connected subgraphs in the graph depicted by **`nb.obj`** - a spatial neighbours list object using depth first search

```{r}
n_comp = n.comp.nb(wm_d62)
```

It returns

-   **nc:** number of disjoint connected subgraphs

**comp.id:** vector with the indices of the disjoint connected subgraphs that the nodes in **`nb.obj`** belong to, in this case the distance weight matrix

```{r}
n_comp$nc
#n_comp$comp.id
table(n_comp$comp.id)
```

## Plotting fixed distance weight matrix

## Reference

Kam T.S (2022), *R for Geospatial Data Science and Analytics, Chapter 3 Spatial Weights and Applications*

https://r4gdsa.netlify.app/chap03.html
