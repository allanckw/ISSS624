---
title: "In Class Exercise 1 - Applications of Spatial Weights"
author: "Allan Chong"
editor: visual
---

## Overview

In Class Exercise 1 - Applications of Spatial Weights, this page describes how to apply spatial weights for geospatial analysis

## Getting Started

The code chunk below install & load sf, spdep, tmap & tidyverse packages into the R env

```{r}
pacman::p_load(sf,tidyverse,spdep, tmap)

```

### Importing Hunan Geospatial sf

```{r}
hunan_sf = st_read(dsn="data/geospatial", layer="Hunan")
```

### Loading Hunan 2012 Aspatial File in CSV

```{r}
hunan_GDP = read_csv("data/aspatial/hunan_2012.csv")
```

## Joining attribute data to the simple feature files

Next, *left_join()* of **dplyr** is used to join the geographical data and attribute table

```{r}
hunan = left_join(hunan_sf, hunan_GDP)
```

## Visualizing Regional Development Indicator

Using the **tmap** package, we can visualize the distribution of GDPPC 2012

```{r}

basemap = tm_shape(hunan) + 
          tm_polygons()

gdppc = tm_shape(hunan) +
        tm_polygons("GDPPC")

tmap_arrange(basemap, gdppc, asp=1, ncol=2)

```

## Computing Contiguity Spatial Weights

In this section, the `poly2nb()` function of the spdep package is used to compute contiguity weight matrices for the study area

-   The function builds a neighbour list based on regions with contiguous boundaries, the default of the algorithm uses Queens case, unless explicitly set to false

```{r}
wm_q = poly2nb(hunan)
summary(wm_q)

wm_r = poly2nb(hunan, queen = FALSE)
summary(wm_r)

```

From the results, there are 88 regions in Hunan,

Using the Queen's method, 85 of them has 11 neighbours, while only 2 of them has 1 neighbour

Using the Rook's method 85 of them has 10 neighbours, while only 2 of them has 1 neighbour

To see neighbours for polygons in the objects, we could reference them like the below for the first polygon:

```{r}
wm_q[[1]]
```

From the result, we know Polygon 1 has 5 neighbours, the numbers represents the polygon IDs of the respective neighbours stored in the hunan SpatialPolygonsDataFrame class

We can retrieve the county name of polygon ID 1 by using

```{r}
hunan$County[1]
```

To reveal the names of the 5 neighbours, we can use

```{r}
hunan$County[c(2,3,4,57,85)]
```

To reveal the GDPPC of these 5 counties, we can use

```{r}
nb1 = wm_q[[1]] 
nb1 = hunan$GDPPC[nb1]
nb1
```

The result displays the 5 nearest neighbours based on Queen's method

The complete weight matrix can be displayed by using the `str()` function

```{r}
str(wm_q)
```

## Visualizing contiguity weights

In a connectivity graph, each point's neighbouring points are represented by a line. As the exercise is focused on  polygons, points needs to be created before we can build connectivity graphs. Polygon centroids will be the mechanism used for this purpose. 

### Getting Latitude and Longitude of Polygon Centroids

Before we can create the connectivity graph, we must assign points to each polygon.  For this to function, we need the coordinates in a separate data frame. We'll utilize a mapping function to accomplish this. The mapping function creates a vector of identical length by applying a specified function to each element of a vector. We will use the geometry column of us.bound as our input vector. 

`st_centroid` from the sf package & `map_dbl`from the purrr package will be used to accomplish this. We can map the `st_centroid` function over the geometry column us.bounds to obtain our required values.

-   The longitude is the first variable in each centroid, this enables us to obtain only the longitude.

-   The latitude is the second variable in each centroid, this enables us to obtain only the latitude

-   Using the double bracket notation \[\[\]\] and the index, we can access the latitude & longitude values.

    ```{r}
    longitude = map_dbl(hunan$geometry, ~st_centroid(.x)[[1]]) #longitude index 1
    latitude = map_dbl(hunan$geometry, ~st_centroid(.x)[[2]]) #latitude index 2

    ```

    After getting the longitude and latitudes, we can form the coordinates object named `coord` using `cbind`

    Using the `head` function, we can inspect the elements of `coord` to verify if they are correctly formatted

    ```{r}
    coord = cbind(longitude, latitude)
    head(coord)
    ```

### Plotting Queen contiguity based neighbours map

We can now plot the contiguity graph with our `coord` object

#### Using Queen's method with `wm_q`

```{r}
plot(hunan$geometry, border="lightblue")
plot(wm_q, coord, pch = 19, cex = 0.6, add = TRUE, col= "black")
```

#### Using Rook's Method with `wm_r`

```{r}
plot(hunan$geometry, border="lightblue")
plot(wm_r, coord, pch = 19, cex = 0.6, add = TRUE, col= "black")
```

#### Plotting both Rook's & Queen's method

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightblue")
plot(wm_r, coord, pch = 19, cex = 0.6, add = TRUE, col= "black")
plot(hunan$geometry, border="lightblue")
plot(wm_q, coord, pch = 19, cex = 0.6, add = TRUE, col= "black")
```

## Computing distance based neighbours

With the use of Neighbourhood contiguity by distance - `dnearneigh()` of **spdep** package, we can determine the distance based weight matrix.

The function looks for neighbours of regions points by Euclidean distance between the *lower (\>=) and upper (\<=) bound* or with the parameter `longlat = True` by great circle distance in km

### Find the lower and upper bounds

1.  Using the k nearest neighbour (knn) algorithm, we can return a matrix with indices of points that belongs to the set of k nearest neighbours of each others by using `knearneigh()` of **spdep**

2.  Convert the knn objects into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using `knn2nb()`

3.  Return the length of neighbour relationship edges by using `nbdists()` of spdep. The function returns in the units of coordinates if the coordinates are projected, in km otherwise.

4.  Remove the list structure of the return objects by using `unlist()`

```{r}
k1 = knn2nb(knearneigh(coord)) #returns a list of nb objects from the result of k nearest neighbours matrix, Step 1 & 2
k1dist = unlist(nbdists(k1, coord, longlat = TRUE)) #return the length of neighbour relationship edges and remove the list structures, Step 3 & 4
summary(k1dist)
```

From the result, the largest first nearest neighbour is 61.79km, hence by using this as the upper bound, we can be certain that all units will have at least 1 neighbour

### Finding the fixed distanced weight matrix

`dnearneigh` will be used to compute the distance weight matrix

```{r}
wm_d62 = dnearneigh(coord, 0, 62, longlat = TRUE)
wm_d62
```

The average number of links denotes the number of non zero links divided by the number of regions. In this case, a region has about on average between 3-4 neighbours

Next, we will use `str()` to display the content of wm_d62 weight matrix.

```{r}
str(wm_d62)
```

Another way to display the structure of the weight matrix is to combine `table()` and `card()` of spdep.

-   The `card()` function counts the neighboring regions in the neighbours list.

-   `table()` creates a contingency table of the counts for each combination of factor levels using cross-classifying factors.

```{r}
cardinality = card(wm_d62)
table(hunan$County, cardinality) 
```

**`n.comp.nb()`** finds the number of disjoint connected subgraphs in the graph depicted by **`nb.obj`** - a spatial neighbours list object using depth first search

```{r}
n_comp = n.comp.nb(wm_d62)
```

It returns

-   **nc:** number of disjoint connected subgraphs

-   **comp.id:** vector with the indices of the disjoint connected subgraphs that the nodes in **`nb.obj`** belong to, in this case the distance weight matrix

```{r}
n_comp$nc
#n_comp$comp.id
table(n_comp$comp.id)
```

## Plotting fixed distance weight matrix

We can plot the distance weight matrix by using the code below.

```{r}
plot(hunan$geometry, border="lightblue")
plot(wm_d62, coord, add=TRUE)
plot(k1, coord, add=TRUE, col="red", length = 0.1)
```

-   The black lines show the links of neighbours within the cut-off distance of 62km.

-   The red lines show the links of 1st nearest neighbours

Alternatively, we can plot both of them next to each other with the code below.

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightblue")
plot(wm_d62, coord, add=TRUE)
plot(hunan$geometry, border="lightblue")
plot(k1, coord, add=TRUE, col="red", length = 0.1)
```

## Computing adaptive distance weight matrix

The fixed distance weight matrix has the property that locations with higher densities of habitation (often urban areas) tend to have more neighbours, whereas areas with lower densities (typically rural areas) tend to have fewer neighbours.

By enforcing symmetry or accepting asymmetric neighbours, as shown in the code below, it is possible to control the number of neighbours of each region using the knn algorithm.

```{r}
knn6 = knn2nb(knearneigh(coord, k=6))
```

Similarly, we can display the content of the matrix by using `str()`

```{r}
str(knn6)
```

#### Plotting distance based neighbours

```{r}
plot(hunan$geometry, border="lightblue")
plot(knn6, coord, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## Weights based on Inverse distance methods

We will need to compute the distances between areas using `nbdists()` of **spdep** package

```{r}
dist = nbdists(wm_q, coord, longlat=TRUE)
ids = lapply(dist, function(x) 1/ (x))
ids
```

### Row standardize Weight Matrix

The `nb2listw` function adds spatial weights for the selected coding scheme to a neighbours list. It's possible to determine whether a spatial weights object is similar to symmetric and can be transformed in this way to produce real eigenvalues or for Cholesky decomposition.

There are a number of Styles to choose from (Bivand, n.d)

-   B is the basic binary coding,

-   W is row standardised (sums over all links to n),

-   C is globally standardised (sums over all links to n),

-   U is equal to C divided by the number of neighbours (sums over all links to unity),

-   S is the variance-stabilizing coding scheme

For this example, we\'ll stick with the style=\"W\" option for simplicity\'s but note that other more robust options are available, notably style=\"B\", basic binary coding.

```{r}
rswm_q = nb2listw(wm_q, style="W", zero.policy=TRUE)
rswm_q
```

Lists of non-neighbours are possible with the zero.policy=TRUE option.

A zero.policy of FALSE would return an error, however this should be used carefully as the user might not be aware of missing neighbors in their dataset.

To view the weight of the first polygon's 10 neighbour types, we can use the code below

```{r}
rswm_q$weights[10]
```

Each neighbor is assigned a 0.125 of the total weight. This means that when R computes the average neighboring income values, each neighbor\'s income will be multiplied by 0.125 before being tallied.

Using the same method, we can also derive a row standardized distance weight matrix by using the code below.

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids

```

```{r}
rswm_ids$weights[1]
summary(unlist(rswm_ids$weights))
```

## Application of Spatial Weight Matrix

In this section, 4 different spatial lagged variables are discussed, they are:

1.  spatial lag with row-standardized weights,

2.  spatial lag as a sum of neighbouring values,

3.  spatial window average,

4.  spatial window sum.

### 1. Spatial lag with row-standardized weights

First, Compute the average neighbor GDPPC value for each polygon. These values are often referred to as **spatially lagged values**.
We use `lag.listw` to compute the Spatial lag of a numeric vector

```{r}
gdppc.lag = lag.listw(rswm_q, hunan$GDPPC)
gdppc.lag
```

Using the code below, we can append the spatially lag GDPPC values to the Hunan sf data frame.

```{r}
lag.list = list(hunan$County, gdppc.lag) #lag.listw(rswm_q, hunan$GDPPC)
lag.res = as.data.frame(lag.list)
colnames(lag.res) = c("County", "lag GDPPC")
hunan = left_join(hunan, lag.res)
head(hunan)
```

We can plot the GDPPC and spatial lag GDPPC for comparison using the code below

```{r}
lag_gdppc = tm_shape(hunan) +
        tm_polygons("lag GDPPC")

tmap_arrange(gdppc, lag_gdppc)
```

### 2 Spatial lag as a sum of neighboring values

Another way to compute spatial lag as a sum of neigbouring values is by assigning binary weights.

Going back to the neighbours list `wm_q`, we can apply a function that will assign binary weights by using `lapply`, and use `nb2listw` to assign the weights, using the `glist` parameter to explicitly assign these wieghts

```{r}
b_weights = lapply(wm_q, function(x) 0*x + 1)
b_weights2 = nb2listw(wm_q, glist = b_weights, style = "B")
b_weights2
```

After the weight have been assigned, we can use `lag.listw` to calculate the lag variable from our weights and GDPPC

```{r}
lag_sum = list(hunan$County, lag.listw(b_weights2, hunan$GDPPC))
lag.res = as.data.frame(lag_sum)
colnames(lag.res) = c("County", "lag_sum GDPPC")
lag_sum
```

Examining the result of the lag_sum, the first value of `lag_sum` is 124236, comparing it with the value in `gdppc.lag` discussed in Spatial lag with row-standardized weights, the first value was 24847.20.

It can be observed that a weight of 5 has been multiplied. In our earlier discussion, we know that Anxiang has 5 neighbours. Hence, we can conclude that the spatial lag sum method will multiply the result of Spatial lag with row-standardized weights by the number of neighbours in a region.

Using the code below, we can append the spatial lag sum GDPPC values to the Hunan sf data frame.

```{r}
hunan = left_join(hunan, lag.res)
```

We can plot the GDPPC and spatial lag GDPPC for comparison using the code below

```{r}
lag_sum_gdppc = tm_shape(hunan) +
        tm_polygons("lag_sum GDPPC")

tmap_arrange(gdppc, lag_sum_gdppc)
```

### 3 Spatial window average

The diagonal component is included in the spatial window average, which uses weights that are standardized by row.

Before allocating weights in R, we must return to the neighbours structure and add the diagonal element, the `include.self()` method from **spdep** package is used to accomplish that

```{r}
wm_q_w_diagonal = wm_q
include.self(wm_q_w_diagonal)

wm_q_w_diagonal = nb2listw(wm_q_w_diagonal) #compute the weights
wm_q_w_diagonal
```

We will then use `lag.listw()` to create the lag variable from the weight structure and GDPPC variable

```{r}
lag_w_avg_gdppc = lag.listw(wm_q_w_diagonal, hunan$GDPPC)
lag_w_avg_gdppc
```

Next, we will convert the lag variable listw object into a data.frame by using `as.data.frame()`

```{r}
lag.list.winavg = list(hunan$County, lag.listw(wm_q_w_diagonal, hunan$GDPPC))
lag.list.winavg.res = as.data.frame(lag.list.winavg)
colnames(lag.list.winavg.res) = c("County", "lag_window_avg GDPPC")
```

Using the code below, we can append the spatial window average GDPPC values to the Hunan sf data frame.

```{r}
hunan = left_join(hunan, lag.list.winavg.res)
```

We can plot the GDPPC and window average GDPPC for comparison using the code below

```{r}
win_avg_gdppc = tm_shape(hunan) +
        tm_polygons("lag_window_avg GDPPC")

tmap_arrange(gdppc, win_avg_gdppc)
```

### 4 Spatial window sum

The spatial window sum is the counter part of the window average, but ***without*** using row-standardized weights.

To do this we assign binary weights to the neighbour structure that includes the diagonal element, similar to the one done in Spatial lag as a sum of neighboring values

```{r}
wm_q_w_diagonal = wm_q
include.self(wm_q_w_diagonal)
b_weights_winsum = lapply(wm_q_w_diagonal, function(x) 0*x + 1)
b_weights_winsum[1]
```

Similar to the one done in Spatial lag as a sum of neighboring values, we use `nb2listw()` and `glist` *parameter* to explicitly assign weight values.

```{r}
b_weights_winsum2 = nb2listw(wm_q_w_diagonal, glist=b_weights_winsum, style="B")
b_weights_winsum2

```

With the new weight structure, the new lag variable can be derived by using `lag.listw()`

```{r}
w_sum_gdppc = list(hunan$County, lag.listw(b_weights_winsum2, hunan$GDPPC))
w_sum_gdppc
```

Next, we will convert the lag variable listw object into a data.frame by using `as.data.frame()`

```{r}
w_sum_gdppc.res = as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) = c("County", "w_sum GDPPC")
```

Using the code below, we can append the spatial window sum GDPPC values to the Hunan sf data frame.

```{r}
hunan = left_join(hunan, w_sum_gdppc.res)
```

We can plot the GDPPC and window sum GDPPC for comparison using the code below

```{r}
win_sum_gdppc = tm_shape(hunan) +
        tm_polygons("w_sum GDPPC")

tmap_arrange(gdppc, win_sum_gdppc)
```

## Reference

Kam T.S (2022), *R for Geospatial Data Science and Analytics, Chapter 3 Spatial Weights and Applications*

https://r4gdsa.netlify.app/chap03.html

Bivand R (n.d) *Spatial weights for neighbours lists*

https://r-spatial.github.io/spdep/reference/nb2listw.html
