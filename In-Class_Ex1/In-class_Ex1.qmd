---
title: "In Class Exercise 1"
author: "Allan Chong"
editor: visual
---

## Overview

In Class Exercise 1

## Getting Started

The code chunk below install & load sf & tidyverse packages into the R env

```{r}
pacman::p_load(sf,tidyverse,spdep, tmap)

```

### Importing Hunan Geospatial Shp File

```{r}
hunan_sf = st_read(dsn="data/geospatial", layer="Hunan")
```

### Loading Hunan GDP Aspatial File in CSV

```{r}
hunan_GDP = read_csv("data/aspatial/hunan_2012.csv")
```

## Joining attribute data to the simple feature files

Next, *left_join()* of **dplyr** is used to join the geographical data and attribute table

```{r}
hunan = left_join(hunan_sf, hunan_GDP)
```

## Visualizing Regional Development Indicator

Using the **tmap** package, we can visualize the distribution of GDPPC 2012

```{r}

basemap = tm_shape(hunan) + 
          tm_polygons()

gdppc = tm_shape(hunan) +
        tm_polygons("GDPPC")

tmap_arrange(basemap, gdppc, asp=1, ncol=2)

```

## Computing Contiguity Spatial Weights

In this section, the `poly2nb()` function of the spdep package is used to compute contiguity weight matrices for the study area

-   The function builds a neighbour list based on regions with contiguous boundaries, the default of the algorithm uses Queens case, unless explicitly set to false

```{r}
wm_q = poly2nb(hunan)
summary(wm_q)

wm_r = poly2nb(hunan, queen = FALSE)
summary(wm_r)

```

From the results, there are 88 regions in hunan, 85 of them has 11 neighbours, while only 2 of them has 1 neighbour

To see neighbours for polygons in the objects, we could reference them like the below for the first polygon:

```{r}
wm_q[[1]]
```

From the result, we know Polygon 1 has 5 neighbours, the numbers represents the polygon IDs of the respective neighbours stored in the hunan SpatialPolygonsDataFrame class

We can retrieve the county name of polygon ID 1 by using

```{r}
hunan$County[1]
```

To reveal the names of the 5 neighbours, we can use

```{r}
hunan$County[c(2,3,4,57,85)]
```

To reveal the GDPPC of these 5 counties, we can use

```{r}
nb1 = wm_q[[1]] 
nb1 = hunan$GDPPC[nb1]
nb1
```

The result displays the 5 nearest neighbours based on Queen's method

The complete weight matrix can be displayed by using the `str()` function

```{r}
str(wm_q)
```
